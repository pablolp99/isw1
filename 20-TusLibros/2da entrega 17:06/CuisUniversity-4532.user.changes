

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (10 June 2021 19:41:20) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 1/TusLibros-18.st----!

TestCase subclass: #CasheerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CasheerTest category: 'TusLibros' stamp: 'jn 6/10/2021 19:45:28'!
TestCase subclass: #CasheerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Casheer category: 'TusLibros' stamp: 'jn 6/10/2021 19:58:42'!
Object subclass: #Casheer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CasheerTest methodsFor: 'no messages' stamp: 'jn 6/10/2021 19:58:34'!
test01CanNotCheckOutEmptyCart

	| cart casheer |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	casheer := Casheer new.
	
	self 
		should: [ casheer checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = casheer emptyCartErrorMessage.
			self assert: casheer hasNonePurchases ]! !

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 19:58:51'!
ERROR!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 19:58:51'!
ERROR!
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 19:59:08'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 19:59:47' prior: 50859558!
checkOut: aCart 

	self error: self emptyCartErrorDescription! !

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 19:59:51'!
ERROR!
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:00:01' prior: 50859563!
checkOut: aCart 

	self error: self emptyCartErrorMessage! !
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:00:42'!
emptyCartErrorMessage
	
	^'Cart is empty.' ! !
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:00:44' prior: 50859576!
emptyCartErrorMessage
	
	^ 'Cart is empty.' ! !

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:00:51'!
ERROR!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:00:51'!
ERROR!
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:01:01'!
hasNonePurchases
	self shouldBeImplemented.! !
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:01:12' prior: 50859591!
hasNonePurchases
	
	^ true! !

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:01:14'!
PASSED!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:01:16'!
PASSED!
!CasheerTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:08:04' prior: 50859538!
test01CanNotCheckOutEmptyCart

	| cart casheer cardExpirationDate cardName cardNumber |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	casheer := Casheer new.
	
	cardNumber := '1234567890123456'.
	cardExpirationDate := '012025' .
	cardName := 'Steve Jobs'.
	
	self 
		should: [ casheer checkOut: cart 
				withCardNumber: cardNumber 
				expirationDate: cardExpirationDate 
				name: cardName ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = casheer emptyCartErrorMessage. ]! !

!methodRemoval: Casheer #hasNonePurchases stamp: 'jn 6/10/2021 20:08:25'!
hasNonePurchases
	
	^ true!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:08:31'!
ERROR!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:08:31'!
ERROR!
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:08:42'!
checkOut: aCart withCardNumber: aString expirationDate: aString3 name: aString4 
	self shouldBeImplemented.! !

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:08:49'!
FAILURE!
!Casheer methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:09:21' prior: 50859635!
checkOut: aCart withCardNumber: aCardNumber expirationDate: aCardExpirationDate name: aCardName 
	
	self error: self emptyCartErrorMessage! !

!methodRemoval: Casheer #checkOut: stamp: 'jn 6/10/2021 20:09:25'!
checkOut: aCart 

	self error: self emptyCartErrorMessage!

!testRun: #CasheerTest #test01CanNotCheckOutEmptyCart stamp: 'jn 6/10/2021 20:09:29'!
PASSED!
!CasheerTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:10:12'!
test02CheckOutCartWithOneItem

	| cart casheer cardExpirationDate cardName cardNumber |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	
	casheer := Casheer new.
	
	cardNumber := '1234567890123456'.
	cardExpirationDate := '012025' .
	cardName := 'Steve Jobs'.
	
	self 
		should: [ casheer checkOut: cart 
				withCardNumber: cardNumber 
				expirationDate: cardExpirationDate 
				name: cardName ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = casheer emptyCartErrorMessage. ]! !

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/TerseGuide.pck.st----!

(t includes: 'cat')!

t := Trie new.!

t add: 'car'!

t includes: 'car'!

t includes: 'cat' !

t at:'pablo' put: 5!

t includes: 'pablo'!

t at: 'pablo'!

t includesKey: 'pablo' false !

t includesKey: 'pablo' !

tt := Trie new!

tt add: 'pablo'!

t includes: 'pablo'!

t _ Trie new.!

t add: 'car'.!

t at: 'car' put: Float pi.!

t at: 'cat' put: Date today.!

t explore.!

(t includesKey: 'car') print.!

(t includes: 'cat') print.!

x := Dictionary new.!

x add: 'pablo'->50!

x size!

x includes: 'pablo'!

x includesKey: 'pablo' false !

x includesKey: 'pablo'  !

!classRemoval: #Casheer stamp: 'jn 6/10/2021 20:44:17'!
Object subclass: #Casheer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'jn 6/10/2021 20:44:18'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CasheerTest stamp: 'jn 6/10/2021 20:44:18'!
TestCase subclass: #CasheerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'jn 6/10/2021 20:44:19'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 1/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/10/2021 20:45:19'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'jn 6/10/2021 20:45:41'!
test01CanNotCheckOutAnEmptyCart

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:46:00' prior: 50862842!
test01CanNotCheckOutAnEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:46:12' prior: 50862847!
test01CanNotCheckOutAnEmptyCart

	| cart |
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:46:31' prior: 50862860!
test01CanNotCheckOutAnEmptyCart

	| cart |
	
	cart := Cart acceptingItemsOf: (Array with: self itemSellByTheStore).
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'jn 6/10/2021 20:47:54'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:47:45' prior: 50862874!
test01CanNotCheckOutAnEmptyCart

	| cart cashier |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	
	self 
		should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:47:57'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:47:57'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:48:06'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:48:30' prior: 50862914!
checkOut: aCart 
	
	self error: self emptyCartErrorMessage.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:48:33'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:48:48'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:48:58' prior: 50862927!
emptyCartErrorMessage
	
	^'Cart is empty.'! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:48:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:49:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:49:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 20:54:23'!
test02CheckOutCartWithOneItem

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).! !

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 20:54:30'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 20:54:30'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'jn 6/10/2021 20:54:51' prior: 50862667!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 20:54:53'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 20:55:01'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 20:55:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/10/2021 20:55:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 20:55:12'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/10/2021 20:55:12'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/10/2021 20:55:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/10/2021 20:55:12'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/10/2021 20:55:12'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/10/2021 20:55:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/10/2021 20:55:12'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'jn 6/10/2021 21:33:20' prior: 50862819!
defaultCatalog
	
	^ Dictionary new add: (self itemSellByTheStore)->500! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/10/2021 21:33:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:33:23'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/10/2021 21:33:23'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/10/2021 21:33:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/10/2021 21:33:23'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/10/2021 21:33:23'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/10/2021 21:33:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/10/2021 21:33:23'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/10/2021 21:35:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:35:41'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:35:41'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:36:17'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:36:17'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:36:28'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:37:13'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:37:13'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'jn 6/10/2021 21:41:51' prior: 50863003!
defaultCatalog
	
	| dictionary |
	dictionary := Dictionary new add: (self itemSellByTheStore)->500.
	^ dictionary.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/10/2021 21:41:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:41:56'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/10/2021 21:41:56'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/10/2021 21:41:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/10/2021 21:41:56'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/10/2021 21:41:56'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/10/2021 21:41:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/10/2021 21:41:56'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:42:04'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:42:04'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'jn 6/10/2021 21:42:50' prior: 50863059!
defaultCatalog
	
	| dictionary |
	dictionary := Dictionary new.
	dictionary add: (self itemSellByTheStore)->500.
	^ dictionary.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/10/2021 21:42:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 21:42:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 21:42:57'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 21:42:57'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 21:44:12'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 21:44:12'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/10/2021 21:44:50' prior: 50862919!
checkOut: aCart 

	aCart isEmpty ifTrue: [ 	self error: self emptyCartErrorMessage. ].
	^500.
! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/10/2021 21:44:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/10/2021 21:44:52'!
PASSED!

----QUIT----(10 June 2021 21:45:28) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (13 June 2021 18:10:45) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:11:25'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:12:33'!
test03CheckOutCartWithMultipleItems

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).! !

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:12:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:12:52'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:13:36' prior: 50863169!
test03CheckOutCartWithMultipleItems

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'anotherValidBook'->300.	
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cart add: 'anotherValidBook'.

	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:14:16' prior: 50863187!
test03CheckOutCartWithMultipleItems

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'anotherValidBook'->300.	
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 2 of: 'validBook'.
	cart add: 'anotherValidBook'.

	cashier := Cashier new.
	
	self assert: 1300 equals: (cashier checkOut: cart).! !

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:14:18'!
FAILURE!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:14:18'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:14:56' prior: 50863145!
checkOut: aCart 

	aCart isEmpty ifTrue: [ 	self error: self emptyCartErrorMessage. ].
	^ aCart calculateTotalAmount.
! !
!Cart methodsFor: 'adding' stamp: 'jn 6/13/2021 18:15:09'!
calculateTotalAmount
	! !
!Cart methodsFor: 'queries' stamp: 'jn 6/13/2021 18:17:10' prior: 50863228!
calculateTotalAmount
	
	^ items sum: [:item | catalog at: item ]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:17:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:17:12'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:17:12'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'jn 6/13/2021 18:17:34' prior: 50863232!
calculateTotalAmount
	
	^ items sum: [ :item | catalog at: item ]! !
!Cart methodsFor: 'queries' stamp: 'jn 6/13/2021 18:18:52'!
totalAmount
	
	^ items sum: [ :item | catalog at: item ]! !

!methodRemoval: Cart #calculateTotalAmount stamp: 'jn 6/13/2021 18:19:01'!
calculateTotalAmount
	
	^ items sum: [ :item | catalog at: item ]!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:19:11' prior: 50863222!
checkOut: aCart 

	aCart isEmpty ifTrue: [ 	self error: self emptyCartErrorMessage. ].
	^ aCart totalAmount.
! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:19:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:19:12'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:19:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:25:55'!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog cardNumber |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	cardNumber := 1234567890123456.
	self assert: 1300 equals: (cashier checkOut: cart withCardNumber: cardNumber).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:33:13' prior: 50863277!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog cardNumber |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	cardNumber := 1234567890123456.
	
	self assert: 1300 equals: (cashier checkOut: cart withCardNumber: cardNumber).! !

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 18:37:38'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:37:32' prior: 50863292!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456123543154154 
				expirationDate: 022022
				holder: 'Alan Kay'.
	self 
		should: [ cashier checkOut: cart withCard: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12 
				expirationDate: 022022
				holder: 'Alan Kay'.
	self 
		should: [ cashier checkOut: cart withCard: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:39:06' prior: 50863313!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456123543154154.
	self 
		should: [ cashier checkOut: cart withCard: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart withCard: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]! !

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:39:09'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:39:09'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:39:27'!
withNumber: aLargePositiveInteger 
	self shouldBeImplemented.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:40:26' prior: 50863380!
withNumber: aCardNumber 

	self new forNumber: aCardNumber.! !

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:40:28'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:40:39'!
forNumber: aLargePositiveInteger 
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 18:40:52'!
Object subclass: #Card
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:40:50' prior: 50863393!
forNumber: aCardNumber

	number := aCardNumber. 
	! !

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:40:55'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:41:05'!
checkOut: aCart withCard: aClass 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:41:50' prior: 50863413!
checkOut: aCart withCard: aCard
	aCard assertValidCard.
	self checkOut: aCart. 
	
	! !

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:41:52'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:42:04'!
assertValidCard
	self shouldBeImplemented.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:42:47' prior: 50863427!
assertValidCard
	
	^ self error: self class invalidCardErrorMessage! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:42:51' prior: 50863432!
assertValidCard
	
	self error: self class invalidCardErrorMessage! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:42:53' prior: 50863438!
assertValidCard
	
	self error: self class invalidCardErrorMessage.! !

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:42:55'!
ERROR!

!methodRemoval: Card class #assertValidCard stamp: 'jn 6/13/2021 18:43:29'!
assertValidCard
	
	self error: self class invalidCardErrorMessage.!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:43:38'!
assertValidCard
	
	self error: self class invalidCardErrorMessage.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:44:14'!
invalidCardErrorMessage

	^ 'Card is invalid'.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:44:50' prior: 50863457!
assertValidCard
	
	self error: self invalidCardErrorMessage.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:44:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:44:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:44:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:44:55'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:44:55'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:45:00'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:45:00'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:45:00'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:00'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:00'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:02'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:02'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:45:30' prior: 50863467!
assertValidCard
	
	self error: self invalidCardErrorMessage.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:45:55' prior: 50863385!
withNumber: aCardNumber 

	^ self new forNumber: aCardNumber.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:45:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:45:59'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:45:59'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:59'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:45:59'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:46:55' prior: 50863418!
checkOut: aCart withCard: aCard

	aCard assertValidCard.
	self checkOut: aCart. 
	
	! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:47:46' prior: 50863512!
assertValidCard
	
	^false.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:48:09' prior: 50863539!
checkOut: aCart withCard: aCard
	self assertValidCard: aCard.
	self checkOut: aCart. 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:48:54'!
assertValidCard: aCard.
	
	aCard assertValidCard ifFalse: [ self error: self invalidCardErrorMessage ].
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:49:09'!
invalidCardErrorMessage

	^ 'Card is invalid.'
	
	! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:50:29'!
isValid
	
	^false.! !

!methodRemoval: Card #assertValidCard stamp: 'jn 6/13/2021 18:50:29'!
assertValidCard
	
	^false.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:50:47' prior: 50863555!
assertValidCard: aCard.
	
	(aCard isValid) ifFalse: [ self error: self invalidCardErrorMessage ].
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:50:50'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:50:50'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:50:50'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:50:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:52:13'!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456.
	cashier checkOut: cart withCard: validCard
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:52:31' prior: 50863591!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456.
	
	self assert: 500 equals: (cashier checkOut: cart withCard: validCard).
! !

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:52:33'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:52:33'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:53:01' prior: 50863565!
isValid
	
	^ number length == 16.! !

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:53:06'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:53:06'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:53:19' prior: 50863627!
isValid
	
	^ number size == 16.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:53:22'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:53:22'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:53:22'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:53:22'!
FAILURE!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:53:22'!
ERROR!

1234154 size!

1234154 digitLength !

1234154 digitLength  !

1234154 log!

12345 printString size!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:56:06' prior: 50863638!
isValid
	
	^ number printString size == 16.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:56:09'!
FAILURE!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:56:09'!
FAILURE!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:56:31' prior: 50863662!
isValid
	
	^ number printString size = 16.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:56:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:56:34'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:56:35'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:56:35'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:56:35'!
FAILURE!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:56:35'!
FAILURE!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:57:12'!
FAILURE!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:57:12'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 18:57:55' prior: 50863549!
checkOut: aCart withCard: aCard
	self assertValidCard: aCard.
	^ self checkOut: aCart. 
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 18:57:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 18:57:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 18:57:57'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 18:57:57'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 18:57:57'!
PASSED!

Date new!

022020 asDate !

022020 asString !

022020!

date !

1 februaryOf: 2020!

Date indexOfMonth: 02!

Date nameOfMonth: 02!

Date month: #February year: 2020!

Date month !

x := Date nameOfMonth: 02!

x!

Date month: x year: 2020!

Date yesterday !

Date yesterday!

Date yesterday > Date now!

Date yesterday > Date today !

Date yesterday < Date today  !

Date yesterday month !

Date yesterday month  !

x := Date nameOfMonth: 02.
Date newDay: 1 month: x year: 2020!

a:= Date newDay: 1 month: x year: 2020 !

a month < Date today month!

(a month) < ((Date today) month)!

(a month) < (Date today month)!

Date today!

Date today year!

Date today year < a year!

lastDay := Date daysInMonth: 02 forYear: 2020.!

a:= Date newDay: lastDay month: x year: 2020!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:19:45'!
test06CanNotCheckOutCartWithExpiratedCard

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date yesterday.
	
	self assert: 500 equals: (cashier checkOut: cart withCard: invalidCard).
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:20:19' prior: 50863765!
test06CanNotCheckOutCartWithExpiratedCard

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date yesterday.
	
	self 
		should: [ cashier checkOut: cart withCard: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
! !

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:21:05'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:21:05'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:21:20'!
withNumber: aSmallInteger expirationDate: aDate 
	self shouldBeImplemented.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:22:12' prior: 50863807!
withNumber: aCardNumber expirationDate: aDate 
	
	self new initializeForCardNumber: aCardNumber andExpirationDate: aDate.! !

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:22:18'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 19:22:26'!
Object subclass: #Card
	instanceVariableNames: 'number cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 19:22:26'!
Object subclass: #Card
	instanceVariableNames: 'number cardNumber date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'jn 6/13/2021 19:22:26'!
initializeForCardNumber: aCardNumber andExpirationDate: aDate 
	self shouldBeImplemented.
	cardNumber := aCardNumber.
	date := aDate.! !
!Card methodsFor: 'initialization' stamp: 'jn 6/13/2021 19:22:39' prior: 50863836!
initializeForCardNumber: aCardNumber andExpirationDate: aDate 

	cardNumber := aCardNumber.
	date := aDate.! !

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:22:42'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:22:57'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:22:57'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:23:13' prior: 50863813!
withNumber: aCardNumber expirationDate: aDate 
	
	^ self new initializeForCardNumber: aCardNumber andExpirationDate: aDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:23:15'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:23:34'!
PASSED!

1234567890123456 asString size!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:24:42' prior: 50863687!
isValid
	
	^ self numberIsValid.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:24:52'!
numberIsValid

	^ number printString size = 16.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:25:03' prior: 50863891!
isValid
	
	^ self numberIsValid and: self dateIsValid.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:25:20'!
dateIsValid

	^ false.! !

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:25:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:25:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:25:24'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:25:24'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:25:24'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:24'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:25:24'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:24'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:25:29'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:25:30'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:25:31'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:25:32'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:33'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:33'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:25:42'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:25:43'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:45'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:25:45'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:26:32' prior: 50863605!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456 expirationDate: Date tomorrow.
	
	self assert: 500 equals: (cashier checkOut: cart withCard: validCard).
! !

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:26:34'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:26:34'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:26:55' prior: 50863969!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456.
	
	self assert: 500 equals: (cashier checkOut: cart withCard: validCard).
! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:28:42' prior: 50863905!
dateIsValid

	date isNotNil ifTrue: [^false] ifFalse: [^true].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:28:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:28:44'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:28:44'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:28:44'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:28:44'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:28:44'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:30:51' prior: 50863405!
forNumber: aCardNumber

	number := aCardNumber. 
	date := nil.
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:30:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:30:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:30:54'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:30:54'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:30:54'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:30:54'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:31:29'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:31:29'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:31:45' prior: 50864007!
dateIsValid

	^false.! !

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:31:47'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:35:15'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:16'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:16'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:36:21'!
PASSED!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:36:43' prior: 50864064!
dateIsValid

	^date isNil not.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:36:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:36:46'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:36:46'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:36:46'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:46'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:36:46'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:46'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:36:50'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:36:52'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:36:53'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:54'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:36:54'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:36:58'!
PASSED!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:37:14' prior: 50864085!
dateIsValid

	^date isNotNil not.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:37:16'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:37:16'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:37:16'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:37:16'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:37:16'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:37:16'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:37:42' prior: 50864135!
dateIsValid

	^date isNotNil ifTrue: [false] ifFalse: [true].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:37:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:37:44'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:37:44'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:37:44'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:37:44'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:37:44'!
ERROR!

Object subclass: #Card
	instanceVariableNames: 'number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 19:39:04'!
Object subclass: #Card
	instanceVariableNames: 'number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'jn 6/13/2021 19:39:09' prior: 50863843!
initializeForCardNumber: aCardNumber andExpirationDate: aDate 

	number := aCardNumber.
	date := aDate.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/13/2021 19:39:27'!
Object subclass: #Card
	instanceVariableNames: 'number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:39:27' prior: 50864032!
forNumber: aCardNumber

	number := aCardNumber. 
	expirationDate := nil.
	! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:39:27' prior: 50864194!
initializeForCardNumber: aCardNumber andExpirationDate: aDate 

	number := aCardNumber.
	expirationDate := aDate.! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:39:27' prior: 50864159!
dateIsValid

	^expirationDate isNotNil ifTrue: [false] ifFalse: [true].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:39:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:39:31'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:39:31'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:39:31'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:39:31'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:39:31'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:39:53'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:39:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:39:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:39:56'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:39:56'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:40:36' prior: 50864220!
dateIsValid

	expirationDate isNotNil ifTrue: [^false] ifFalse: [^true].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:40:37'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:40:37'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:40:37'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:40:37'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:40:37'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:40:37'!
ERROR!

self numberIsValid!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:41:43'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:41:53'!
ERROR!

expirationDate isNotNil!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:42:42'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:43:08' prior: 50864262!
dateIsValid

	expirationDate isNotNil ifTrue: [^false] ifFalse: [^true].! !
!Card methodsFor: 'initialization' stamp: 'jn 6/13/2021 19:43:18' prior: 50864207!
forNumber: aCardNumber

	number := aCardNumber. 
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:43:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:43:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:43:20'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:43:20'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:43:20'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:43:20'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:43:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:43:34'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:43:35'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:43:36'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:43:36'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:47:06'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:47:06'!
ERROR!

nil isNil!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:47:55' prior: 50864300!
dateIsValid

	^ expirationDate isNil.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:48:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:48:01'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:48:01'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:48:01'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:48:01'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:48:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:48:48'!
test07CanCheckOutCartWithValidCardNumberAndDate

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date yesterday.
	
	self 
		should: [ cashier checkOut: cart withCard: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:50:57' prior: 50864378!
test07CanCheckOutCartWithValidCardNumberAndDate

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date tomorrow.
	
	self 
		should: [ cashier checkOut: cart withCard: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:51:20' prior: 50864398!
test07CanCheckOutCartWithValidCardNumberAndDate

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456 expirationDate: Date tomorrow.
	
	self assert: 500 equals: (cashier checkOut: cart withCard: validCard).

! !

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 19:51:25'!
ERROR!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 19:51:25'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 19:51:28'!
PASSED!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 19:51:28'!
ERROR!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 19:51:28'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 19:52:20' prior: 50864354!
dateIsValid

	^ expirationDate isNil ifFalse: [ ].! !

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 20:04:05'!
ERROR!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 20:04:05'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 20:04:11'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 20:04:12'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 20:04:13'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 20:04:14'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:04:14'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:04:14'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 20:04:27'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:04:29'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:04:29'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 20:05:16' prior: 50864468!
dateIsValid

	^ expirationDate isNil ifFalse: [expirationDate < Date today ].! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 20:05:18' prior: 50864510!
dateIsValid

	^ expirationDate isNil ifFalse: [ expirationDate < Date today ].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 20:05:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 20:05:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 20:05:20'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 20:05:20'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:05:20'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 20:05:20'!
FAILURE!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 20:05:20'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 20:05:44' prior: 50864516!
dateIsValid

	expirationDate isNil ifFalse: [ ^expirationDate < Date today ] ifTrue: [ ^true ].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 20:05:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 20:05:46'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 20:05:46'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 20:05:46'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:05:46'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 20:05:46'!
FAILURE!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 20:05:46'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 20:05:52'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 20:05:52'!
FAILURE!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/13/2021 20:06:16' prior: 50864545!
dateIsValid

	expirationDate isNil ifFalse: [ ^expirationDate > Date today ] ifTrue: [ ^true ].! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/13/2021 20:06:18'!
PASSED!

----QUIT----(13 June 2021 20:06:36) CuisUniversity-4532.image priorSource: 17008193!

----STARTUP---- (14 June 2021 17:14:44) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:18:36'!
checkOut: aCart chargingTo: aCard
	self assertValidCard: aCard.
	^ self checkOut: aCart. 
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:18:36' prior: 50863345!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456123543154154.
	self 
		should: [ cashier checkOut: cart chargingTo: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart chargingTo: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:18:36' prior: 50864418!
test07CanCheckOutCartWithValidCardNumberAndDate

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456 expirationDate: Date tomorrow.
	
	self assert: 500 equals: (cashier checkOut: cart chargingTo: validCard).

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:18:36' prior: 50863781!
test06CanNotCheckOutCartWithExpiratedCard

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date yesterday.
	
	self 
		should: [ cashier checkOut: cart chargingTo: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:18:36' prior: 50863992!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456.
	
	self assert: 500 equals: (cashier checkOut: cart chargingTo: validCard).
! !

!methodRemoval: Cashier #checkOut:withCard: stamp: 'jn 6/14/2021 17:18:37'!
checkOut: aCart withCard: aCard
	self assertValidCard: aCard.
	^ self checkOut: aCart. 
	
	!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/14/2021 17:18:39'!
PASSED!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/14/2021 17:18:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 17:25:15' prior: 50864623!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart chargingTo: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]! !

Date today!

TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 18:34:26'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'no messages' stamp: 'jn 6/14/2021 18:37:11'!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:37:14'!
FAILURE!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:37:14'!
FAILURE!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:38:06'!
invalidNumberCardErrorMessage

	^'Invalid card'.! !

1234 numberOfDigitsInBase: 2!

1234 numberOfDigitsInBase: 10!

12333434 numberOfDigitsInBase: 10 !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:41:29' prior: 50863517!
withNumber: aCardNumber 
	
	(aCardNumber numberOfDigits: 16) ifFalse: [ self error: self invalidNumberCardErrorMessage ].
	^ self new forNumber: aCardNumber.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:42:57' prior: 50864801!
withNumber: aCardNumber 
	
	(aCardNumber numberOfDigitsInBase: 10 = 16) ifFalse: [ self error: self invalidNumberCardErrorMessage ].
	^ self new forNumber: aCardNumber.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:43:16' prior: 50864809!
withNumber: aCardNumber 
	
	self assertCardNumber: aCardNumber.
	^ self new forNumber: aCardNumber.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:43:35'!
assertCardNumber: aCardNumber
	
	(aCardNumber numberOfDigitsInBase: 10 = 16) ifFalse: [ self error: self invalidNumberCardErrorMessage ].! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:43:56'!
ERROR!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:43:56'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:44:16' prior: 50864824!
assertCardNumber: aCardNumber
	
	((aCardNumber numberOfDigitsInBase: 10) = 16) ifFalse: [ self error: self invalidNumberCardErrorMessage ].! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:44:17'!
PASSED!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:44:22'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:45:49' prior: 50864768!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 expiresOn: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 expiresOn: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
	! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:47:00'!
withNumber: aCardNumber owner: anOwner expiresOn: anExpirationMonthOfYear
	
	self assertCardNumber: aCardNumber.
	^ self new forNumber: aCardNumber.! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:47:28' prior: 50864854!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:47:29'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:48:35'!
test02CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: '' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: '    ' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidNumberCardErrorMessage. ].
	! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:48:53'!
invalidCardErrorMessage

	^'Invalid card'.! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:48:53' prior: 50864902!
test02CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: '' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: '    ' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:48:53' prior: 50864839!
assertCardNumber: aCardNumber
	
	((aCardNumber numberOfDigitsInBase: 10) = 16) ifFalse: [ self error: self invalidCardErrorMessage ].! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:48:53' prior: 50864881!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !

!methodRemoval: Card class #invalidNumberCardErrorMessage stamp: 'jn 6/14/2021 18:48:53'!
invalidNumberCardErrorMessage

	^'Invalid card'.!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:48:59'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:49:01'!
ERROR!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:49:01'!
ERROR!

!methodRemoval: Card class #withNumber:expirationDate: stamp: 'jn 6/14/2021 18:49:19'!
withNumber: aCardNumber expirationDate: aDate 
	
	^ self new initializeForCardNumber: aCardNumber andExpirationDate: aDate.!

!methodRemoval: Card class #withNumber:owner:expiresOn: stamp: 'jn 6/14/2021 18:49:24'!
withNumber: aCardNumber owner: anOwner expiresOn: anExpirationMonthOfYear
	
	self assertCardNumber: aCardNumber.
	^ self new forNumber: aCardNumber.!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:51:42'!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: '' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: '    ' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !

!methodRemoval: CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:51:42'!
test02CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: '' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: '    ' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:53:26'!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: 1234567890123456.
	
	self assert: card number equals: 1234567890123456.
	
	! !

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:53:31'!
ERROR!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:53:31'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:53:43'!
number
	self shouldBeImplemented.
	^number! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:53:51' prior: 50865043!
number
	^ number! !

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:53:53'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:53:55'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:54:31' prior: 50864994!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456 owner: '' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 1234567890123456 owner: '    '  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:54:33'!
ERROR!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:54:33'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:54:42'!
withNumber: aSmallInteger owner: aString 
	self shouldBeImplemented.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:55:45' prior: 50865082!
withNumber: aCardNumber owner: anOwner 
			
	self assertCardNumber: aCardNumber.
	self assertCardOwner: anOwner.

	^ self new forNumber: aCardNumber owner: anOwner.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:56:43'!
assertCardOwner: anOwner
	
	(anOwner withBlanksTrimmed isEmpty) ifTrue: [ self error: self invalidCardErrorMessage ].! !

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:56:49'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:58:31'!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: 1234567890123456 owner: 'Alan Kay'.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:58:33'!
ERROR!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:58:33'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:58:42'!
forNumber: aSmallInteger owner: aString 
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/14/2021 18:59:31'!
Object subclass: #Card
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:59:30' prior: 50865121!
forNumber: aCardNumber owner: anOwner 

	number := aCardNumber. 
	owner := anOwner.
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:59:36'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:59:36'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:59:36'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:59:36'!
ERROR!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:59:36'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:59:42'!
owner
	self shouldBeImplemented.
	^owner! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 18:59:45' prior: 50865156!
owner
	^owner! !

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:59:47'!
PASSED!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 18:59:50'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 18:59:50'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 18:59:50'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 18:59:50'!
PASSED!


Month month: DateAndTime today monthIndex year: DateAndTime today yearNumber +1!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:02:50'!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card expirationDate today |
	
	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	card := Card withNumber: 1234567890123456 owner: 'Alan Kay' expiresOn: expirationDate.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:02:59'!
ERROR!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:02:59'!
ERROR!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:03:08'!
withNumber: aSmallInteger owner: aString expiresOn: aMonth 
	self shouldBeImplemented.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:03:55' prior: 50865205!
withNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear
				
	self assertCardNumber: aCardNumber.
	self assertCardOwner: anOwner.

	^ self new forNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear.! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 19:03:59'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:03:59'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 19:03:59'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 19:03:59'!
PASSED!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:03:59'!
ERROR!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:03:59'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:04:05'!
forNumber: aSmallInteger owner: aString expiresOn: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/14/2021 19:04:42'!
Object subclass: #Card
	instanceVariableNames: 'number expirationDate owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:04:41' prior: 50865242!
forNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear 

	number := aCardNumber. 
	owner := anOwner.
	expiresOn := aMonthOfYear.
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 19:04:47'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:04:47'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 19:04:47'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 19:04:47'!
PASSED!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:04:47'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:05:15' prior: 50865184!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card expirationDate today |
	
	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	card := Card withNumber: 1234567890123456 owner: 'Alan Kay' expiresOn: expirationDate.
	
	self assert: card expiresOn equals: expirationDate.
		
	
	! !

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:05:18'!
ERROR!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:05:18'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:05:24'!
expiresOn
	self shouldBeImplemented.
	^expiresOn! !
!Card methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:05:26' prior: 50865301!
expiresOn
	^expiresOn! !

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:05:28'!
PASSED!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 19:05:31'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:05:31'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 19:05:31'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 19:05:31'!
PASSED!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:05:31'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:07:31' overrides: 16927572!
setUp
	
	| today expiresOn owner |
	today := DateAndTime today.
	expiresOn := Month month: today monthIndex year: today yearNumber +1.
	owner := 'Alan Kay'.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:08:25' prior: 50865331 overrides: 16927572!
setUp
	
	! !

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:08:42'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:08:44'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expiresOn owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:08:37' prior: 50865340 overrides: 16927572!
setUp
	
	| today |
	today := DateAndTime today.
	expiresOn := Month month: today monthIndex year: today yearNumber +1.
	owner := 'Alan Kay'.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:09:29' prior: 50864949!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: owner expiresOn: expiresOn  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123  owner: owner expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:09:31' prior: 50865366!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: owner expiresOn: expiresOn  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 owner: owner expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 19:09:34'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:09:48' prior: 50865386!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: owner expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 owner: owner expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:10:05' prior: 50865028!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expiresOn.
	
	self assert: card number equals: 1234567890123456.
	
	! !

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:10:08'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:10:24' prior: 50865059!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456 owner: '' expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 1234567890123456 owner: '    ' expiresOn: expiresOn ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:10:34' prior: 50865106!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expiresOn.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:10:55' prior: 50865280!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card |
	
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expiresOn.
	
	self assert: card expiresOn equals: expiresOn.
		
	
	! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 19:11:02'!
PASSED!

!testRun: #CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:11:02'!
PASSED!

!testRun: #CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 19:11:02'!
PASSED!

!testRun: #CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 19:11:02'!
PASSED!

!testRun: #CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:11:02'!
PASSED!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:11:22'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expiresOn owner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:21' prior: 50865358 overrides: 16927572!
setUp
	
	| today |
	today := DateAndTime today.
	expiresOn := Month month: today monthIndex year: today yearNumber +1.
	owner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:11:39'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expirationDate owner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865504 overrides: 16927572!
setUp
	
	| today |
	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	owner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865409!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: owner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 owner: owner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865469!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card |
	
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expirationDate.
	
	self assert: card expiresOn equals: expirationDate.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865441!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: 1234567890123456 owner: '' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 1234567890123456 owner: '    ' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865460!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expirationDate.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:39' prior: 50865428!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: 1234567890123456 owner: owner expiresOn: expirationDate.
	
	self assert: card number equals: 1234567890123456.
	
	! !

!classDefinition: #CardTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:11:45'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expirationDate validOwner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:45' prior: 50865521 overrides: 16927572!
setUp
	
	| today |
	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:45' prior: 50865588!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: 1234567890123456 owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: 1234567890123456.
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:45' prior: 50865579!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: 1234567890123456 owner: validOwner expiresOn: expirationDate.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:45' prior: 50865550!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card |
	
	card := Card withNumber: 1234567890123456 owner: validOwner expiresOn: expirationDate.
	
	self assert: card expiresOn equals: expirationDate.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:45' prior: 50865530!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ Card withNumber: 1234567890123456123543154154 owner: validOwner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: 123 owner: validOwner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:11:56' prior: 50865615!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:12:01' prior: 50865560!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: validNumber owner: '' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: validNumber owner: '    ' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:12:05' prior: 50865625!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card owner equals: 'Alan Kay'.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:12:10' prior: 50865635!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card |
	
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card expiresOn equals: expirationDate.
		
	
	! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:14:11' prior: 50865694!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	self assert: card owner equals: validOwner.
	self assert: card expiresOn equals: expirationDate.

	
	! !

!methodRemoval: CardTest #test05CanCreateACardWithExpirationDateAndValidNumberAndOwner stamp: 'jn 6/14/2021 19:14:18'!
test05CanCreateACardWithExpirationDateAndValidNumberAndOwner

	|card |
	
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card expiresOn equals: expirationDate.
		
	
	!

!methodRemoval: CardTest #test02CanCreateACardWithNumberDigitsEqualsTo16 stamp: 'jn 6/14/2021 19:14:26'!
test02CanCreateACardWithNumberDigitsEqualsTo16
	
	| card | 
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	
	!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:14:34'!
test02CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: validNumber owner: '' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: validNumber owner: '    ' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	! !

!methodRemoval: CardTest #test03CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 19:14:34'!
test03CanNotCreateACardWithEmptyOwner

	self 
		should: [ Card withNumber: validNumber owner: '' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	self 
		should: [ Card withNumber: validNumber owner: '    ' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:14:41'!
test03CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	self assert: card owner equals: validOwner.
	self assert: card expiresOn equals: expirationDate.

	
	! !

!methodRemoval: CardTest #test04CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 19:14:41'!
test04CanCreateACardWithValidNumberAndOwner

	|card |
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	self assert: card owner equals: validOwner.
	self assert: card expiresOn equals: expirationDate.

	
	!

!methodRemoval: Card #dateIsValid stamp: 'jn 6/14/2021 19:15:19'!
dateIsValid

	expirationDate isNil ifFalse: [ ^expirationDate > Date today ] ifTrue: [ ^true ].!

!methodRemoval: Card #forNumber:owner: stamp: 'jn 6/14/2021 19:15:28'!
forNumber: aCardNumber owner: anOwner 

	number := aCardNumber. 
	owner := anOwner.
	!

!methodRemoval: Card #invalidCardErrorMessage stamp: 'jn 6/14/2021 19:16:03'!
invalidCardErrorMessage

	^ 'Card is invalid'.!

!methodRemoval: Card #isValid stamp: 'jn 6/14/2021 19:16:10'!
isValid
	
	^ self numberIsValid and: self dateIsValid.!

!methodRemoval: Card #numberIsValid stamp: 'jn 6/14/2021 19:16:19'!
numberIsValid

	^ number printString size = 16.!

!methodRemoval: Card #forNumber: stamp: 'jn 6/14/2021 19:16:26'!
forNumber: aCardNumber

	number := aCardNumber. 
	!

!methodRemoval: Card #initializeForCardNumber:andExpirationDate: stamp: 'jn 6/14/2021 19:16:41'!
initializeForCardNumber: aCardNumber andExpirationDate: aDate 

	number := aCardNumber.
	expirationDate := aDate.!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:17:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/14/2021 19:17:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/14/2021 19:17:25'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/14/2021 19:17:25'!
ERROR!

!testRun: #CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/14/2021 19:17:25'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/14/2021 19:17:25'!
ERROR!

!testRun: #CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/14/2021 19:17:25'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:17:44'!
DELETEtest04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart chargingTo: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]! !

!methodRemoval: CashierTest #test04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/14/2021 19:17:44'!
test04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart chargingTo: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]!

!methodRemoval: CashierTest #test07CanCheckOutCartWithValidCardNumberAndDate stamp: 'jn 6/14/2021 19:18:06'!
test07CanCheckOutCartWithValidCardNumberAndDate

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456 expirationDate: Date tomorrow.
	
	self assert: 500 equals: (cashier checkOut: cart chargingTo: validCard).

!

!methodRemoval: CashierTest #test06CanNotCheckOutCartWithExpiratedCard stamp: 'jn 6/14/2021 19:18:23'!
test06CanNotCheckOutCartWithExpiratedCard

	| cart cashier catalog invalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	invalidCard := Card withNumber: 1234567890123456 expirationDate: Date yesterday.
	
	self 
		should: [ cashier checkOut: cart chargingTo: invalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ].
!

!methodRemoval: CashierTest #test05CanCheckOutCartWithValidCardNumberLength stamp: 'jn 6/14/2021 19:18:27'!
test05CanCheckOutCartWithValidCardNumberLength

	| cart cashier catalog validCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	validCard := Card withNumber: 1234567890123456.
	
	self assert: 500 equals: (cashier checkOut: cart chargingTo: validCard).
!

!methodRemoval: CashierTest #test03CheckOutCartWithMultipleItems stamp: 'jn 6/14/2021 19:18:30'!
test03CheckOutCartWithMultipleItems

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'anotherValidBook'->300.	
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 2 of: 'validBook'.
	cart add: 'anotherValidBook'.

	cashier := Cashier new.
	
	self assert: 1300 equals: (cashier checkOut: cart).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:19:09'!
DELETEtest02CheckOutCartWithOneItem

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).! !

!methodRemoval: CashierTest #test02CheckOutCartWithOneItem stamp: 'jn 6/14/2021 19:19:10'!
test02CheckOutCartWithOneItem

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:19:20'!
DELETEtest01CanNotCheckOutAnEmptyCart

	| cart cashier |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	
	self 
		should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier emptyCartErrorMessage. ]! !

!methodRemoval: CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:19:20'!
test01CanNotCheckOutAnEmptyCart

	| cart cashier |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	
	self 
		should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier emptyCartErrorMessage. ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:23:01'!
test01CanNotCheckOutAnEmptyCart

	| cart cashier card salesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	card := Card withNumber: 
	self 
		should: [ | today | cashier checkOut: cart chargingOn: card registerOn: salesBook onDate: today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:24:52' prior: 50866028!
test01CanNotCheckOutAnEmptyCart

	| cart cashier card salesBook expirationDate today validNumber validOwner |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	self 
		should: [ cashier checkOut: cart chargingOn: card registerOn: salesBook onDate: today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:25:07'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:25:07'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:25:15'!
checkOut: aCart chargingOn: aCard registerOn: anOrderedCollection onDate: aDateAndTime 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:28:02' prior: 50866080!
checkOut: aCart chargingOn: aCard registerOn: anOrderedCollection onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:28:51'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [ 	self error: self emptyCartErrorMessage. ].

	! !

!methodRemoval: Cashier #invalidCardErrorMessage stamp: 'jn 6/14/2021 19:29:02'!
invalidCardErrorMessage

	^ 'Card is invalid.'
	
	!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:29:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:32:04'!
test02CheckOutTotalAmount

	| cart cashier card salesBook expirationDate today validNumber validOwner |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	today := DateAndTime today.
	expirationDate := Month month: today monthIndex year: today yearNumber +1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	card := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	self 
		should: [ cashier checkOut: cart chargingOn: card registerOn: salesBook onDate: today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:34:56'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:35:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:35:25' overrides: 16927572!
setUp
	
! !

!methodRemoval: CashierTest #DELETEtest04CanNotCheckOutCartWithInvalidCardNumberLength stamp: 'jn 6/14/2021 19:35:37'!
DELETEtest04CanNotCheckOutCartWithInvalidCardNumberLength

	| cart cashier catalog anotherInvalidCard |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: 'validBook'.

	cashier := Cashier new.
	
	self 
		should: [ Card withNumber: 1234567890123456123543154154 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
	
	anotherInvalidCard := Card withNumber: 12.
	self 
		should: [ cashier checkOut: cart chargingTo: anotherInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier invalidCardErrorMessage. ]!

!methodRemoval: CashierTest #DELETEtest02CheckOutCartWithOneItem stamp: 'jn 6/14/2021 19:35:48'!
DELETEtest02CheckOutCartWithOneItem

	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 'validBook'.
	cashier := Cashier new.
	
	self assert: 500 equals: (cashier checkOut: cart).!

!methodRemoval: CashierTest #DELETEtest01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:35:54'!
DELETEtest01CanNotCheckOutAnEmptyCart

	| cart cashier |
	
	cart := Cart acceptingItemsOf: (Array with: 'validBook').
	cashier := Cashier new.
	
	self 
		should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = cashier emptyCartErrorMessage. ]!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:38:17'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:38:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart expiredCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:38:12' prior: 50866149 overrides: 16927572!
setUp
	
	| catalog expirationDate expiredDate nonExpiredDate today validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := DateAndTime today.
	nonExpiredDate := Month month: today monthIndex year: today yearNumber +1.
	expiredDate := Month month: today monthIndex year: today yearNumber -1.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:40:25' prior: 50866047!
test01CanNotCheckOutAnEmptyCart

	| cart cashier card salesBook today |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: cart chargingOn: card registerOn: salesBook onDate: today]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:41:01' prior: 50866247!
test01CanNotCheckOutAnEmptyCart

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ | cardd cartt todayy | cashier checkOut: cartt chargingOn: cardd registerOn: salesBook onDate: todayy]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:41:37' prior: 50866107!
test02CheckOutTotalAmount

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self 
		should: [ | cardd cartt todayy | cashier checkOut: cartt chargingOn: cardd registerOn: salesBook onDate: todayy]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:42:19' prior: 50866221 overrides: 16927572!
setUp
	
	| catalog expirationDate expiredDate nonExpiredDate validNumber validOwner todayy |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	todayy := DateAndTime today.
	nonExpiredDate := Month month: todayy monthIndex year: todayy yearNumber +1.
	expiredDate := Month month: todayy monthIndex year: todayy yearNumber -1.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:42:39' prior: 50866297 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner todayy |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	todayy := DateAndTime today.
	nonExpiredDate := Month month: todayy monthIndex year: todayy yearNumber +1.
	expiredDate := Month month: todayy monthIndex year: todayy yearNumber -1.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:42:56'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart expiredCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:42:55' prior: 50866324 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := DateAndTime today.
	nonExpiredDate := Month month: today monthIndex year: today yearNumber +1.
	expiredDate := Month month: today monthIndex year: today yearNumber -1.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:43:23' prior: 50866263!
test01CanNotCheckOutAnEmptyCart

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: emptyCart chargingOn: validCard registerOn: salesBook onDate: today ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:43:41' prior: 50866280!
test02CheckOutTotalAmount

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self 
		should: [ cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:43:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 19:43:44'!
FAILURE!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 19:43:44'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:43:56'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:46:45' prior: 50866087!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:47:42'!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	
	^total.
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/14/2021 19:49:22'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart expiredCard today totalNonEmptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:49:17' prior: 50866401!
test02CheckOutTotalAmount

	| cashier salesBook total |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	total := cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today.
	
	self assert: total equals: totalNonEmptyCart
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:49:56' prior: 50866359 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := DateAndTime today.
	nonExpiredDate := Month month: today monthIndex year: today yearNumber +1.
	expiredDate := Month month: today monthIndex year: today yearNumber -1.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 19:50:00'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 19:50:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:50:42'!
test03CanNotCheckOutWithExpiredCard

	| cashier salesBook total |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	total := cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today.
	
	self assert: total equals: totalNonEmptyCart
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:51:20' prior: 50866498!
test03CanNotCheckOutWithExpiredCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: nonEmptyCart chargingOn: expiredCard registerOn: salesBook onDate: today ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier expiredCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 19:51:31'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 19:51:31'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:52:13' prior: 50866429!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:53:35'!
assertCardIsNotExpired: aCard onDate: aDate
	
	aCard isExpiredOn: aDate ifTrue: [ self error: self expiredCardErrorMessage ].
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:53:47' prior: 50866543!
assertCardIsNotExpired: aCard onDate: aDate
	
	(aCard isExpiredOn: aDate) ifTrue: [ self error: self expiredCardErrorMessage ].
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 19:54:02'!
expiredCardErrorMessage
	
	^'Card is expired.'! !
!Card methodsFor: 'initialization' stamp: 'jn 6/14/2021 19:54:25'!
isExpiredOn: aDate

	! !

a := Month month: DateAndTime today monthIndex year: DateAndTime today yearNumber +1!

b := DateAndTime today!

a < b!

a monthIndex !

b monthIndex !

a yearNumber !

b yearNumber !

GregorianMonthOfYear!

GregorianMonthOfYear today!

GregorianMonthOfYear!

 GregorianMonthOfYear !

GregorianMonthOfYear  firstDate!

GregorianMonthOfYear  firstDay!

GregorianMonthOfYear initializeYear:2020 month:05!


GregorianMonthOfYear 
initializeYear:2020 month: #March!



GregorianMonthOfYear new
initializeYear: 2020 month: #March!


GregorianMonthOfYear new
initializeYear: 2020 month: 02  !



GregorianMonthOfYear new
initializeYear: 2020 month: 'caca'   !

GregorianMonthOfYear initializeYear: 2020 month: 'caca' !

GregorianMonthOfYear initializeYear: 2020 month: 'caca' !


GregorianMonthOfYear yearNumber: 2020 
monthNumber: 02!

a < b!


a := GregorianMonthOfYear yearNumber: 2020 
monthNumber: 02!


b := GregorianMonthOfYear yearNumber: 2020 
monthNumber: 01!

a < b!

a > b  !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:15:14' prior: 50865606 overrides: 16927572!
setUp
	
	| today |
	today := DateAndTime today.
	expirationDate := GregorianMonthOfYear yearNumber: today yearNumber +1 monthNumber: today monthIndex.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 20:15:20'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 20:15:20'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 20:15:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:15:35'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:15:35'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 20:15:35'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:15:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:16:38' prior: 50866465 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := DateAndTime today.
	nonExpiredDate := GregorianMonthOfYear yearNumber: today yearNumber +1 monthNumber: today monthIndex.
	expiredDate := GregorianMonthOfYear yearNumber: today yearNumber -1 monthNumber: today monthIndex.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:16:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:16:40'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 20:16:40'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:16:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:16:47'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:16:47'!
ERROR!

GregorianMonthOfYear current!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:18:28' prior: 50866596 overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: today yearNumber +1 monthNumber: today monthIndex.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !

c := GregorianMonthOfYear current  !

c month!

c monthNumber!

c yearNumber!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:19:53' prior: 50866677 overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: today year +1 monthNumber: today monthIndex.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:20:26' prior: 50866691 overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: (today year) +1 monthNumber: today monthIndex.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !

c yearNumber !

c year !

c year yearNumber !

c year  !

c year number!
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:23:59' prior: 50866702 overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthIndex.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:24:39' prior: 50866715 overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/14/2021 20:24:41'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/14/2021 20:24:41'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/14/2021 20:24:41'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:25:23' prior: 50866629 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := DateAndTime today.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:25:47' prior: 50866747 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:25:49'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:25:49'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 20:25:49'!
FAILURE!
!Card methodsFor: 'initialization' stamp: 'jn 6/14/2021 20:26:19' prior: 50866561!
isExpiredOn: aDate

	^ (self < aDate)! !
!Card methodsFor: 'initialization' stamp: 'jn 6/14/2021 20:26:27' prior: 50866815!
isExpiredOn: aDate

	^ (expirationDate < aDate)! !
!Card methodsFor: 'initialization' stamp: 'jn 6/14/2021 20:26:40' prior: 50866819!
isExpiredOn: aDate

	^ (expiresOn < aDate)! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:26:43'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:26:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 20:26:43'!
PASSED!

Object subclass: #Card
	instanceVariableNames: 'number owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'jn 6/14/2021 20:27:05'!
Object subclass: #Card
	instanceVariableNames: 'number owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:28:54'!
test04CheckOutRegisterSaleInSalesBook

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: nonEmptyCart chargingOn: expiredCard registerOn: salesBook onDate: today ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier expiredCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:29:32' prior: 50866849!
test04CheckOutRegisterSaleInSalesBook

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today.
	
	self assert: (salesBook at: 1) equals: totalNonEmptyCart.
		! !

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/14/2021 20:29:34'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/14/2021 20:29:34'!
ERROR!

!methodRemoval: Cashier #checkOut:chargingTo: stamp: 'jn 6/14/2021 20:30:28'!
checkOut: aCart chargingTo: aCard
	self assertValidCard: aCard.
	^ self checkOut: aCart. 
	
	!

!methodRemoval: Cashier #checkOut: stamp: 'jn 6/14/2021 20:30:39'!
checkOut: aCart 

	aCart isEmpty ifTrue: [ 	self error: self emptyCartErrorMessage. ].
	^ aCart totalAmount.
!

!methodRemoval: Cashier #assertValidCard: stamp: 'jn 6/14/2021 20:30:48'!
assertValidCard: aCard.
	
	(aCard isValid) ifFalse: [ self error: self invalidCardErrorMessage ].
	
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:31:12' prior: 50866437!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.

	^total.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/14/2021 20:31:13' prior: 50866901!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.
! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/14/2021 20:31:16'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/14/2021 20:31:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/14/2021 20:31:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/14/2021 20:31:16'!
PASSED!

----QUIT----(14 June 2021 20:51:30) CuisUniversity-4532.image priorSource: 17054696!

----STARTUP---- (16 June 2021 21:58:17) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 21:58:29'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 21:58:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/16/2021 21:58:29'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 21:58:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/16/2021 21:58:31'!
PASSED!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/16/2021 21:58:33'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/16/2021 21:58:33'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/16/2021 21:58:33'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'jn 6/16/2021 22:07:21'!
test09CartCanRetrieveItemsWithQuantity

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	cart add: 2 of: self itemSellByTheStore.

	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'support' stamp: 'jn 6/16/2021 22:08:07' prior: 50863097!
defaultCatalog
	
	| dictionary |
	dictionary := Dictionary new.
	dictionary add: (self itemSellByTheStore)->500.
	^ dictionary.! !
!CartTest methodsFor: 'tests' stamp: 'jn 6/16/2021 22:10:06' prior: 50866980!
test09CartCanRetrieveItemsWithQuantity

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.

	self assert: cart listItems equals: (OrderedCollection new add: (self itemSellByTheStore @ 2))! !

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:10:19'!
ERROR!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:10:19'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:10:27'!
listItems
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:10:35' prior: 50867013!
listItems
	
	! !


a := OrderedCollection new.
a add: 1.
a add:1.


	!

a!

a asSet !
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:15:17' prior: 50867017!
listItems
	
	| list |
	list := OrderedCollection new.
	items asSet do: [:item | list add: (item @ items ocurr)]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:15:50' prior: 50867023!
listItems
	
	| list |
	list := OrderedCollection new.
	items asSet do: [:item | list add: (item @ self occurrencesOf: item)].
	^list! !

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:15:55'!
ERROR!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:15:55'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:16:24' prior: 50867030!
listItems
	
	| list |
	list := OrderedCollection new.
	items asSet do: [:item | list add: (item @ (self occurrencesOf: item))].
	^list! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/16/2021 22:16:27'!
PASSED!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:16:27'!
ERROR!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:16:27'!
ERROR!

'hola' @ 3!

('hola' @ 3)!

3 @ 'hola'!
!Cart methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:17:54' prior: 50867044!
listItems
	
	| list |
	list := OrderedCollection new.
	items asSet do: [:item | list add: ((self occurrencesOf: item) @ item)].
	^list! !
!CartTest methodsFor: 'tests' stamp: 'jn 6/16/2021 22:18:06' prior: 50866997!
test09CartCanRetrieveItemsWithQuantity

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.

	self assert: cart listItems equals: (OrderedCollection new add: (2 @ self itemSellByTheStore))! !

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:18:08'!
FAILURE!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:18:08'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'jn 6/16/2021 22:19:11' prior: 50867091!
test09CartCanRetrieveItemsWithQuantity

	| cart listItems |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.

	listItems := OrderedCollection new.
	listItems add: (2 @ self itemSellByTheStore).
	self assert: cart listItems equals: listItems.! !

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:19:14'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'jn 6/16/2021 22:19:24' prior: 50867107!
test09CartCanRetrieveItemsWithQuantity

	| cart listItems |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.

	listItems := OrderedCollection new.
	listItems add: (2 @ self itemSellByTheStore).
	
	self assert: cart listItems equals: listItems.! !

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/16/2021 22:19:25'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:23:03' prior: 50866908!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.


"https://merchant.com/debit?creditCardNumber=5400000000000001&creditCardExpiration=072011&creditCar dOwner=PEPE%20SANCHEZ&transactionAmount=123.50"! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:24:01' prior: 50867136!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !

TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'jn 6/16/2021 22:24:43'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'jn 6/16/2021 22:28:34'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorTest methodsFor: 'no messages' stamp: 'jn 6/16/2021 22:28:25'!
test01CanNotDebitFromInvalidCard

	| aValidCard merchantProcessor validCardsList |
	aValidCard := Card new.
	validCardsList := #(aValidCard).
	merchantProcessor := MerchantProcessor forValidCards: validCardsList! !

!classDefinition: #MerchantProcessorInterface category: 'TusLibros' stamp: 'jn 6/16/2021 22:36:47'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:36:55' prior: 50867173!
test01CanNotDebitFromInvalidCard

	| merchantProcessor |
	
	merchantProcessor := MerchantProcessorInterface new.
	
	
	! !

!classRemoval: #MerchantProcessor stamp: 'jn 6/16/2021 22:37:09'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:39:20'!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today.
	
	self assert: (salesBook at: 1) equals: totalNonEmptyCart.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:39:55' prior: 50867204!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/16/2021 22:44:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart expiredCard today totalNonEmptyCart invalidCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:44:38' prior: 50866777 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner validNumberForInvalidCard |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.
	
	validNumberForInvalidCard := 1234999999999999.
	invalidCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:44:54' prior: 50867244 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner validNumberForInvalidCard |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.
	
	validNumberForInvalidCard := 1234999999999999.
	invalidCard := Card withNumber: validNumberForInvalidCard owner: validOwner expiresOn: expiredDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:46:56' prior: 50867217!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart chargingOn: invalidCard registerOn: salesBook onDate: today. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = MerchantProcessorInterface invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:46:59'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:46:59'!
ERROR!
!MerchantProcessorInterface class methodsFor: 'no messages' stamp: 'jn 6/16/2021 22:48:14'!
invalidCardErrorMessage

	'Invalid card'.! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:48:19'!
FAILURE!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:48:19'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:49:31'!
checkOut: aCart aCard: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:49:31' prior: 50866533!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart aCard: aCard registerOn: aSalesBook.
	! !

!methodRemoval: Cashier #checkOut:registerOn: stamp: 'jn 6/16/2021 22:49:31'!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:49:47'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:49:47' prior: 50867358!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart chargingOn: aCard registerOn: aSalesBook.
	! !

!methodRemoval: Cashier #checkOut:aCard:registerOn: stamp: 'jn 6/16/2021 22:49:47'!
checkOut: aCart aCard: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:50:23' prior: 50867374!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	MerchantProcessorInterface debitFrom: aCard.
	aSalesBook add: total.
	^total.! !
!MerchantProcessorInterface class methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:51:50'!
debitFrom: aCard
	
	self error: self invalidCardErrorMessage.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 22:51:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:51:54'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/16/2021 22:51:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:51:54'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:51:54'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 22:51:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:52:01'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:52:01'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:52:01'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:52:39'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:53:37'!
FAILURE!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:53:37'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 22:54:30' prior: 50867280 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner validNumberForInvalidCard |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.
	
	validNumberForInvalidCard := 1234999999999999.
	invalidCard := Card withNumber: validNumberForInvalidCard owner: validOwner expiresOn: nonExpiredDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 22:54:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:54:34'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/16/2021 22:54:34'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:54:34'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:54:34'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:54:39'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:54:41'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:54:41'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:54:41'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:55:02'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:56:07'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:56:07'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:56:07'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 22:57:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:09'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/16/2021 22:57:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:57:09'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:57:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/16/2021 22:57:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/16/2021 22:57:29'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 22:57:29'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:29'!
ERROR!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/16/2021 22:57:29'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:36'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:36'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:36'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/16/2021 22:57:48'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:13:50' prior: 50867399!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:14:02'!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:14:02' prior: 50867382!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !

!methodRemoval: Cashier #checkOut:chargingOn:registerOn: stamp: 'jn 6/16/2021 23:14:02'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.!

!classRemoval: #MerchantProcessorTest stamp: 'jn 6/16/2021 23:14:19'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:18:45' prior: 50867315!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart chargingOn: invalidCard registerOn: salesBook onDate: today. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:21:04' prior: 50867609!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart chargingOn: invalidCard registerOn: salesBook onDate: today. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier merchantProcessorInvalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:25:09' prior: 50867626!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart chargingOn: invalidCard registerOn: salesBook onDate: today. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier merchantProcessorInvalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !
!CardTest methodsFor: 'tests' stamp: 'jn 6/16/2021 23:27:07'!
test04CanNotCreateACardWithExceededLengthOwner

	self 
		should: [ Card withNumber: validNumber owner: 'este nombre es mas largo de 30 caracteres' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	! !

!testRun: #CardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/16/2021 23:27:11'!
FAILURE!

!testRun: #CardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/16/2021 23:27:11'!
FAILURE!
!Card class methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:28:17' prior: 50865096!
assertCardOwner: anOwner
	
	((anOwner withBlanksTrimmed isEmpty) or: (anOwner size > 30))
		ifTrue: [ self error: self invalidCardErrorMessage ].
! !

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/16/2021 23:28:24'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/16/2021 23:28:24'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/16/2021 23:28:24'!
PASSED!

!testRun: #CardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/16/2021 23:28:24'!
PASSED!
!CardTest methodsFor: 'tests' stamp: 'jn 6/16/2021 23:29:13' prior: 50867661!
test04CanNotCreateACardWithExceededLengthOwner

	self 
		should: [ 
			Card withNumber: validNumber 
				owner: 'este nombre es mas largo de 30 caracteres' 
				expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = Card invalidCardErrorMessage. ].
		
	! !

!classRemoval: #MerchantProcessorInterface stamp: 'jn 6/16/2021 23:31:43'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInvalidCard category: 'TusLibros' stamp: 'jn 6/16/2021 23:38:48'!
Object subclass: #MerchantProcessorInvalidCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/16/2021 23:38:42' prior: 50867644!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidCard new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: invalidCard 
						registerOn: salesBook 
						onDate: today
						to: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier merchantProcessorInvalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:46:55'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate paymentsAPI: paymentsAPI  

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:46:55' prior: 50866510!
test03CanNotCheckOutWithExpiredCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: nonEmptyCart chargingOn: expiredCard registerOn: salesBook onDate: today paymentsAPI: paymentsAPI ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier expiredCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:46:55' prior: 50866866!
test04CheckOutRegisterSaleInSalesBook

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today paymentsAPI: paymentsAPI.
	
	self assert: (salesBook at: 1) equals: totalNonEmptyCart.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:46:55' prior: 50866452!
test02CheckOutTotalAmount

	| cashier salesBook total |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	total := cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today paymentsAPI: paymentsAPI.
	
	self assert: total equals: totalNonEmptyCart
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:46:55' prior: 50866385!
test01CanNotCheckOutAnEmptyCart

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: emptyCart chargingOn: validCard registerOn: salesBook onDate: today paymentsAPI: paymentsAPI ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !

!methodRemoval: Cashier #checkOut:chargingOn:registerOn:onDate: stamp: 'jn 6/16/2021 23:46:55'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate 

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	!
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:47:54'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate withProcessor: paymentsAPI  

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:47:55' prior: 50867780!
test04CheckOutRegisterSaleInSalesBook

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsAPI.
	
	self assert: (salesBook at: 1) equals: totalNonEmptyCart.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:47:55' prior: 50867793!
test02CheckOutTotalAmount

	| cashier salesBook total |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	total := cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsAPI.
	
	self assert: total equals: totalNonEmptyCart
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:47:55' prior: 50867806!
test01CanNotCheckOutAnEmptyCart

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: emptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsAPI ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:47:55' prior: 50867762!
test03CanNotCheckOutWithExpiredCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: nonEmptyCart chargingOn: expiredCard registerOn: salesBook onDate: today withProcessor: paymentsAPI ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier expiredCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !

!methodRemoval: Cashier #checkOut:chargingOn:registerOn:onDate:paymentsAPI: stamp: 'jn 6/16/2021 23:47:55'!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate paymentsAPI: paymentsAPI  

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	!
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:48:16' prior: 50867832!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate withProcessor: processorAPI  

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook.
	! !
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:49:15'!
checkOut: aCart registerOn: aSalesBook withProcessor: processorAPI 
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:49:15' prior: 50867914!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate withProcessor: processorAPI  

	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
	
	^ self checkOut: aCart registerOn: aSalesBook withProcessor: processorAPI.
	! !

!methodRemoval: Cashier #checkOut:registerOn: stamp: 'jn 6/16/2021 23:49:15'!
checkOut: aCart registerOn: aSalesBook
	
	| total |
	total := aCart totalAmount.
	aSalesBook add: total.
	^total.!
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:51:34' prior: 50867932!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate withProcessor: processorAPI  

	| total |
	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
		
	total := aCart totalAmount.
	
	processorAPI debitFrom: aCard transactionAmout: total.
	
	aSalesBook add: total.
	^total.
	! !
!Cashier methodsFor: 'checkout' stamp: 'jn 6/16/2021 23:52:30' prior: 50867950!
checkOut: aCart chargingOn: aCard registerOn: aSalesBook onDate: aDate withProcessor: processorAPI  

	| total |
	self assertCartIsNotEmpty: aCart.
	self assertCardIsNotExpired: aCard onDate: aDate.
		
	total := aCart totalAmount.
	
	processorAPI debitFrom: aCard transactionAmout: total.
	
	aSalesBook add: total.
	^total.
	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 23:53:05'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 23:53:05'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/16/2021 23:53:25' prior: 50867730!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidCard new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: invalidCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier merchantProcessorInvalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 23:53:27'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/16/2021 23:53:27'!
ERROR!
!MerchantProcessorInvalidCard methodsFor: 'as yet unclassified' stamp: 'jn 6/16/2021 23:53:38'!
debitFrom: aCard transactionAmout: aSmallInteger 
	self shouldBeImplemented.! !
!MerchantProcessorInvalidCard methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 00:06:00' prior: 50868012!
debitFrom: aCard transactionAmout: aTotalAmount 
	
	self error: self invalidCardErrorMessage.
	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:06:06'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:06:06'!
ERROR!
!MerchantProcessorInvalidCard methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 00:06:59'!
invalidCardErrorMessage

	^'1|INVALID CARD'! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:07:03'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:07:03'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 00:07:23' prior: 50867983!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidCard new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: invalidCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:07:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 00:10:32'!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidCard new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'setUp' stamp: 'jn 6/17/2021 00:10:44' prior: 50867451 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 00:10:48'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 00:10:48'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 00:10:48'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 00:10:48'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:10:48'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:10:49'!
PASSED!

!classDefinition: #MerchantProcessorInvalidTransactionAmount category: 'TusLibros' stamp: 'jn 6/17/2021 00:48:10'!
Object subclass: #MerchantProcessorInvalidTransactionAmount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 00:48:02' prior: 50868068!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalid
	TransactionAmount new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 00:48:32' prior: 50868147!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidTransactionAmount new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidTransactionAmountErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:41'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:41'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:45'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:45'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:46'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:48:46'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:49:10'!
ERROR!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:49:10'!
ERROR!
!MerchantProcessorInvalidTransactionAmount methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 00:49:18'!
debitFrom: aCard transactionAmout: aSmallInteger 
	self shouldBeImplemented.! !

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:49:23'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:55:07'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:55:07'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 00:55:12' prior: 50868044!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorInvalidCard new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 00:55:14'!
PASSED!

!classRenamed: #MerchantProcessorInvalidTransactionAmount as: #MerchantProcessorBadFormat stamp: 'jn 6/17/2021 01:00:00'!
Smalltalk renameClassNamed: #MerchantProcessorInvalidTransactionAmount as: #MerchantProcessorBadFormat!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:00:00' prior: 50868169!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor invalidTransactionAmountErrorMessage. 
			self assert: salesBook isEmpty.
			]
	! !
!MerchantProcessorBadFormat methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:03:11'!
badFormatErrorMessage

	^'1|BAD FORMAT'.! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:03:28' prior: 50868268!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:03:30'!
FAILURE!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:03:30'!
FAILURE!
!MerchantProcessorBadFormat methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:03:50' prior: 50868220!
debitFrom: aCard transactionAmout: aSmallInteger 

	self error: self badFormatErrorMessage .! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:03:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:03:52'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:03:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:03:52'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:03:52'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:03:52'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'jn 6/17/2021 01:05:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart validCard nonEmptyCart expiredCard today totalNonEmptyCart invalidCard paymentsProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorOK category: 'TusLibros' stamp: 'jn 6/17/2021 01:06:02'!
Object subclass: #MerchantProcessorOK
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'jn 6/17/2021 01:05:57' prior: 50868090 overrides: 16927572!
setUp
	
	| catalog expiredDate nonExpiredDate validNumber validOwner |
	catalog := Dictionary new.
	catalog add: 'validBook'->500.
	catalog add: 'Cormen'->20000.

	nonEmptyCart := Cart acceptingItemsOf: catalog.
	nonEmptyCart add: 'validBook'.
	nonEmptyCart add: 'Cormen'.
	totalNonEmptyCart := 20500.
	
	emptyCart := Cart acceptingItemsOf: catalog.
	
	today := GregorianMonthOfYear current.
	nonExpiredDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	expiredDate := GregorianMonthOfYear yearNumber: (today year number) -1 monthNumber: today monthNumber.

	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	validCard := Card withNumber: validNumber owner: validOwner expiresOn: nonExpiredDate.
	expiredCard := Card withNumber: validNumber owner: validOwner expiresOn: expiredDate.
	
	paymentsProcessor := MerchantProcessorOK new.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:06:08'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:06:08'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:06:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:06:09'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:06:09'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:06:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:06:12'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:06:12'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:07:32'!
test07MerchantProcessorRespondsOK

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: paymentsProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = paymentsProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:07:35'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:07:35'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:07:35'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:07:35'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:07:35'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:07:35'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRespondsOK stamp: 'jn 6/17/2021 01:07:35'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:08:03' prior: 50867856!
test02CheckOutTotalAmount

	| cashier salesBook total |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	total := cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsProcessor.
	
	self assert: total equals: totalNonEmptyCart
		! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:08:14' prior: 50867869!
test01CanNotCheckOutAnEmptyCart

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: emptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsProcessor ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier emptyCartErrorMessage. 
			self assert: salesBook isEmpty.
			]! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:08:18' prior: 50867886!
test03CanNotCheckOutWithExpiredCard

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	self  should: [ cashier checkOut: nonEmptyCart chargingOn: expiredCard registerOn: salesBook onDate: today withProcessor: paymentsProcessor ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = cashier expiredCardErrorMessage. 
			self assert: salesBook isEmpty.
			]
		! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:08:21' prior: 50867843!
test04CheckOutRegisterSaleInSalesBook

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.

	cashier checkOut: nonEmptyCart chargingOn: validCard registerOn: salesBook onDate: today withProcessor: paymentsProcessor.
	
	self assert: (salesBook at: 1) equals: totalNonEmptyCart.
		! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:08:29'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:08:29'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:08:29'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:08:29'!
ERROR!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:08:29'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:08:29'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRespondsOK stamp: 'jn 6/17/2021 01:08:29'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:08:34'!
ERROR!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:08:34'!
ERROR!
!MerchantProcessorOK methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:08:41'!
debitFrom: aCard transactionAmout: aSmallInteger 
	self shouldBeImplemented.! !
!MerchantProcessorOK methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:08:46' prior: 50868550!
debitFrom: aCard transactionAmout: aSmallInteger 

! !
!MerchantProcessorOK methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:08:51' prior: 50868556!
debitFrom: aCard transactionAmout: aTotalAmount 

! !

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:08:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:08:54'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRespondsOK stamp: 'jn 6/17/2021 01:08:54'!
FAILURE!

!testRun: #CashierTest #test07MerchantProcessorRespondsOK stamp: 'jn 6/17/2021 01:08:54'!
FAILURE!

!methodRemoval: CashierTest #test07MerchantProcessorRespondsOK stamp: 'jn 6/17/2021 01:10:12'!
test07MerchantProcessorRespondsOK

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: paymentsProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = paymentsProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:10:17'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:10:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:10:17'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:10:17'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:17'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:17'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:10:32'!
test06MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:10:43'!
test07MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !

!methodRemoval: CashierTest #test06MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 01:10:43'!
test06MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 01:10:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:10:53'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 01:10:53'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 01:11:09'!
test06MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !

!methodRemoval: CashierTest #test07MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 01:11:09'!
test07MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	!

!methodRemoval: CashierTest #test06MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:11:14'!
test06MerchantProcessorCanNotDebitFromInvalidCard

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadFormat new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 01:11:35'!
PASSED!

Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInterface category: 'TusLibros' stamp: 'jn 6/17/2021 01:13:16'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorInterface subclass: #MerchantProcessorOK
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorOK category: 'TusLibros' stamp: 'jn 6/17/2021 01:13:22'!
MerchantProcessorInterface subclass: #MerchantProcessorOK
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorInterface subclass: #MerchantProcessorInvalidCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInvalidCard category: 'TusLibros' stamp: 'jn 6/17/2021 01:13:26'!
MerchantProcessorInterface subclass: #MerchantProcessorInvalidCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorInterface subclass: #MerchantProcessorBadFormat
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorBadFormat category: 'TusLibros' stamp: 'jn 6/17/2021 01:13:29'!
MerchantProcessorInterface subclass: #MerchantProcessorBadFormat
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorBadFormat methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:13:39' prior: 50868323!
debitFrom: aCard transactionAmout: aTotalAmount 

	self error: self badFormatErrorMessage .! !
!MerchantProcessorInterface methodsFor: 'no messages' stamp: 'jn 6/17/2021 01:13:53'!
debitFrom: aCard transactionAmout: aTotalAmount 
	
	self subclassResponsibility .! !

!classRenamed: #MerchantProcessorInterface as: #MerchantProcessorInterfaceSimulator stamp: 'jn 6/17/2021 01:14:20'!
Smalltalk renameClassNamed: #MerchantProcessorInterface as: #MerchantProcessorInterfaceSimulator!

!classRenamed: #MerchantProcessorBadFormat as: #MerchantProcessorBadRequest stamp: 'jn 6/17/2021 01:25:18'!
Smalltalk renameClassNamed: #MerchantProcessorBadFormat as: #MerchantProcessorBadRequest!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:25:19' prior: 50868738!
test06MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadRequest new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badFormatErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !
!MerchantProcessorBadRequest methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:26:42' prior: 50868290!
badFormatErrorMessage

	^'Error in parameters format'.! !
!MerchantProcessorBadRequest methodsFor: 'errors' stamp: 'jn 6/17/2021 01:27:11'!
badRequestErrorMessage

	^'Error in parameters format'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:27:11' prior: 50868898!
test06MerchantProcessorRespondsBadFormat

	| cashier salesBook merchantProcessor |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorBadRequest new.
	
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = merchantProcessor badRequestErrorMessage . 
			self assert: salesBook isEmpty.
			]
	! !
!MerchantProcessorBadRequest methodsFor: 'as yet unclassified' stamp: 'jn 6/17/2021 01:27:11' prior: 50868873 overrides: 50868879!
debitFrom: aCard transactionAmout: aTotalAmount 

	self error: self badRequestErrorMessage .! !

!methodRemoval: MerchantProcessorBadRequest #badFormatErrorMessage stamp: 'jn 6/17/2021 01:27:11'!
badFormatErrorMessage

	^'Error in parameters format'.!
!MerchantProcessorBadRequest methodsFor: 'errors' stamp: 'jn 6/17/2021 01:27:52' prior: 50868925!
badRequestErrorMessage

	^'Error in parameters format'.! !

----QUIT----(17 June 2021 01:32:19) CuisUniversity-4532.image priorSource: 17128829!

----STARTUP---- (17 June 2021 16:31:00) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 16:31:24'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 16:31:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 16:36:45'!
checkOutWith: merchantProcessor raises: errorMessage

	| cashier salesBook |
	
	cashier := Cashier new.
	salesBook := OrderedCollection new.
		
	self  should: [ 	cashier checkOut: nonEmptyCart 
						chargingOn: validCard 
						registerOn: salesBook 
						onDate: today
						withProcessor: merchantProcessor. ]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = errorMessage . 
			self assert: salesBook isEmpty.
			]
	! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 16:38:17' prior: 50868236!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| merchantProcessor |
	merchantProcessor := MerchantProcessorInvalidCard new.

	self checkOutWith: merchantProcessor raises: merchantProcessor invalidCardErrorMessage.
	

	! !
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 16:38:21' prior: 50869053!
test05MerchantProcessorCanNotDebitFromInvalidCard

	| merchantProcessor |
	
	merchantProcessor := MerchantProcessorInvalidCard new.

	self checkOutWith: merchantProcessor raises: merchantProcessor invalidCardErrorMessage.
	

	! !

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 16:38:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jn 6/17/2021 16:38:59' prior: 50868930!
test06MerchantProcessorRespondsBadFormat

	| merchantProcessor |
	
	merchantProcessor := MerchantProcessorBadRequest new.

	self checkOutWith: merchantProcessor raises: merchantProcessor badRequestErrorMessage.
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 16:39:02'!
PASSED!

!testRun: #CardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test09CartCanRetrieveItemsWithQuantity stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test02CheckOutTotalAmount stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckOutWithExpiredCard stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test04CheckOutRegisterSaleInSalesBook stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test05MerchantProcessorCanNotDebitFromInvalidCard stamp: 'jn 6/17/2021 16:40:04'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRespondsBadFormat stamp: 'jn 6/17/2021 16:40:04'!
PASSED!