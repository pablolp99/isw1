

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (7 July 2021 13:52:35) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


Feature require:  'Morphic-Misc1'.!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Widgets-Extras.pck.st----!

CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

!classDefinition: #ColorExtrasPackage category: 'Color-Extras' stamp: 'Install-Color-Extras 7/7/2021 13:53:51'!
CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

ColorExtrasPackage class
	instanceVariableNames: ''!

!classDefinition: 'ColorExtrasPackage class' category: 'Color-Extras' stamp: 'Install-Color-Extras 7/7/2021 13:53:51'!
ColorExtrasPackage class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Color-Extras.pck.st----!

CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!

!classDefinition: #MorphicMisc1Package category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/7/2021 13:53:52'!
CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!
!MorphicMisc1Package commentStamp: '<historical>' prior: 0!
My purpose in life is to check that any base image methods overridden have not been updated.
See #MorphMisc1Package class>>prePackageInstall!

MorphicMisc1Package class
	instanceVariableNames: ''!

!classDefinition: 'MorphicMisc1Package class' category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/7/2021 13:53:52'!
MorphicMisc1Package class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Misc1/Morphic-Misc1.pck.st----!

Feature require:  'Morphic'. !

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Compression.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Sound.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/WebClient.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/TusLibros-80.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/WordsClientDemo.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/StringsServicesServer.st----!

client := WordsClientWindow open!

Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'WordsClientDemo'!

!classDefinition: #TusLibrosClientWindow category: 'WordsClientDemo' stamp: 'JN 7/7/2021 13:59:27'!
Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'WordsClientDemo'!

Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 13:59:48'!
Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

WordsClientWindow open!
!TusLibrosClientWindow class methodsFor: 'no messages' stamp: 'JN 7/7/2021 14:01:01'!
open
	
	^self new initialize.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:04:14' overrides: 50865456!
initialize

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Tus Libros'.
	"self model: (WordsClientWindowModel new)."
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:04:27' overrides: 50865447!
defaultExtent

	^ 1035@485
	! !

TusLibrosClientWindow open!

WordsClientWindow open!
!TusLibrosClientWindow class methodsFor: 'instance creation' stamp: 'JN 7/7/2021 14:07:02' prior: 50907250!
open
	
	^self new initialize.! !

Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 14:08:29'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:08:57' prior: 50907255 overrides: 50865456!
initialize

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Tus Libros'.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !

TusLibrosClientWindow open!

WordsClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:10:32'!
initializeWith: title

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: title.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !
!TusLibrosClientWindow class methodsFor: 'instance creation' stamp: 'JN 7/7/2021 14:10:42' prior: 50907276!
open
	
	^self new initializeWith: 'Tus Libros'.! !

TusLibrosClientWindow open!

!methodRemoval: TusLibrosClientWindow #initialize stamp: 'JN 7/7/2021 14:11:22'!
initialize

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Tus Libros'.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."!

self titleMorph!

WordsClientWindow open
!

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:13:57' overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow;
	addMorph: self build2ndRow.
	! !

Panel subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosRestInterface category: 'TusLibros-Client' stamp: 'JN 7/7/2021 14:16:53'!
Panel subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:17:31'!
url
	
	^'http://localhost:', self port asString! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:17:39'!
port
	
	^port ifNil: [port:=8080].! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 14:17:51'!
correctlyEncodeSpacesForUrlRequestParameter: aParameter
	
	^ aParameter copyReplaceAll: ' ' with: '%20'. ! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 14:18:05'!
sendRequest: sentence

	| fieldDict resp urlEncodedSentence |

	urlEncodedSentence := self correctlyEncodeSpacesForUrlRequestParameter: sentence.	
	fieldDict := Dictionary newFromPairs: {'sentence'. urlEncodedSentence.}.		
	
	resp:= WebClient htmlSubmit: (self url,'/words') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

!classRenamed: #TusLibrosRestInterface as: #TusLibrosClientRestInterface stamp: 'JN 7/7/2021 14:22:45'!
Smalltalk renameClassNamed: #TusLibrosRestInterface as: #TusLibrosClientRestInterface!

Panel subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosServerRestInterface category: 'TusLibros-Server' stamp: 'JN 7/7/2021 14:22:57'!
Panel subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

Panel subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'webServer port tusLibrosFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosServerRestInterface category: 'TusLibros-Server' stamp: 'JN 7/7/2021 14:24:20'!
Panel subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'webServer port tusLibrosFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosServerRestInterface class methodsFor: 'no messages' stamp: 'JN 7/7/2021 14:24:39'!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber.! !

!classDefinition: #TusLibrosServerRestInterface category: 'TusLibros-Server' stamp: 'JN 7/7/2021 14:28:31'!
Panel subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'webServer port tusLibrosFacade tusLibros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:29:13'!
initializeWith: aPortNumber
	
	tusLibros := TusLibrosSystemFacade new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/catalog' action:[:request |
		[ request send200Response: (request) ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:29:35'!
destroy
	
	webServer ifNotNil:[webServer destroy].
	! !
!TusLibrosServerRestInterface methodsFor: 'enabling services' stamp: 'JN 7/7/2021 14:30:06'!
startListening
	
	webServer startListener.

	^'Listening on port: ', self port asString.
	! !
!TusLibrosServerRestInterface methodsFor: 'enabling services' stamp: 'JN 7/7/2021 14:30:13'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', self port asString! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:30:35'!
port
	
	^port ifNil: [port:=8080].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:33:22' prior: 50907446!
initializeWith: aPortNumber
	
	tusLibros := TusLibrosSystemFacade new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | cartId |
		[ 
			cartId := tusLibros createCartFor: 'hola' authenticatedWith: '1234'.
			request send200Response: (cartId) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server := TusLibrosServerRestInterface listeningOn: 8080!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/7/2021 14:36:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/7/2021 14:36:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/7/2021 14:36:04'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:36:40' prior: 50907482!
initializeWith: aPortNumber
	
	tusLibros := TusLibrosSystemFacade new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | cartId |
		[ 
			cartId := tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.
			request send200Response: (cartId) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:38:32' prior: 50907616!
initializeWith: aPortNumber
	
	tusLibros := TusLibrosSystemFacade new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:42:20' prior: 50907634!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:42:51'!
tusLibrosFacade

	| clock testObjectsFactory |
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	tusLibros := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock.! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 14:44:00'!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 14:44:12'!
validUserPassword

	^'validUserPassword'! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 14:44:19'!
validUser

	^'validUser'! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 14:44:43'!
createSalesBook

	^OrderedCollection new! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 14:45:00'!
merchantProcessor

	^self! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 14:53:36' prior: 50907651!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	"tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'"
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: ('hola') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 15:19:12' prior: 50907706!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	"tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'"
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createcart' action:[:request | 
		[ 
			request send200Response: ('hola') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 15:22:30' prior: 50907380!
sendRequest: sentence

	| fieldDict resp urlEncodedSentence |

	urlEncodedSentence := self correctlyEncodeSpacesForUrlRequestParameter: sentence.	
	"fieldDict := Dictionary newFromPairs: {'sentence'. urlEncodedSentence.}.		"
	
	"resp:= WebClient htmlSubmit: (self url,'/createCard') fields: fieldDict."
	resp := WebClient httpGet: (self url,'/createCard').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 15:23:52' prior: 50907740!
sendRequest: sentence

	| fieldDict resp urlEncodedSentence |

	urlEncodedSentence := self correctlyEncodeSpacesForUrlRequestParameter: sentence.	
	"fieldDict := Dictionary newFromPairs: {'sentence'. urlEncodedSentence.}.		"
	
	"resp:= WebClient htmlSubmit: (self url,'/createCard') fields: fieldDict."
	resp := WebClient httpGet: (self url,'/createCart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 15:24:18' prior: 50907723!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	"tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'"
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: ('hola') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 15:25:45' prior: 50907761!
sendRequest: sentence

	| resp urlEncodedSentence |

	urlEncodedSentence := self correctlyEncodeSpacesForUrlRequestParameter: sentence.	
	"fieldDict := Dictionary newFromPairs: {'sentence'. urlEncodedSentence.}.		"
	
	"resp:= WebClient htmlSubmit: (self url,'/createCard') fields: fieldDict."
	resp := WebClient httpGet: (self url,'/create-cart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 15:25:58' prior: 50907801!
sendRequest: sentence

	| resp |

	resp := WebClient httpGet: (self url,'/create-cart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 15:26:13' prior: 50907782!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	"tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'"
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/create-cart' action:[:request | 
		[ 
			request send200Response: ('hola') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 15:26:46' prior: 50907820!
sendRequest: sentence

	| resp |

	resp := WebClient httpGet: (self url,'/createCart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 15:26:52' prior: 50907831!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	"tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword'"
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: ('hola') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

server := TusLibrosServerRestInterface listeningOn: 8080 *('Untitled') server destroy !

TusLibrosServerRestInterface allInstances !

TusLibrosServerRestInterface allInstances do: [:a | a destroy ]!

TusLibrosServerRestInterface allInstances do: [:a | a destroy ]!

TusLibrosClientRestInterface new sendRequest: 'sfdf'
!

server := TusLibrosServerRestInterface listeningOn: 8080!

TusLibrosClientRestInterface new sendRequest: 'sfdf'
!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 15:30:37' prior: 50907861!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword') 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy!

server := TusLibrosServerRestInterface listeningOn: 8080 
!

TusLibrosClientRestInterface new sendRequest: 'sfdf'
!
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/7/2021 15:31:47' prior: 50907667!
tusLibrosFacade

	| clock testObjectsFactory |
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	^ TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock.! !

server destroy 
!

server := TusLibrosServerRestInterface listeningOn: 8080 
!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 16:46:11' prior: 50907893!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword')) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy 
!

server := TusLibrosServerRestInterface listeningOn: 8080 
!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 16:47:30' prior: 50907933!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: 'validUserr' authenticatedWith: 'validUserPassword')) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 16:50:45' prior: 50907850!
sendRequest: sentence

	| resp |

	resp := WebClient httpDo: (self url,'/createCart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 16:52:02' prior: 50907975!
sendRequest: sentence

	| resp |
 
	resp := WebClient httpGet: (self url,'/createCart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

self port!

(self url,'/createCart')!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:42:57' prior: 50907988!
sendRequest: sentence

	| resp |
 
	"resp := WebClient httpGet: (self url,'/createCart')."
	resp := WebClient httpGet: 'http://google.com'.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:45:05' prior: 50908002!
sendRequest: sentence

	| resp |
 
	resp := WebClient httpGet: (self url,'/createCart').
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:46:43' prior: 50908019!
sendRequest: sentence

	| resp fieldDict |
 	
	fieldDict := Dictionary new.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

TusLibrosServerRestInterface allInstances.!

TusLibrosServerRestInterface allInstances do: [:a | a destroy] !

TusLibrosServerRestInterface allInstances.!

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

StringsServicesRestInterface!

(StringsServicesRestInterface allInstances) do: [:a | a destroy] !

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

(TusLibrosServerRestInterface allInstances) do: [:a | a destroy] !

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

WebServer allInstances.!

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

(WebServer allInstances) do: [:a | a destroy] !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

server := TusLibrosServerRestInterface listeningOn: 8080 !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:55:36' prior: 50908034!
sendRequest: sentence

	| resp fieldDict |
 	
	fieldDict := Dictionary new.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: nil.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:55:42' prior: 50908093!
sendRequest: sentence

	| resp |
 	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: nil.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080  !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:56:06' prior: 50908106!
sendRequest: sentence

	| resp |
 	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: ''.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 17:56:53' prior: 50908122!
sendRequest: sentence

	| resp fieldDict |
	fieldDict := Dictionary newFromPairs: {'sentence'. 'hola'.}.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:00:20' prior: 50907953!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: 'validUser' authenticatedWith: 'validUserPassword')) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 18:03:01' prior: 50908138!
sendRequest: sentence

	| resp fieldDict |
	fieldDict := Dictionary newFromPairs: {'sentence'. 'hola'.}.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf'
!

TusLibrosClientRestInterface new sendRequest: 'sfdf'!

Dictionary newFromPairs: {'user'. 'validUser'.}.!

Dictionary newFromPairs: {'user'. 'validUser'.},{'password'.'validUserPassword'}.!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 18:05:59' prior: 50908180!
sendRequest: sentence

	| resp fieldDict |
	fieldDict := Dictionary newFromPairs: {'user'. 'validUser'.},{'password'.'validUserPassword'}.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:07:14' prior: 50908158!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientRestInterface new sendRequest: 'sfdf'!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 18:07:53' prior: 50908201!
sendRequest: sentence

	| resp fieldDict |
	fieldDict := Dictionary newFromPairs: {'user'. 'validUser'.},{'password'.'validUserPascsword'}.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface new sendRequest: 'sfdf' !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 18:10:22'!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.'validUser'.},
		{'password'.'validUserPascsword'}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 18:11:08' prior: 50908255!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !

TusLibrosClientRestInterface createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!

TusLibrosClientRestInterface createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!


TusLibrosClientRestInterface createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!


TusLibrosClientRestInterface new createCartFor: 'validUsser' authenticatedWith: 'validUserPassword'.!


TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPasswordd'!


TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:16:32'!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendWordsFromSentenceRequest  label: 'Create Cart'.
	
		
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Enter sentence:');
 	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:16:43' prior: 50907344 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow.
	! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:17:19' prior: 50908307!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
		
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Enter sentence:');
 	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !

TusLibrosClientWindow open!

!classDefinition: #TusLibrosClientWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 18:55:23'!
Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: 'userTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:55:34' prior: 50908333!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Enter sentence:');
 	addMorph: userTextBoxMorph;
	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 18:56:11' prior: 50908359!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Enter sentence:');
 	addMorph: userTextBoxMorph;
	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 18:56:38'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: 'user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindowModel methodsFor: 'no messages' stamp: 'JN 7/7/2021 18:56:36'!
userText

	^user! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 18:57:01'!
userText: aUser

	user := aUser.
	^true.! !

TusLibrosClientWindow open!

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 18:58:54'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: 'user cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 18:58:55'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: 'user cartId restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 18:58:57'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: 'user cartId restInterface password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 18:58:52'!
sendCreateCartRequest
		
	cartId := restInterface createCartFor: user authenticatedWith: password
	
	"self triggerEvent: #newWordsArrived with: self."
	! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 18:59:44' overrides: 50865456!
initialize

	cartId := nil.
	restInterface := TusLibrosClientRestInterface new.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:22:27' prior: 50907309!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !

TusLibrosClientWindow open!
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:25:14' prior: 50908467 overrides: 50865456!
initialize

	cartId := nil.
	restInterface := TusLibrosClientRestInterface new.
	user := ''.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:27:38' prior: 50908387!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	"userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] ."
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph;
	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !

TusLibrosClientWindow open !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:28:39' prior: 50908497!
build1stRow
	| createCartButtonMorph firstRowLayoutMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph;
	addMorph: createCartButtonMorph.
	
	^firstRowLayoutMorph.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:35:09' prior: 50908525!
build1stRow
	| firstRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^firstRowLayoutMorph.! !

!classDefinition: #TusLibrosClientWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 19:36:58'!
Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: 'userTextBoxMorph passwordTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:36:56'!
build2stRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:37:17'!
passwordText

	^password! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:37:31'!
passwordText: aPassword

	password := aPassword.
	^true.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:38:42'!
build3thRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:39:02'!
build2ndRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.! !

!methodRemoval: TusLibrosClientWindow #build2stRow stamp: 'JN 7/7/2021 19:39:02'!
build2stRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:39:20' prior: 50908325 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow;
	addMorph: self build2ndRow;
	addMorph: self build3thRow.
! !

TusLibrosClientWindow open !

!methodRemoval: TusLibrosClientWindow #build3thRow stamp: 'JN 7/7/2021 19:41:06'!
build3thRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:41:35' prior: 50908628!
build2ndRow
	| secondRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password');
 	addMorph: passwordTextBoxMorph;
	addMorph: createCartButtonMorph.
		
	^secondRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:41:45' prior: 50908671 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow;
	addMorph: self build2ndRow.
! !

TusLibrosClientWindow open !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:43:23' prior: 50908490 overrides: 50865456!
initialize

	cartId := nil.
	restInterface := TusLibrosClientRestInterface new.
	user := ''.
	password := ''.! !

TusLibrosClientWindow open !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:44:25' prior: 50908695!
build2ndRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:45:08'!
build3thRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:46:33' prior: 50908553!
build1stRow
	| firstRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 0;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^firstRowLayoutMorph.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:46:45' prior: 50908779!
build1stRow
	| firstRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^firstRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:46:54' prior: 50908742!
build2ndRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.! !

TusLibrosClientWindow open!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:53:43' prior: 50908724 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow;
	addMorph: self build2ndRow;
	addMorph: self build3thRow .
! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:53:44' prior: 50908845 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self build1stRow;
	addMorph: self build2ndRow;
	addMorph: self build3thRow.
! !

TusLibrosClientWindow open !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:54:35'!
buildUserRow
	| firstRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^firstRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:54:35' prior: 50908855 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUserRow;
	addMorph: self build2ndRow;
	addMorph: self build3thRow.
! !

!methodRemoval: TusLibrosClientWindow #build1stRow stamp: 'JN 7/7/2021 19:54:35'!
build1stRow
	| firstRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^firstRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:55:38'!
buildPasswordRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:55:38' prior: 50908887 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUserRow;
	addMorph: self buildPasswordRow;
	addMorph: self build3thRow.
! !

!methodRemoval: TusLibrosClientWindow #build2ndRow stamp: 'JN 7/7/2021 19:55:38'!
build2ndRow
	| secondRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^secondRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:56:00'!
buildCreateCartRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 19:56:00' prior: 50908938 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUserRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.
! !

!methodRemoval: TusLibrosClientWindow #build3thRow stamp: 'JN 7/7/2021 19:56:00'!
build3thRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:58:32'!
buildErrorRow
	| thirtRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	thirtRowLayoutMorph := LayoutMorph newRow.
	thirtRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^thirtRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:58:43' prior: 50908865!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:58:56' prior: 50908915!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:59:16' prior: 50909007!
buildErrorRow
	| errorRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^errorRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:59:38' prior: 50908968!
buildCreateCartRow
	| createCartRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create Cart'.
	
	createCartRowLayoutMorph := LayoutMorph newRow.
	createCartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^createCartRowLayoutMorph.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 19:59:53' prior: 50908984 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUserRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildErrorRow;
	addMorph: self buildCreateCartRow.
! !

TusLibrosClientWindow open!
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:19:52' prior: 50908458!
sendCreateCartRequest

	[ cartId := restInterface createCartFor: user authenticatedWith: password ]
		on: Error 
		do: [ :anError |
			self triggerEvent: #authenticationFailed with: (anError messageText).
		].
	
	
	! !

!classDefinition: #TusLibrosClientWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 20:26:10'!
Panel subclass: #TusLibrosClientWindowModel
	instanceVariableNames: 'user cartId restInterface password errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:26:08' prior: 50909109!
sendCreateCartRequest

	[ cartId := restInterface createCartFor: user authenticatedWith: password ]
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:30:00' prior: 50908734 overrides: 50865456!
initialize

	cartId := nil.
	restInterface := TusLibrosClientRestInterface new.
	user := ''.
	password := ''.
	errorMessage := ''.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 20:30:38' prior: 50908474!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #authenticationFailed send: #showAuthenticationError to: self.	
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 20:33:34' prior: 50909065!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'');
 	addMorph: passwordTextBoxMorph.
		
	^errorRowLayoutMorph.! !

!methodRemoval: TusLibrosClientWindow #buildErrorRow stamp: 'JN 7/7/2021 20:37:15'!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'');
 	addMorph: passwordTextBoxMorph.
		
	^errorRowLayoutMorph.!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 20:37:21' prior: 50909097 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUserRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.
! !

!classDefinition: #TusLibrosAuthenticationErrorWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 20:39:07'!
Object subclass: #TusLibrosAuthenticationErrorWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 20:39:00'!
showAuthenticationError 

	TusLibrosAuthenticationErrorWindow openWith: self model errorMessage! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:40:27' prior: 50909129!
sendCreateCartRequest

	[ cartId := restInterface createCartFor: user authenticatedWith: password ]
		on: Error 
		do: [ :anError |
			self triggerEvent: #authenticationFailed with: anError messageText.
		].
	
	
	! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:41:34' prior: 50909212!
sendCreateCartRequest

	[ cartId := restInterface createCartFor: user authenticatedWith: password ]
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:41:59'!
errorMessage

	^errorMessage! !
!TusLibrosAuthenticationErrorWindow class methodsFor: 'no messages' stamp: 'JN 7/7/2021 20:42:43'!
openWith: errorMessage
	
	^self new initializeWith: errorMessage.! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 20:43:14' prior: 50909149!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #authenticationFailed send: #showAuthenticationError to: self.	
! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'no messages' stamp: 'JN 7/7/2021 20:44:53'!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.! !

Panel subclass: #TusLibrosAuthenticationErrorWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosAuthenticationErrorWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 20:45:00'!
Panel subclass: #TusLibrosAuthenticationErrorWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:45:48' overrides: 50865447!
defaultExtent

	^ 400@200
	! !

TusLibrosClientWindow open!
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:47:38' overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildErrorRow;
	addMorph: self buildBackButtonRow.
! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:49:49'!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Error');
		
	^errorRowLayoutMorph.! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:49:52' prior: 50909298!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Error').
		
	^errorRowLayoutMorph.! !

!classDefinition: #TusLibrosAuthenticationErrorWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 20:51:37'!
Panel subclass: #TusLibrosAuthenticationErrorWindow
	instanceVariableNames: 'errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:51:35' prior: 50909259!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:51:39' prior: 50909329!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:51:51' prior: 50909309!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:errorMessage).
		
	^errorRowLayoutMorph.! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:51:53' prior: 50909353!
buildErrorRow
	| errorRowLayoutMorph |
	
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: errorMessage).
		
	^errorRowLayoutMorph.! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 20:53:25' prior: 50909289 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildErrorRow.! !

TusLibrosClientWindow open  !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:54:47' prior: 50908272!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (WebUtils jsonDecode: ((resp content) readStream))].! !

TusLibrosClientWindow open !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:55:58' prior: 50909385!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (WebUtils jsonDecode: ((resp content) ))].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:56:17' prior: 50909403!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:56:51' prior: 50909420!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:58:23' prior: 50909436!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp content) readStream).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 20:59:14' prior: 50909452!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp readStream)).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

TusLibrosClientWindow open!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:01:35' prior: 50909471!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
		
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp)).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:06:25' prior: 50909490!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
	resp := WebClient httpPost: (self url,endpoint) content: fieldDict type: 'text/plain'.
	"resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict."
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp)).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:07:10' prior: 50909508!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	endpoint := '/createCart'.
	resp := WebClient httpPost: (self url,endpoint) content: (fieldDict asString) type: 'text/plain'.
	"resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict."
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp)).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:08:20' prior: 50909529!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	fieldDict :=self correctlyEncodeSpacesForUrlRequestParameter:( fieldDict asString).
	
	endpoint := '/createCart'.
	resp := WebClient httpPost: (self url,endpoint) content: (fieldDict ) type: 'text/plain'.
	"resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict."
	resp := resp content.
	resp := WebUtils jsonDecode: ((resp)).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:09:18' prior: 50909550!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password,'sa'}.	
	fieldDict :=self correctlyEncodeSpacesForUrlRequestParameter:( fieldDict asString).
	
	endpoint := '/createCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

TusLibrosClientWindow open!

TusLibrosClientWindow open!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:18:02' prior: 50909574!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.	
	fieldDict :=self correctlyEncodeSpacesForUrlRequestParameter:( fieldDict asString).
	
	endpoint := '/createCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

TusLibrosClientWindow open!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/7/2021 21:19:00' prior: 50909595!
createCartFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.		
	endpoint := '/createCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

TusLibrosClientWindow open!
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:19:56' prior: 50909223!
sendCreateCartRequest

	[ cartId := restInterface createCartFor: user authenticatedWith: password ]
		on: Error 
		do: [ :anError |
			"TODO: errorMessage := anError messageText."
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:20:25' prior: 50909341!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInHand .
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:22:08' prior: 50909645!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self position: `50@50`.
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:24:10' prior: 50909657!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld: self runningWorld.
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:24:34' prior: 50909670!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld: self.
	self yourself.
	! !
!TusLibrosAuthenticationErrorWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:24:49' prior: 50909683!
initializeWith: anErrorMessage
	errorMessage := anErrorMessage.
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Error'.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !
!TusLibrosClientWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:26:43' prior: 50909632!
sendCreateCartRequest

	[ 
		cartId := restInterface createCartFor: user authenticatedWith: password.
		self triggerEvent: #successfullLogIn with: self.
	]	
		on: Error 
		do: [ :anError |
			"TODO: errorMessage := anError messageText."
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 21:28:20' prior: 50909245!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #authenticationFailed send: #showAuthenticationError to: self.	
	self model when: #successfullLogIn send: #showHome to: self.	
! !

!classDefinition: #TusLibrosAuthenticationHomeWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:28:42'!
Object subclass: #TusLibrosAuthenticationHomeWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 21:28:37'!
showHome 

	TusLibrosAuthenticationHomeWindow open.! !

!classRenamed: #TusLibrosClientWindow as: #TusLibrosClientLogInWindow stamp: 'JN 7/7/2021 21:29:42'!
Smalltalk renameClassNamed: #TusLibrosClientWindow as: #TusLibrosClientLogInWindow!

!classRenamed: #TusLibrosClientWindowModel as: #TusLibrosClientLogInWindowModel stamp: 'JN 7/7/2021 21:29:57'!
Smalltalk renameClassNamed: #TusLibrosClientWindowModel as: #TusLibrosClientLogInWindowModel!
!TusLibrosClientLogInWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:29:57' prior: 50909722!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientLogInWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #authenticationFailed send: #showAuthenticationError to: self.	
	self model when: #successfullLogIn send: #showHome to: self.	
! !
!TusLibrosAuthenticationHomeWindow class methodsFor: 'no messages' stamp: 'JN 7/7/2021 21:30:25'!
open
	
	^self new initializeWith: 'Home'.! !
!TusLibrosAuthenticationHomeWindow class methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:30:34' prior: 50909780!
open
	
	^self new initializeWith: 'Tus Libros - Home'.! !

!classDefinition: #TusLibrosClientHomeWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:37:18'!
Object subclass: #TusLibrosClientHomeWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosAuthenticationHomeWindow methodsFor: 'no messages' stamp: 'JN 7/7/2021 21:37:13'!
initializeWith: aTitle and: aCartId from: anUser authenticatedWith: aPassword  

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHomeWindowModel for: aCartId from: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !

Panel subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #NameOfSubclass category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:37:24'!
Panel subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classRemoval: #NameOfSubclass stamp: 'JN 7/7/2021 21:37:41'!
Panel subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

Panel subclass: #TusLibrosAuthenticationHomeWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosAuthenticationHomeWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:37:50'!
Panel subclass: #TusLibrosAuthenticationHomeWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classRenamed: #TusLibrosAuthenticationHomeWindow as: #TusLibrosClientHomeWindow stamp: 'JN 7/7/2021 21:38:11'!
Smalltalk renameClassNamed: #TusLibrosAuthenticationHomeWindow as: #TusLibrosClientHomeWindow!
!TusLibrosClientLogInWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:38:11' prior: 50909746!
showHome 

	TusLibrosClientHomeWindow open.! !

!classRenamed: #TusLibrosAuthenticationErrorWindow as: #TusLibrosClientAuthenticationErrorWindow stamp: 'JN 7/7/2021 21:38:26'!
Smalltalk renameClassNamed: #TusLibrosAuthenticationErrorWindow as: #TusLibrosClientAuthenticationErrorWindow!
!TusLibrosClientLogInWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:38:27' prior: 50909205!
showAuthenticationError 

	TusLibrosClientAuthenticationErrorWindow openWith: self model errorMessage! !
!TusLibrosClientHomeWindowModel class methodsFor: 'no messages' stamp: 'JN 7/7/2021 21:39:20'!
for: aCartId from: anUser authenticatedWith: aPassword

	self new initializeWith: aCartId from: anUser authenticatedWith: aPassword.! !

!classDefinition: #TusLibrosClientHomeWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:39:55'!
Object subclass: #TusLibrosClientHomeWindowModel
	instanceVariableNames: 'cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientHomeWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:39:57'!
Object subclass: #TusLibrosClientHomeWindowModel
	instanceVariableNames: 'cartId user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientHomeWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:39:58'!
Object subclass: #TusLibrosClientHomeWindowModel
	instanceVariableNames: 'cartId user password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHomeWindowModel methodsFor: 'no messages' stamp: 'JN 7/7/2021 21:39:53'!
initializeWith: aCartId from: anUser authenticatedWith: aPassword.

	cartId := aCartId.
	user := anUser.
	password := aPassword.! !

!classDefinition: #TusLibrosClientHomeWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 21:42:53'!
Object subclass: #TusLibrosClientHomeWindowModel
	instanceVariableNames: 'cartId user password restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:42:51' prior: 50909905!
initializeWith: aCartId from: anUser authenticatedWith: aPassword.

	cartId := aCartId.
	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRestInterface new.
! !

TusLibrosClientLogInWindow open!

TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!
!TusLibrosClientHomeWindow class methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:50:45'!
openFor: aCartId from: anUser authenticatedWith: aPassword
	
	^self new initializeWith: 'Tus Libros - Home' and: aCartId from: anUser authenticatedWith: aPassword! !

!methodRemoval: TusLibrosClientHomeWindow class #open stamp: 'JN 7/7/2021 21:50:57'!
open
	
	^self new initializeWith: 'Tus Libros - Home'.!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 21:51:59' prior: 50909852!
showHome 

	TusLibrosClientHomeWindow 
		openFor: self model cartId 
		from: self model userText 
		authenticatedWith: self model passwordText 
.! !
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:52:28'!
cartId

	^cartId! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 21:59:01' overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildHistoryRow;
	addMorph: self buildCartRow;
	addMorph: self buildLogOutRow.
! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:01:03'!
buildHistoryRow

	| historyRowLayoutMorph historyButtonMorph |
	
	historyButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #goToHistory  label: 'My History'.
	
	historyRowLayoutMorph := LayoutMorph newRow.
	historyRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: historyButtonMorph.
		
	^historyRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:01:51'!
buildCartRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #goToCart  label: 'My Cart'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:02:41'!
buildLogOutRow

	| logOutRowLayoutMorph logOutButtonMorph |
	
	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.
	
	logOutRowLayoutMorph := LayoutMorph newRow.
	logOutRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: logOutButtonMorph.
		
	^logOutRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:05:22' prior: 50909707!
sendCreateCartRequest

	[ 
		cartId := restInterface createCartFor: user authenticatedWith: password.
		"self triggerEvent: #successfullLogIn with: self."
	]	
		on: Error 
		do: [ :anError |
			"TODO: errorMessage := anError messageText."
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:05:56' prior: 50910016!
sendCreateCartRequest

	[ 
		cartId := restInterface createCartFor: user authenticatedWith: password.
		self triggerEvent: #successfullLogIn with: self.
	]	
		on: Error 
		do: [ :anError |
			"TODO: errorMessage := anError messageText."
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !

TusLibrosClientLogInWindow open!

TusLibrosClientHomeWindow 
		openFor: self model cartId 
		from: self model userText 
		authenticatedWith: self model passwordText !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:10:03' prior: 50909949!
showHome 

	TusLibrosClientHomeWindow 
		openFor: (self model cartId)
		from: (self model userText)
		authenticatedWith: (self model passwordText)
.! !

TusLibrosClientHomeWindow 
		openFor: (self model cartId)
		from: (self model userText)
		authenticatedWith: (self model passwordText).!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:12:31' overrides: 50865447!
defaultExtent

	^ 1035@485
	
	! !

TusLibrosClientLogInWindow open!

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:19:53' prior: 50909799!
initializeWith: aTitle and: aCartId from: anUser authenticatedWith: aPassword  

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHomeWindowModel for: aCartId from: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #logOut send: #logOut to: self.	
	self model when: #showHistory send: #showHistory to: self.	
	! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:21:00' prior: 50909986!
buildCartRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #showCart  label: 'My Cart'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:21:17' prior: 50910072!
initializeWith: aTitle and: aCartId from: anUser authenticatedWith: aPassword  

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHomeWindowModel for: aCartId from: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #logOut send: #logOut to: self.	
	self model when: #showHistory send: #showHistory to: self.	
	self model when: #showCart send: #showCart to: self.	! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:21:23' prior: 50909971!
buildHistoryRow

	| historyRowLayoutMorph historyButtonMorph |
	
	historyButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #showHistory  label: 'My History'.
	
	historyRowLayoutMorph := LayoutMorph newRow.
	historyRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: historyButtonMorph.
		
	^historyRowLayoutMorph.! !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:24:50' prior: 50909043!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  height: 50; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:25:32' prior: 50910141!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  morphHeight: 50; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:25:54' prior: 50909022!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 50; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !

TusLibrosClientLogInWindow open!

TusLibrosClientLogInWindow open  !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:27:27' prior: 50910189!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:27:31' prior: 50910165!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !

TusLibrosClientLogInWindow open !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:27:47' prior: 50910234!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.1;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !

TusLibrosClientLogInWindow open !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:28:11' prior: 50910258!
buildPasswordRow
	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph separation: 25;
	addMorph: (LabelMorph contents:'Password:');
 	addMorph: passwordTextBoxMorph.
		
	^passwordRowLayoutMorph.! !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:28:16' prior: 50910213!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	addMorph: (LabelMorph contents:'User:');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !

TusLibrosClientLogInWindow open !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:28:55' prior: 50910304!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	addMorph: (LabelMorph contents:'User:   ');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:29:36' prior: 50910326!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	addMorph: (LabelMorph contents:'User:      ');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:29:46' prior: 50910348!
buildUserRow
	| userRowLayoutMorph |
	
	userTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	userTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | userTextBoxMorph textMorph acceptContents ] .
	userTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	userRowLayoutMorph := LayoutMorph newRow.
	userRowLayoutMorph separation: 25;
	addMorph: (LabelMorph contents:'User:       ');
 	addMorph: userTextBoxMorph.
		
	^userRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:30:42' prior: 50907269 overrides: 50865447!
defaultExtent

	^ 635@485
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:31:02' prior: 50910393 overrides: 50865447!
defaultExtent

	^ 535@485
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:32:03' prior: 50910065 overrides: 50865447!
defaultExtent

	^ 535@485
	
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 22:33:42' prior: 50910052!
showHome 

	TusLibrosClientHomeWindow 
		openFor: (self model cartId)
		from: (self model userText)
		authenticatedWith: (self model passwordText).
		
	self closeButtonClicked.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:39:22'!
logOut

	TusLibrosClientLogInWindow open.
	self closeButtonClicked.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:40:49'!
logOut

	self triggerEvent: #logOut with: self.
	
	! !

!methodRemoval: TusLibrosClientLogInWindowModel #logOut stamp: 'JN 7/7/2021 22:41:12'!
logOut

	self triggerEvent: #logOut with: self.
	
	!
!TusLibrosClientHomeWindowModel class methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:42:03' prior: 50909872!
for: aCartId from: anUser authenticatedWith: aPassword

	^self new initializeWith: aCartId from: anUser authenticatedWith: aPassword.! !

TusLibrosClientLogInWindow open !
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:43:18'!
logOut

	self triggerEvent: #logOut with: self.
! !

TusLibrosClientLogInWindow open !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:45:32' prior: 50910000!
buildLogOutRow

	| logOutRowLayoutMorph logOutButtonMorph |
	
	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.
	
	logOutRowLayoutMorph := LayoutMorph newRow.
	logOutRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: logOutButtonMorph.
		
	^logOutRowLayoutMorph.! !
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:45:39' prior: 50910448!
logOut

	"self triggerEvent: #logOut with: self."
! !

TusLibrosClientLogInWindow open !

!methodRemoval: TusLibrosClientHomeWindowModel #logOut stamp: 'JN 7/7/2021 22:46:06'!
logOut

	"self triggerEvent: #logOut with: self."
!

!classDefinition: #TusLibrosClientHistoryWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:50:48'!
Object subclass: #TusLibrosClientHistoryWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:50:39'!
showHistory

	TusLibrosClientHistoryWindow openFor: self model user authenticatedWith: self model password.
! !

Panel subclass: #TusLibrosClientHistoryWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientHistoryWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:51:25'!
Panel subclass: #TusLibrosClientHistoryWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindow class methodsFor: 'no messages' stamp: 'JN 7/7/2021 22:52:46'!
openFor: anUser authenticatedWith: aPassword
	
	^self new initializeWith: 'Tus Libros - History' and: anUser authenticatedWith: aPassword! !
!TusLibrosClientHistoryWindow methodsFor: 'no messages' stamp: 'JN 7/7/2021 22:52:57'!
initializeWith: aTitle and: anUser authenticatedWith: aPassword! !

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:54:08'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:54:04' prior: 50910517!
initializeWith: aTitle and: anUser authenticatedWith: aPassword

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHistoryWindowModel for: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #goBack send: #goBack to: self.	
	self model when: #showHistory send: #showHistory to: self.	
	self model when: #showCart send: #showCart to: self.	! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:54:21' prior: 50910105!
initializeWith: aTitle and: aCartId from: anUser authenticatedWith: aPassword  

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHomeWindowModel for: aCartId from: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	"self model when: #logOut send: #logOut to: self.	"
	self model when: #showHistory send: #showHistory to: self.	
	self model when: #showCart send: #showCart to: self.	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:54:53' prior: 50910551!
initializeWith: aTitle and: aCartId from: anUser authenticatedWith: aPassword  

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHomeWindowModel for: aCartId from: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.! !
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:55:21' prior: 50910531!
initializeWith: aTitle and: anUser authenticatedWith: aPassword

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientHistoryWindowModel for: anUser authenticatedWith: aPassword).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !
!TusLibrosClientHistoryWindowModel class methodsFor: 'no messages' stamp: 'JN 7/7/2021 22:55:31'!
 for: anUser authenticatedWith: aPassword! !
!TusLibrosClientHistoryWindowModel class methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:55:49' prior: 50910602!
for: anUser authenticatedWith: aPassword

	^self new initializeWith: anUser authenticatedWith: aPassword.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'no messages' stamp: 'JN 7/7/2021 22:55:59'!
initializeWith: anUser authenticatedWith: aPassword.! !

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:56:19'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: 'user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:56:20'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: 'user password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 22:56:21'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: 'user password restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:56:17' prior: 50910615!
initializeWith: anUser authenticatedWith: aPassword

	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRestInterface new.
! !
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:58:30' overrides: 50865447!
defaultExtent

	^ 535@485
	
	! !
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 22:59:26' overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildGoHomeRow.
! !
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:00:29'!
buildGoHomeRow

	| goHomeRowLayoutMorph goHomeButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	
	goHomeRowLayoutMorph := LayoutMorph newRow.
	goHomeRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph.
		
	^goHomeRowLayoutMorph.
! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:07:26'!
user

	^user! !
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:07:36'!
password

	^password! !

TusLibrosClientLogInWindow open!
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:09:12' prior: 50910032!
sendCreateCartRequest
self triggerEvent: #successfullLogIn with: self.
	"[ 
		cartId := restInterface createCartFor: user authenticatedWith: password.
		self triggerEvent: #successfullLogIn with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		]."
	
	
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:10:10' prior: 50910126!
buildHistoryRow

	| historyRowLayoutMorph historyButtonMorph |
	
	historyButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #showHistory  label: 'My History'.
	
	historyRowLayoutMorph := LayoutMorph newRow.
	historyRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: historyButtonMorph.
		
	^historyRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:10:16' prior: 50910091!
buildCartRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #showCart  label: 'My Cart'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:10:55'!
goHome

	self closeButtonClicked.
! !

TusLibrosClientLogInWindow open!

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 23:14:37'!
Object subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:14:31'!
showStore

	TusLibrosClientStoreWindow openFor: self model cartId.
! !
!TusLibrosClientStoreWindow class methodsFor: 'no messages' stamp: 'JN 7/7/2021 23:15:36'!
openFor: aCartId
	
	^self new initializeWith: 'Tus Libros - Store' and: aCartId.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 23:18:01'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'no messages' stamp: 'JN 7/7/2021 23:16:56'!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.! !

Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/7/2021 23:18:11'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:20:17' overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:21:28'!
buildGoHomeRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:21:43' overrides: 50865447!
defaultExtent

	^ 535@485
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:21:51'!
goHome

	self closeButtonClicked.
! !
!TusLibrosClientStoreWindowModel class methodsFor: 'no messages' stamp: 'JN 7/7/2021 23:22:19'!
for: aCartId 

	^self new initializeWith: aCartId.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 23:22:43'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/7/2021 23:22:44'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'no messages' stamp: 'JN 7/7/2021 23:22:42'!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
! !

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:23:27' prior: 50910725!
buildCartRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #showStore  label: 'Store'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:23:50'!
buildStoreRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #showStore  label: 'Store'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.! !
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:23:50' prior: 50909962 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildHistoryRow;
	addMorph: self buildStoreRow;
	addMorph: self buildLogOutRow.
! !

!methodRemoval: TusLibrosClientHomeWindow #buildCartRow stamp: 'JN 7/7/2021 23:23:50'!
buildCartRow

	| cartRowLayoutMorph cartButtonMorph |
	
	cartButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #showStore  label: 'Store'.
	
	cartRowLayoutMorph := LayoutMorph newRow.
	cartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: cartButtonMorph.
		
	^cartRowLayoutMorph.!

TusLibrosClientLogInWindow open!
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:24:13'!
cartId

	^cartId! !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/7/2021 23:24:32' prior: 50909080!
buildCreateCartRow
	| createCartRowLayoutMorph createCartButtonMorph |
	
	 
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Log In'.
	
	createCartRowLayoutMorph := LayoutMorph newRow.
	createCartRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: createCartButtonMorph.
		
	^createCartRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/7/2021 23:24:58'!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !

!methodRemoval: TusLibrosClientStoreWindow #buildGoHomeRow stamp: 'JN 7/7/2021 23:25:07'!
buildGoHomeRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.!

TusLibrosClientLogInWindow open !

TusLibrosClientLogInWindow open !

TusLibrosClientLogInWindow open !

TusLibrosClientLogInWindow open!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:04:36'!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	! !

1@2@2!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/TerseGuide.pck.st----!

{1.2.3}!

{1 . 2 . 3}!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:11:14' prior: 50910979!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	
	self assert: catalog includes: 
		{	testObjectsFactory itemSellByTheStore . 
		  	testObjectsFactory itemSellByTheStoreTitle . 
			testObjectsFactory itemSellByTheStorePrice }.
			
	self assert: catalog includes: 
		{	testObjectsFactory anotherItemSellByTheStore . 
		  	testObjectsFactory anotherItemSellByTheStoreTitle . 
			testObjectsFactory anotherItemSellByTheStorePrice }.
		
	self assert: catalog size equals: 2.	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 00:11:46'!
itemSellByTheStoreTitle

	^ 'Cormen'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 00:12:26'!
anotherItemSellByTheStoreTitle

	^ 'Smalltalk'! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:12:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:12:38'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:12:52'!
listCatalog
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:13:54' prior: 50913949!
listCatalog
	
	^catalog ! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:13:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:13:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:13:59'!
FAILURE!

a := Dictionary new!

a add: 'a'->'b'->'c'!

a at: 'a'!

a at: 'a'->'b'!

a add: 'a'->('b'->'c')!

a at: 'a'!

(a at: 'a' )at: 'b' !

(a at: 'a' ) at: 'b'!

a at: 'a'!

('b' -> 'c' ) first!

('b' -> 'c' )!

('b' -> 'c' )		key	!

('b' -> 'c' )		value	!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'JN 7/8/2021 00:20:54' prior: 50906747!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: 
			(self itemSellByTheStoreTitle -> self itemSellByTheStorePrice);
		at: self anotherItemSellByTheStore put: 
			(self anotherItemSellByTheStoreTitle -> self anotherItemSellByTheStorePrice);
		yourself ! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:21:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:21:35'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:24:11' prior: 50913913!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	catalog := catalog asOrderedCollection .
	self assert: catalog includes: 
		{	testObjectsFactory itemSellByTheStore . 
		  	testObjectsFactory itemSellByTheStoreTitle . 
			testObjectsFactory itemSellByTheStorePrice }.
			
	self assert: catalog includes: 
		{	testObjectsFactory anotherItemSellByTheStore . 
		  	testObjectsFactory anotherItemSellByTheStoreTitle . 
			testObjectsFactory anotherItemSellByTheStorePrice }.
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:27:35' prior: 50914064!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog at: testObjectsFactory itemSellByTheStore) equals:
		(testObjectsFactory itemSellByTheStoreTitle -> testObjectsFactory itemSellByTheStorePrice).
	
	self assert: (catalog at: testObjectsFactory anotherItemSellByTheStore) equals:
		(testObjectsFactory anotherItemSellByTheStoreTitle -> testObjectsFactory anotherItemSellByTheStorePrice).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:27:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:27:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:27:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:27:45'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'JN 7/8/2021 00:30:09' prior: 50905402!
totalOf: anItem quantity: aQuantity

	^(cart catalog at: anItem) value * aQuantity  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:30:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:30:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:30:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:30:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:30:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:30:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:30:20'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'JN 7/8/2021 00:30:52' prior: 50914228!
totalOf: anItem quantity: aQuantity

	^(cart catalog at: anItem) value * aQuantity  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:31:03'!
PASSED!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:33:20' prior: 50910799 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:35:19'!
buildCatalogAndCartRow

	| secondRowLayoutMorph |
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogColumn.
	
	^secondRowLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:35:55' prior: 50914700!
buildCatalogAndCartRow

	| catalogAndCartColumnsLayoutMorph |
	
	catalogAndCartColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogColumn.
	
	^catalogAndCartColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:38:27'!
buildCatalogColumn

	| catalogColumnMorph catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #items indexGetter: #itemsListIndex indexSetter: #itemsListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.
		
	catalogColumnMorph := LayoutMorph newColumn.
	catalogColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: catalogListMorph.
	
	catalogColumnMorph layoutSpec fixedWidth: 390.
		
	^catalogColumnMorph.
	! !

TusLibrosClientLogInWindow open!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 00:39:32'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:39:29'!
catalog
	
	^catalog.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:39:39' prior: 50914723!
buildCatalogColumn

	| catalogColumnMorph catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #itemsListIndex indexSetter: #itemsListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.
		
	catalogColumnMorph := LayoutMorph newColumn.
	catalogColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: catalogListMorph.
	
	catalogColumnMorph layoutSpec fixedWidth: 390.
		
	^catalogColumnMorph.
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:39:58' prior: 50910857!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := ''
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:39:58' prior: 50914777!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := ''.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:40:16' prior: 50914785!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := OrderedCollection new.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 00:41:27' prior: 50914793!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 00:42:19'!
listCatalog

	| resp fieldDict endpoint |
	fieldDict := Dictionary new.
			
	endpoint := '/listCatalog'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 00:44:51' prior: 50908215!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 00:47:11' prior: 50914809!
listCatalog

	| resp fieldDict endpoint |
	fieldDict := Dictionary new.
			
	endpoint := '/listCatalog'.
	resp := WebClient httpGet: (self url,endpoint).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 00:47:19' prior: 50914853!
listCatalog

	| resp endpoint |
			
	endpoint := '/listCatalog'.
	resp := WebClient httpGet: (self url,endpoint).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:50:01' prior: 50914086!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: catalog includes: 
		(testObjectsFactory itemSellByTheStore , testObjectsFactory itemSellByTheStoreTitle , testObjectsFactory itemSellByTheStorePrice).
	
	self assert: catalog includes: 
		(testObjectsFactory anotherItemSellByTheStore , testObjectsFactory anotherItemSellByTheStoreTitle , testObjectsFactory anotherItemSellByTheStorePrice).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:13'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:50:52' prior: 50914877!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: catalog includes: 
		(testObjectsFactory itemSellByTheStore , testObjectsFactory itemSellByTheStoreTitle , testObjectsFactory itemSellByTheStorePrice asString ).
	
	self assert: catalog includes: 
		(testObjectsFactory anotherItemSellByTheStore , testObjectsFactory anotherItemSellByTheStoreTitle , testObjectsFactory anotherItemSellByTheStorePrice asString).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:54'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:50:54'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:52:42' prior: 50913954!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog do: [:isbn :item | parsedCatalog add: (isbn, item key, item value asString)].
	
	^parsedCatalog ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:52:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:52:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:52:46'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:53:21' prior: 50914940!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: (isbn, item key, item value asString)].
	
	^parsedCatalog ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 00:53:24'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open  !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:55:40' prior: 50914912!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	
	catalog := WebUtils jsonDecode: catalog.
	self assert: catalog includes: 
		(testObjectsFactory itemSellByTheStore , testObjectsFactory itemSellByTheStoreTitle , testObjectsFactory itemSellByTheStorePrice asString ).
	
	self assert: catalog includes: 
		(testObjectsFactory anotherItemSellByTheStore , testObjectsFactory anotherItemSellByTheStoreTitle , testObjectsFactory anotherItemSellByTheStorePrice asString).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:55:58' prior: 50915072!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: (isbn, item key, item value asString)].
	
	^WebUtils jsonEncode: parsedCatalog.! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open   !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:57:49' prior: 50915204!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	
	self assert: catalog includes: 
		(testObjectsFactory itemSellByTheStore , testObjectsFactory itemSellByTheStoreTitle , testObjectsFactory itemSellByTheStorePrice asString ).
	
	self assert: catalog includes: 
		(testObjectsFactory anotherItemSellByTheStore , testObjectsFactory anotherItemSellByTheStoreTitle , testObjectsFactory anotherItemSellByTheStorePrice asString).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:58:02' prior: 50915225!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: (isbn, item key, item value asString)].
	
	^parsedCatalog.! !

TusLibrosClientRestInterface new listCatalog!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 01:04:41' prior: 50914822!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: ( (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 01:04:56' prior: 50915270!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:05:26' prior: 50915239!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.
	catalog := WebUtils jsonEncode: catalog.
	self assert: catalog includes: 
		(testObjectsFactory itemSellByTheStore , testObjectsFactory itemSellByTheStoreTitle , testObjectsFactory itemSellByTheStorePrice asString ).
	
	self assert: catalog includes: 
		(testObjectsFactory anotherItemSellByTheStore , testObjectsFactory anotherItemSellByTheStoreTitle , testObjectsFactory anotherItemSellByTheStorePrice asString).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:05:32'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:05:56'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:27:35' prior: 50915326!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog at: testObjectsFactory itemSellByTheStore) equals:
		(testObjectsFactory itemSellByTheStoreTitle -> testObjectsFactory itemSellByTheStorePrice).
	
	self assert: (catalog at: testObjectsFactory anotherItemSellByTheStore) equals:
		(testObjectsFactory anotherItemSellByTheStoreTitle -> testObjectsFactory anotherItemSellByTheStorePrice).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 00:27:35' prior: 50915355!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog at: testObjectsFactory itemSellByTheStore) equals:
		(testObjectsFactory itemSellByTheStoreTitle -> testObjectsFactory itemSellByTheStorePrice).
	
	self assert: (catalog at: testObjectsFactory anotherItemSellByTheStore) equals:
		(testObjectsFactory anotherItemSellByTheStoreTitle -> testObjectsFactory anotherItemSellByTheStorePrice).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:09:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:09:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:09:57'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:09:57'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:10:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:10:02'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:10:28' prior: 50915259!
listCatalog

	^catalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:10:30'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:12:15' prior: 50915375!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		{ 	testObjectsFactory itemSellByTheStore . 
			testObjectsFactory itemSellByTheStoreTitle . 
			testObjectsFactory itemSellByTheStorePrice }).
	
	self assert: (catalog includes: 
		{ 	testObjectsFactory anotherItemSellByTheStore . 
			testObjectsFactory anotherItemSellByTheStoreTitle . 
			testObjectsFactory anotherItemSellByTheStorePrice }).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:12:17'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:12:17'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 00:58:02' prior: 50915554!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: (isbn, item key, item value asString)].
	
	^parsedCatalog.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:13:46' prior: 50915708!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: { isbn . item key . item value }].
	
	^parsedCatalog.! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:13:57'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientRestInterface new listCatalog!

WebUtils jsonEncode: { 1 . 2 . 4} !

WebUtils jsonEncode: { {1 . 5} . 2 . 4}!

{1 . 5}!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:18:28' prior: 50915718!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := catalog asArray.
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: { isbn . item key . item value }].
	
	^parsedCatalog.! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:18:34'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:18:57' prior: 50915738!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: { isbn . item key . item value }].
	parsedCatalog := catalog asArray.

	^parsedCatalog.! !


OrderedCollection 
with: #('anotherValidBook' 'Smalltalk' 15) 
with: #('validBook' 'Cormen' 1)!


a := OrderedCollection 
with: #('anotherValidBook' 'Smalltalk' 15) 
with: #('validBook' 'Cormen' 1)!

a asArray !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:22:02' prior: 50915753!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | parsedCatalog add: { isbn . item key . item value }].

	^parsedCatalog asArray.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 01:22:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:22:05'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 01:27:19'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog selectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:27:17'!
itemsListIndex: anIndex
	
	selectedIndex := anIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:27:29'!
itemsListIndex
	
	^selectedIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:27:48' prior: 50914801!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	selectedIndex := 0.

! !

TusLibrosClientLogInWindow open!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:29:23' prior: 50915680!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , 
			testObjectsFactory itemSellByTheStoreTitle , 
			testObjectsFactory itemSellByTheStorePrice )).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , 
			testObjectsFactory anotherItemSellByTheStoreTitle , 
			testObjectsFactory anotherItemSellByTheStorePrice )).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:29:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:29:25'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:29:38' prior: 50915932!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , 
			testObjectsFactory itemSellByTheStoreTitle , 
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , 
			testObjectsFactory anotherItemSellByTheStoreTitle , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:29:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:29:40'!
FAILURE!

b := Dictionary new.
b add: 'anotherValidBook'->'Smalltalk' -> 15.
b add: 'validBook'->'Cormen' -> 10!

b!

b asArray !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:35:00' prior: 50915770!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | 
		parsedCatalog add: ( isbn , ' ' , item key , ' ' , item value asString)].

	^parsedCatalog asArray.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:35:25' prior: 50915960!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' ' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' ' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:35:27'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:37:12' prior: 50916003!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - ' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - ' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:37:29' prior: 50915992!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | 
		parsedCatalog add: ( isbn , ' - ' , item key , ' - ' , item value asString)].

	^parsedCatalog asArray.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:38:14' prior: 50910826 overrides: 50865447!
defaultExtent

	^ 2535@485
	! !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:38:49' prior: 50916066 overrides: 50865447!
defaultExtent

	^ 1535@485
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:38:58' prior: 50916073 overrides: 50865447!
defaultExtent

	^ 1135@485
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:41:39' prior: 50914757!
buildCatalogColumn

	| catalogColumnMorph catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #itemsListIndex indexSetter: #itemsListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
		
	catalogColumnMorph := LayoutMorph newColumn.
	catalogColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: catalogListMorph.

	
	catalogColumnMorph layoutSpec fixedWidth: 390.
		
	^catalogColumnMorph.
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 01:42:44' prior: 50906720!
anotherItemSellByTheStore

	^'isbn01'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 01:42:49' prior: 50916103!
anotherItemSellByTheStore

	^'isbn02'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 01:42:56' prior: 50906734!
itemSellByTheStore

	^ 'isbn02'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:42:59'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:42:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:42:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:42:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:42:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:42:59'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:43:21'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:43:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:43:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:43:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:43:21'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:44:04'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:44:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:44:13'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:44:13'!
FAILURE!

cashier checkOut total!

(testObjectsFactory itemSellByTheStorePrice * 2)!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JN 7/8/2021 01:45:59' prior: 50916113!
itemSellByTheStore

	^ 'isbn01'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:46:01'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:47:14'!
test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - ' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - ' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !

!methodRemoval: TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPrices stamp: 'JN 7/8/2021 01:47:19'!
test20listCatalogReturnsListOfIsbnTitlesAndPrices

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - ' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - ' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 01:48:08' prior: 50916496!
test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - $' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - $' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 01:48:16' prior: 50916054!
listCatalog
	
	| parsedCatalog |
	parsedCatalog := OrderedCollection new.
	catalog keysAndValuesDo: [:isbn :item | 
		parsedCatalog add: ( isbn , ' - ' , item key , ' - $' , item value asString)].

	^parsedCatalog asArray.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:50:08' prior: 50914691 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:51:05'!
buildCatalogAndCartActionsRow

	| catalogAndCartActionColumnsLayoutMorph |
	
	catalogAndCartActionColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartActionColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogActionsColumn.
	
	^catalogAndCartActionColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:52:14'!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: addToCartButton.
	"addMorph: checkOutButtonMorph.	"
	^buttonsRowLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 01:55:04'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: 'quantityTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:55:02' prior: 50916597!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: addToCartButton;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph.	
	^buttonsRowLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 01:55:37'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog selectedIndex quantityToAdd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:55:36'!
quantityToAdd
	
	^quantityToAdd.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:55:54'!
quantityToAdd: aQuantity
	
	quantityToAdd := aQuantity.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:56:08' prior: 50916666!
quantityToAdd: aQuantity
	
	quantityToAdd := aQuantity.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:56:37'!
quantityToAddText: aQuantity
	
	quantityToAdd := aQuantity.! !

!methodRemoval: TusLibrosClientStoreWindowModel #quantityToAdd: stamp: 'JN 7/8/2021 01:56:37'!
quantityToAdd: aQuantity
	
	quantityToAdd := aQuantity.!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:56:44'!
quantityToAddText
	
	^quantityToAdd.! !

!methodRemoval: TusLibrosClientStoreWindowModel #quantityToAdd stamp: 'JN 7/8/2021 01:56:44'!
quantityToAdd
	
	^quantityToAdd.!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:57:03' prior: 50915922!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	selectedIndex := 0.
	quantityToAdd := 1.

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:58:41' prior: 50916696!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	selectedIndex := 0.
	quantityToAdd := '1'.

! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:58:57' prior: 50916622!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: addToCartButton;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:59:26' prior: 50916716!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.1;
 	addMorph: addToCartButton;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:59:38' prior: 50916745!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: addToCartButton;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 01:59:54' prior: 50916584!
buildCatalogAndCartActionsRow

	| catalogAndCartActionColumnsLayoutMorph |
	
	catalogAndCartActionColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartActionColumnsLayoutMorph separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogActionsColumn.
	
	^catalogAndCartActionColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:00:11' prior: 50916803!
buildCatalogAndCartActionsRow

	| catalogAndCartActionColumnsLayoutMorph |
	
	catalogAndCartActionColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartActionColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogActionsColumn.
	
	^catalogAndCartActionColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:00:23' prior: 50910937!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 10;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:00:42' prior: 50916831!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:01:33' prior: 50914711!
buildCatalogAndCartRow

	| catalogAndCartColumnsLayoutMorph |
	
	catalogAndCartColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.

	^catalogAndCartColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:02:26'!
buildCartColumn

	| cartColumnMorph cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
		
	cartColumnMorph := LayoutMorph newColumn.
	cartColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: cartListMorph.

	
	cartColumnMorph layoutSpec fixedWidth: 390.
		
	^cartColumnMorph.
	! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 02:02:50'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog selectedIndex quantityToAdd cartSelectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:02:48'!
cartListIndex: anIndex
	
	cartSelectedIndex := anIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:03:08'!
cartListIndex
	
	^cartSelectedIndex.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 02:03:58'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog selectedIndex quantityToAdd cartSelectedIndex cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:03:56' prior: 50916706!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	cart := restInterface listCart.
	selectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.

! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 02:04:15'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog catalogSelectedIndex quantityToAdd cartSelectedIndex cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:04:15' prior: 50915917!
itemsListIndex
	
	^catalogSelectedIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:04:15' prior: 50916935!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	cart := restInterface listCart.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:04:15' prior: 50915912!
itemsListIndex: anIndex
	
	catalogSelectedIndex := anIndex.! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 02:04:27' prior: 50914866!
listCatalog

	| resp endpoint |
			
	endpoint := '/listCart'.
	resp := WebClient httpGet: (self url,endpoint).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 02:05:28'!
listCart: cartId
		
	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'cartId'.cartId.}.		
	endpoint := '/listCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:05:46' prior: 50916963!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRestInterface new.
	catalog := restInterface listCatalog.
	cart := restInterface listCart: cartId.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.

! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:06:41' prior: 50915299!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId').
			request send200Response: (WebUtils jsonEncode: (tusLibros listCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:07:34' prior: 50910694!
sendCreateCartRequest
	[ 
		cartId := restInterface createCartFor: user authenticatedWith: password.
		self triggerEvent: #successfullLogIn with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Authentication Failed'.
			self triggerEvent: #authenticationFailed with: self.
		].
	
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:08:10' prior: 50917019!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId').
			request send200Response: (WebUtils jsonEncode: (tusLibros listCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !


TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.  !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:09:29' prior: 50917071!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user') asInteger.
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId').
			request send200Response: (WebUtils jsonEncode: (tusLibros listCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !


TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!

TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:10:17' prior: 50917113!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId') asInteger.
			request send200Response: (WebUtils jsonEncode: (tusLibros listCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

'1' asInteger!

'1' asNumber !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:11:17' prior: 50917159!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !


TusLibrosClientRestInterface new createCartFor: 'validUser' authenticatedWith: 'validUserPassword'.!
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 02:14:03' prior: 50916981!
listCatalog

	| resp endpoint |
			
	endpoint := '/listCatalog'.
	resp := WebClient httpGet: (self url,endpoint).
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros-Tests' stamp: 'JN 7/8/2021 02:18:47'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros-Tests' stamp: 'JN 7/8/2021 02:19:00'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 02:19:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:19:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 02:19:04'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 02:22:36'!
test20listCartParsedReturnsSameAsListCartWithTitlesAsArray

	| catalog |
	catalog := systemFacade listCartParsed.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - $' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - $' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 02:22:43'!
test21listCartParsedReturnsSameAsListCartWithTitlesAsArray

	| catalog |
	catalog := systemFacade listCartParsed.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - $' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - $' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	! !

!methodRemoval: TusLibrosSystemFacadeTest #test20listCartParsedReturnsSameAsListCartWithTitlesAsArray stamp: 'JN 7/8/2021 02:22:48'!
test20listCartParsedReturnsSameAsListCartWithTitlesAsArray

	| catalog |
	catalog := systemFacade listCartParsed.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - $' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - $' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	!

!methodRemoval: TusLibrosSystemFacadeTest #test21listCartParsedReturnsSameAsListCartWithTitlesAsArray stamp: 'JN 7/8/2021 02:27:43'!
test21listCartParsedReturnsSameAsListCartWithTitlesAsArray

	| catalog |
	catalog := systemFacade listCartParsed.

	self assert: (catalog includes: 
		( 	testObjectsFactory itemSellByTheStore , ' - ' ,
			testObjectsFactory itemSellByTheStoreTitle , ' - $' ,
			testObjectsFactory itemSellByTheStorePrice asString)).
	
	self assert: (catalog includes: 
		( 	testObjectsFactory anotherItemSellByTheStore , ' - ' ,
			testObjectsFactory anotherItemSellByTheStoreTitle , ' - $' , 
			testObjectsFactory anotherItemSellByTheStorePrice asString)).
		
	self assert: catalog size equals: 2.	!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 02:31:55'!
test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN->testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN->testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2
! !

!testRun: #TusLibrosSystemFacadeTest #test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:32:16'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:32:16'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 02:36:33' prior: 50905858!
listCartIdentifiedAs: aCartId
	| items listOfItemsAndTitles |
	items := self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession cartContent ].
	
	listOfItemsAndTitles := OrderedCollection new.
	items do: [:item | | title | 
		title := (catalog at: item) key.
		listOfItemsAndTitles add: (item->title)].
	
	^listOfItemsAndTitles asArray.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 02:36:37'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 02:36:37'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:36:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 02:36:49'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 02:36:49'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HernanWilkinson 6/17/2015 20:48' prior: 50917524!
listCartIdentifiedAs: aCartId

	^ self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession cartContent ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 02:38:45'!
test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN->testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN->testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 02:41:16'!
listParsedCartIdentifiedAs: aCartId
	
	| listOfIsbns |
	listOfIsbns := self listCartIdentifiedAs: aCartId.
	listOfIsbns collect: [:isbn | (isbn->(catalog at: isbn) key)].
	^listOfIsbns asArray.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 02:41:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:41:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:41:21'!
FAILURE!

!methodRemoval: TusLibrosSystemFacadeTest #test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:41:48'!
test21ListCartReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN->testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN->testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2
!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:41:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:41:52'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 02:42:32' prior: 50917704!
listParsedCartIdentifiedAs: aCartId
	
	| listOfIsbns |
	listOfIsbns := self listCartIdentifiedAs: aCartId.
	listOfIsbns := listOfIsbns collect: [:isbn | (isbn->(catalog at: isbn) key)].
	^listOfIsbns asArray.! !

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:42:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 02:42:36'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 02:42:54' prior: 50917199!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at:'user').
			password := (request fields at:'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at:'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:44:05'!
cart
	
	^cart.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:44:44' prior: 50916774!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:46:23'!
buildCatalogAndCartLabelsRow

	| catalogAndCartLabelColumnsLayoutMorph |
	
	catalogAndCartLabelColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartLabelColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogLabelColumn.
	
	^catalogAndCartLabelColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:46:53'!
buildCatalogLabelColumn

	| buttonsRowLayoutMorph |
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:46:57' prior: 50917984!
buildCatalogLabelColumn

	| buttonsRowLayoutMorph |
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:47:09'!
buildCartLabelColumn

	| buttonsRowLayoutMorph |
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:47:19' prior: 50918006!
buildCartLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:47:33' prior: 50917995!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:47:46' prior: 50917971!
buildCatalogAndCartLabelsRow

	| catalogAndCartLabelColumnsLayoutMorph |
	
	catalogAndCartLabelColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartLabelColumnsLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogLabelColumn;
	addMorph: self buildCartLabelColumn.

	^catalogAndCartLabelColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:48:15' prior: 50916574 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:48:52' prior: 50918054 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 5;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:01' prior: 50918068 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:08' prior: 50918081 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 50;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:20' prior: 50918094 overrides: 50865361!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:36' prior: 50918028!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:44' prior: 50916872!
buildCatalogAndCartRow

	| catalogAndCartColumnsLayoutMorph |
	
	catalogAndCartColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartColumnsLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.

	^catalogAndCartColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:47' prior: 50918039!
buildCatalogAndCartLabelsRow

	| catalogAndCartLabelColumnsLayoutMorph |
	
	catalogAndCartLabelColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartLabelColumnsLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogLabelColumn;
	addMorph: self buildCartLabelColumn.

	^catalogAndCartLabelColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:49' prior: 50916817!
buildCatalogAndCartActionsRow

	| catalogAndCartActionColumnsLayoutMorph |
	
	catalogAndCartActionColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartActionColumnsLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogActionsColumn.
	
	^catalogAndCartActionColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:53' prior: 50917943!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:49:56' prior: 50918017!
buildCartLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').
	^labelRowLayoutMorph.! !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:53:05' prior: 50918171!
buildCatalogActionsColumn

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 02:55:42'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface catalog catalogSelectedIndex quantityToAdd cartSelectedIndex cart errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:55:38'!
sendCreateCartRequest
	[ 
		restInterface add: quantityToAdd of: catalogSelectedIndex to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientRestInterface methodsFor: 'sending requests' stamp: 'JN 7/8/2021 02:57:46'!
add: quantityToAdd of: catalogSelectedIndex to: cartId

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'quantity'.quantityToAdd.},
		{'isbn'.catalogSelectedIndex },
		{'cartId'.cartId }.		
	endpoint := '/addToCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

!classRenamed: #TusLibrosClientRestInterface as: #TusLibrosClientRest stamp: 'JN 7/8/2021 02:58:11'!
Smalltalk renameClassNamed: #TusLibrosClientRestInterface as: #TusLibrosClientRest!
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:58:12' prior: 50910648!
initializeWith: anUser authenticatedWith: aPassword

	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRest new.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:58:12' prior: 50917007!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := restInterface listCart: cartId.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.

! !
!TusLibrosClientLogInWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:58:12' prior: 50909141 overrides: 50865456!
initialize

	cartId := nil.
	restInterface := TusLibrosClientRest new.
	user := ''.
	password := ''.
	errorMessage := ''.! !
!TusLibrosClientHomeWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 02:58:12' prior: 50909922!
initializeWith: aCartId from: anUser authenticatedWith: aPassword.

	cartId := aCartId.
	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRest new.
! !

'ds sdasd ddfs'  substrings !

'ds - sdasd - ddfs'  substrings first!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:01:42' prior: 50918252!
sendCreateCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 03:01:59' prior: 50918265!
add: quantityToAdd of: anIsbn to: cartId

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'quantity'.quantityToAdd.},
		{'isbn'.anIsbn },
		{'cartId'.cartId }.		
	endpoint := '/addToCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 03:03:43' prior: 50917900!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.

			request send200Response: 
				(WebUtils jsonEncode: (tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:04:24'!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !

!methodRemoval: TusLibrosClientStoreWindowModel #sendCreateCartRequest stamp: 'JN 7/8/2021 03:04:31'!
sendCreateCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 03:07:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 03:07:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:07:25'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 03:08:27' prior: 50918361!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.

			request send200Response: 
				(WebUtils jsonEncode: (tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:09:07' prior: 50918412!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			"self triggerEvent: #addItemFailed with: self."
			self error: 'a'.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:09:34' prior: 50918620!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			"self triggerEvent: #addItemFailed with: self."
			self error: anError messageText .
		].
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 03:11:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:11:35'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 03:12:07' prior: 50905822!
add: anAmount of: aBook toCartIdentifiedAs: aCartId
	self halt.
	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ]! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 03:14:26' prior: 50918775!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ]! !
!Cart methodsFor: 'adding' stamp: 'JN 7/8/2021 03:15:55' prior: 50905223!
add: aQuantity of: anItem

	| a |
	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity .
	a := 1 + 1! !
!Cart methodsFor: 'adding' stamp: 'JN 7/8/2021 03:16:40' prior: 50918796!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 03:17:39' prior: 50917880!
listParsedCartIdentifiedAs: aCartId
	
	| listOfIsbns |
	listOfIsbns := self listCartIdentifiedAs: aCartId.
	listOfIsbns := listOfIsbns collect: [:isbn | (isbn , ' - ' ,(catalog at: isbn) key)].
	^listOfIsbns asArray.! !

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:17:47'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:17:47'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 03:18:04' prior: 50917676!
test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN , ' - ' , testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN , ' - ' , testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2
! !

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:18:07'!
PASSED!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:20:29' prior: 50918636!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:21:42' prior: 50910774!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #reloadCart to: self.	! !

!classRenamed: #TusLibrosClientAuthenticationErrorWindow as: #TusLibrosClientErrorWindow stamp: 'JN 7/8/2021 03:22:22'!
Smalltalk renameClassNamed: #TusLibrosClientAuthenticationErrorWindow as: #TusLibrosClientErrorWindow!
!TusLibrosClientLogInWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:22:22' prior: 50909865!
showAuthenticationError 

	TusLibrosClientErrorWindow openWith: self model errorMessage! !
!TusLibrosClientLogInWindow methodsFor: 'initialization' stamp: 'JN 7/8/2021 03:22:52'!
showError 

	TusLibrosClientErrorWindow openWith: self model errorMessage! !
!TusLibrosClientLogInWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:22:52' prior: 50909764!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientLogInWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #authenticationFailed send: #showError to: self.	
	self model when: #successfullLogIn send: #showHome to: self.	
! !

!methodRemoval: TusLibrosClientLogInWindow #showAuthenticationError stamp: 'JN 7/8/2021 03:22:52'!
showAuthenticationError 

	TusLibrosClientErrorWindow openWith: self model errorMessage!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:23:08'!
showError 

	TusLibrosClientErrorWindow openWith: self model errorMessage! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:25:27' prior: 50918867!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:25:52' prior: 50918297!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := restInterface listCart: 1.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:27:24' prior: 50918961!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	self loadCart: aCartId.

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:27:40'!
loadCart: aCartId
	cart := restInterface listCart: aCartId

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:27:41' prior: 50918985!
loadCart: aCartId

	cart := restInterface listCart: aCartId

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:27:57' prior: 50918946!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self loadCart: cartId.
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:28:39' prior: 50918997!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self loadCart: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:31:18' prior: 50916885!
buildCartColumn

	| cartColumnMorph cartListMorphh |
	
	cartListMorphh := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex.
	cartListMorphh  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
		
	cartColumnMorph := LayoutMorph newColumn.
	cartColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: cartListMorphh.

	
	cartColumnMorph layoutSpec fixedWidth: 390.
		
	^cartColumnMorph.
	! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 03:31:26'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: 'quantityTextBoxMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:31:25' prior: 50919029!
buildCartColumn

	| cartColumnMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
		
	cartColumnMorph := LayoutMorph newColumn.
	cartColumnMorph separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: cartListMorph.

	
	cartColumnMorph layoutSpec fixedWidth: 390.
		
	^cartColumnMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:31:58'!
refreshCart
	
	cartListMorph updateList.
	cartListMorph setSelectionIndex: 0.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:34:17' prior: 50918882!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:36:45' prior: 50919013!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:37:24' prior: 50919073!
refreshCart
	self model loadCart.

	cartListMorph updateList.
	cartListMorph setSelectionIndex: 0.
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:37:33'!
loadCart

	cart := restInterface listCart: cartId

! !

!methodRemoval: TusLibrosClientStoreWindowModel #loadCart: stamp: 'JN 7/8/2021 03:37:39'!
loadCart: aCartId

	cart := restInterface listCart: aCartId

!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:37:45' prior: 50918973!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	self loadCart.

! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:40:08' prior: 50919111!
refreshCart

	cartListMorph updateList.
	cartListMorph setSelectionIndex: 0.
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:40:23' prior: 50919096!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self loadCart.
		self triggerEvent: #successfullAddedItem with: self.

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !

a := TusLibrosClientStoreWindow openFor: 2.!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:43:38' overrides: 16876882!
delete

	self model sendAddToCartRequest! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 03:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 03:47:26'!
PASSED!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:48:06' prior: 50919148!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self halt.
		self loadCart.
		self triggerEvent: #successfullAddedItem with: self.

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !

a delete !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:50:13' prior: 50919129!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 1.
	cartSelectedIndex := 1.
	quantityToAdd := '1'.
	
	self loadCart.

! !

a closeButtonClicked!

TusLibrosClientLogInWindow open !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:53:27' prior: 50919310!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	self loadCart.

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 03:54:07' prior: 50919294!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self loadCart.
		self triggerEvent: #successfullAddedItem with: self.

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !

self closeButtonClicked !

self destroy !

----STARTUP---- (8 July 2021 04:05:59) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


Feature require:  'Morphic-Misc1'.!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Widgets-Extras.pck.st----!

CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

!classDefinition: #ColorExtrasPackage category: 'Color-Extras' stamp: 'Install-Color-Extras 7/8/2021 04:07:36'!
CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

ColorExtrasPackage class
	instanceVariableNames: ''!

!classDefinition: 'ColorExtrasPackage class' category: 'Color-Extras' stamp: 'Install-Color-Extras 7/8/2021 04:07:36'!
ColorExtrasPackage class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Color-Extras.pck.st----!

CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!

!classDefinition: #MorphicMisc1Package category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/8/2021 04:07:37'!
CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!
!MorphicMisc1Package commentStamp: '<historical>' prior: 0!
My purpose in life is to check that any base image methods overridden have not been updated.
See #MorphMisc1Package class>>prePackageInstall!

MorphicMisc1Package class
	instanceVariableNames: ''!

!classDefinition: 'MorphicMisc1Package class' category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/8/2021 04:07:37'!
MorphicMisc1Package class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Misc1/Morphic-Misc1.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Client.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Model.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Server.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Tests.st----!

server := TusLibrosServerRestInterface listeningOn: 8080   !

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Compression.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Sound.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/WebClient.pck.st----!

server := TusLibrosServerRestInterface listeningOn: 8080   
!

TusLibrosClientLogInWindow open!

TusLibrosClientLogInWindow open !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:12:16' prior: 50869228!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	"self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	"! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:14:22'!
checkOut
	self closeButtonClicked ! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:14:53' prior: 50869056!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self  stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:15:18' prior: 50908008!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !

TusLibrosClientLogInWindow open !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:17:19' prior: 50907986!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:17:32' prior: 50869403!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	"self loadCart."

! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:18:09' prior: 50869442!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self triggerEvent: #successfullAddedItem with: self.

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			self triggerEvent: #addItemFailed with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 04:18:28' prior: 50908078!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		"self triggerEvent: #successfullAddedItem with: self."

	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'.
			"self triggerEvent: #addItemFailed with: self."
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:13:52' prior: 50908049!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	"self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	"! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:14:50' prior: 50908028!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:15:17' prior: 50908125!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !

----STARTUP---- (8 July 2021 11:15:56) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Compression.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Sound.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/WebClient.pck.st----!

Feature require:  'Morphic-Misc1'.!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Widgets-Extras.pck.st----!

CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

!classDefinition: #ColorExtrasPackage category: 'Color-Extras' stamp: 'Install-Color-Extras 7/8/2021 11:17:39'!
CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

ColorExtrasPackage class
	instanceVariableNames: ''!

!classDefinition: 'ColorExtrasPackage class' category: 'Color-Extras' stamp: 'Install-Color-Extras 7/8/2021 11:17:39'!
ColorExtrasPackage class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Features/Color-Extras.pck.st----!

CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!

!classDefinition: #MorphicMisc1Package category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/8/2021 11:17:40'!
CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!
!MorphicMisc1Package commentStamp: '<historical>' prior: 0!
My purpose in life is to check that any base image methods overridden have not been updated.
See #MorphMisc1Package class>>prePackageInstall!

MorphicMisc1Package class
	instanceVariableNames: ''!

!classDefinition: 'MorphicMisc1Package class' category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 7/8/2021 11:17:40'!
MorphicMisc1Package class
	instanceVariableNames: ''!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/Morphic/Morphic-Misc1/Morphic-Misc1.pck.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Client.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Model.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Server.st----!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/TusLibros-Tests.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 11:21:04'!
PASSED!

----QUIT----(8 July 2021 11:22:31) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (8 July 2021 11:22:37) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


----QUIT----(8 July 2021 11:22:57) CuisUniversity-4532.image priorSource: 18446437!

----STARTUP---- (8 July 2021 11:23:00) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:24:50' prior: 50905707!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !

!classRenamed: #TusLibrosClientStoreWindow as: #TusLibrosClientStoreeWindow stamp: 'JN 7/8/2021 11:25:53'!
Smalltalk renameClassNamed: #TusLibrosClientStoreWindow as: #TusLibrosClientStoreeWindow!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:25:53' prior: 50905377!
showStore

	TusLibrosClientStoreeWindow openFor: self model cartId.
! !

----STARTUP---- (8 July 2021 11:26:37) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!classRenamed: #TusLibrosClientStoreWindow as: #TusLibrosClientStore2Window stamp: 'JN 7/8/2021 11:28:29'!
Smalltalk renameClassNamed: #TusLibrosClientStoreWindow as: #TusLibrosClientStore2Window!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:28:29' prior: 50905377!
showStore

	TusLibrosClientStore2Window openFor: self model cartId.
! !

!classRenamed: #TusLibrosClientStoreWindowModel as: #TusLibrosClientStore2WindowModel stamp: 'JN 7/8/2021 11:28:38'!
Smalltalk renameClassNamed: #TusLibrosClientStoreWindowModel as: #TusLibrosClientStore2WindowModel!
!TusLibrosClientStore2Window methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:28:38' prior: 50905879!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStore2WindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	
	self model when: #addToCartFailed send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:28:54'!
Object subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:28:50' prior: 50908122!
showStore

	TusLibrosClientStoreWindow openFor: self model cartId.
! !

Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:29:03'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow class methodsFor: 'no messages' stamp: 'JN 7/8/2021 11:29:21'!
openFor: aCartId
	
	^self new initializeWith: 'Tus Libros - Store' and: aCartId.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:29:53'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'no messages' stamp: 'JN 7/8/2021 11:29:49'!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	! !
!TusLibrosClientStoreWindowModel class methodsFor: 'no messages' stamp: 'JN 7/8/2021 11:30:05'!
for: aCartId 

	^self new initializeWith: aCartId.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:46'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:47'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:48'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:49'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:50'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:30:51'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex quantityToAdd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'no messages' stamp: 'JN 7/8/2021 11:30:44'!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	"catalog := restInterface listCatalog."
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	"self loadCart."
! !

TusLibrosClientLogInWindow open!

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:31:57' overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:32:19'!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:32:46' overrides: 50902098!
defaultExtent

	^ 1135@485
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:33:01'!
goHome

	self closeButtonClicked.

	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:33:53' prior: 50908281 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:34:15'!
buildCatalogAndCartLabelsRow

	| catalogAndCartLabelColumnsLayoutMorph |
	
	catalogAndCartLabelColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartLabelColumnsLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogLabelColumn;
	addMorph: self buildCartLabelColumn.

	^catalogAndCartLabelColumnsLayoutMorph.
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:34:29'!
buildCartLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:34:41'!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.! !
!TusLibrosClientStore2Window methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:35:51' prior: 50905852 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow ;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !
!TusLibrosClientStore2Window methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:36:07' prior: 50908363 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogAndCartLabelsRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCatalogAndCartActionsRow;
	addMorph: self buildButtonsRow.
! !

!methodRemoval: TusLibrosClientStoreWindow #buildButtonsRow stamp: 'JN 7/8/2021 11:36:47'!
buildButtonsRow

	| buttonsRowLayoutMorph goHomeButtonMorph checkOutButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOut  label: 'Check Out'.
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph;
	addMorph: checkOutButtonMorph.	
	^buttonsRowLayoutMorph.!

!methodRemoval: TusLibrosClientStoreWindow #buildCartLabelColumn stamp: 'JN 7/8/2021 11:36:52'!
buildCartLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').
	^labelRowLayoutMorph.!

!methodRemoval: TusLibrosClientStoreWindow #buildCatalogAndCartLabelsRow stamp: 'JN 7/8/2021 11:36:57'!
buildCatalogAndCartLabelsRow

	| catalogAndCartLabelColumnsLayoutMorph |
	
	catalogAndCartLabelColumnsLayoutMorph := LayoutMorph newRow.
	catalogAndCartLabelColumnsLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogLabelColumn;
	addMorph: self buildCartLabelColumn.

	^catalogAndCartLabelColumnsLayoutMorph.
	!

!methodRemoval: TusLibrosClientStoreWindow #buildCatalogLabelColumn stamp: 'JN 7/8/2021 11:37:11'!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:37:36' prior: 50908318 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: (LabelMorph contents:'sgfsdgsfsd').
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:37:58' prior: 50908440 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: (LabelMorph contents:'sgfsdgsfsd').
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:39:04' prior: 50908450 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: (LabelMorph contents:'sgfsdgsfsd').
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:39:31'!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newRow.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:39:47' prior: 50908469!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newColumn.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:41:15'!
buildCatalogColumn

	| catalogColumnLayoutMorph |

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^catalogColumnLayoutMorph.! !

!methodRemoval: TusLibrosClientStoreWindow #buildCatalogLabelColumn stamp: 'JN 7/8/2021 11:41:22'!
buildCatalogLabelColumn

	| labelRowLayoutMorph |
	
	labelRowLayoutMorph := LayoutMorph newColumn.
	labelRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog').
	^labelRowLayoutMorph.!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:41:47' prior: 50908490!
buildCatalogColumn

	| catalogColumnLayoutMorph |

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildCatalogActions.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:42:10' prior: 50908512!
buildCatalogColumn

	| catalogColumnLayoutMorph |

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildCatalogActionsRow.
	^catalogColumnLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:42:28'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: 'quantityTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:42:27'!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:42:50'!
quantityToAddText
	
	^quantityToAdd.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:43:01'!
quantityToAddText: aQuantity
	
	quantityToAdd := aQuantity.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:43:52' prior: 50908525!
buildCatalogColumn

	| catalogColumnLayoutMorph |

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 0;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildCatalogActionsRow.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:44:02' prior: 50908546!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 0;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:44:21' prior: 50908599!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:44:26' prior: 50908586!
buildCatalogColumn

	| catalogColumnLayoutMorph |

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildCatalogActionsRow.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:45:37' prior: 50908657!
buildCatalogColumn

	| catalogColumnLayoutMorph goHomeButtonMorph |

	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildCatalogActionsRow;
	addMorph: goHomeButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:46:39'!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Check Out'.

	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:46:59' prior: 50908460 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn .
! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:48:42'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: 'quantityTextBoxMorph catalogListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:48:49' prior: 50908670!
buildCatalogColumn

	| catalogColumnLayoutMorph goHomeButtonMorph |

	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #itemsListIndex indexSetter: #itemsListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogActionsRow;
	addMorph: goHomeButtonMorph.
	^catalogColumnLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:49:07'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex quantityToAdd catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:49:05'!
catalog
	
	^catalog.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:49:19' prior: 50908266!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
	"self loadCart."
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:49:37'!
itemsListIndex
	
	^catalogSelectedIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:49:48'!
itemsListIndex: anIndex
	
	catalogSelectedIndex := anIndex.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:50:42' prior: 50908628!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:50:45' prior: 50908786!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:51:05' prior: 50908815!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:51:53'!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		

	]	
		on: Error 
		do: [ :anError |
		].
	! !

!classDefinition: #TusLibrosClientStoreWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 11:53:42'!
Panel subclass: #TusLibrosClientStoreWindow
	instanceVariableNames: 'quantityTextBoxMorph catalogListMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:53:37' prior: 50908687!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:54:07'!
cart
	
	^cart.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:54:17'!
cartListIndex
	
	^cartSelectedIndex.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:54:28'!
cartListIndex: anIndex
	
	cartSelectedIndex := anIndex.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:56:15' prior: 50908843!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	morphHeight: 200;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:56:24' prior: 50908930!
buildCatalogActionsRow

	| addToCartButton buttonsRowLayoutMorph |
	
	addToCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendAddToCartRequest  label: 'Add To Cart'.
	quantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #quantityToAddText textSetter: #quantityToAddText:. 
	quantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityTextBoxMorph textMorph acceptContents ] .
	quantityTextBoxMorph  morphHeight: 30; borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50. 
	
	
	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	morphHeight: 100;
	addMorph: (LabelMorph contents:'Quantity:');
	addMorph: quantityTextBoxMorph;
	addMorph: addToCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:57:28' prior: 50908763!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:58:12' prior: 50908872!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self refreshCart.
	]	
		on: Error 
		do: [ :anError |
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 11:59:32'!
refreshCart

	cart := restInterface listCart: cartId.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:00:18'!
refreshCart

	cartListMorph updateList.
	cartListMorph setSelectionIndex: 0.
	

	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:00:37' prior: 50908192!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #successfullAddedItem send: #refreshCart to: self.	
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:00:59' prior: 50909002!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self refreshCart.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
		].
	! !

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/WordsClientDemo.st----!

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 12:04:20'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex quantityToAdd catalog errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:04:19' prior: 50909039!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self refreshCart.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:04:39' prior: 50909024!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	

	self model when: #successfullAddedItem send: #refreshCart to: self.	
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:04:50'!
showError 

	TusLibrosClientErrorWindow openWith: self model errorMessage

	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:05:12' prior: 50908990!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	errorMessage := ''.
	
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:05:44'!
errorMessage

	^errorMessage! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:06:05' prior: 50909306!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		self refreshCart.
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:06:51' prior: 50909361!
sendAddToCartRequest
	[ | isbn | 
		isbn := (catalog at: catalogSelectedIndex) substrings first.
		restInterface add: quantityToAdd of: isbn to: cartId.
		"self refreshCart."
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText. 
			self triggerEvent: #throwError with: self.
		].
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:09:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:09:31'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 12:10:20' prior: 50907786!
test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN , ' - ' , testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN , ' - ' , testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2.
		
	self assert: cartContent size equals: 3.
! !

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:10:21'!
PASSED!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/2021-1c/20-TusLibros/Iteracion 4/StringsServicesServer.st----!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:15:19' prior: 50909376!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: cartId.
		"self refreshCart."
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 12:16:30' prior: 50905607!
add: quantityToAdd of: anItem to: cartId

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'quantity'.quantityToAdd.},
		{'isbn'.anItem substrings first },
		{'cartId'.cartId }.		
	endpoint := '/addToCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 12:19:15' prior: 50906947!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 12:20:39' prior: 50909761!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: true.
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:20:59' prior: 50909321!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	
	self model when: #successfullAddedItem send: #refreshCart to: self.	
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:21:13' prior: 50909730!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: 3.
		"self refreshCart."
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := anError messageText. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:22:08' prior: 50909883!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: 3.
		"self refreshCart."
		"self triggerEvent: #successfullAddedItem with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:22:14' prior: 50909898!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: 3.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:22:17' prior: 50909913!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: cartId.
		self triggerEvent: #successfullAddedItem with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:22:29' prior: 50908915!
cart
	self refreshCart.
	^cart.
! !

!classRemoval: #TusLibrosClientStore2Window stamp: 'JN 7/8/2021 12:23:39'!
Panel subclass: #TusLibrosClientStore2Window
	instanceVariableNames: 'quantityTextBoxMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classRemoval: #TusLibrosClientStore2WindowModel stamp: 'JN 7/8/2021 12:23:44'!
Object subclass: #TusLibrosClientStore2WindowModel
	instanceVariableNames: 'cartId restInterface catalog catalogSelectedIndex quantityToAdd cartSelectedIndex cart errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:28:31'!
test10CartCanRemoveOneItemAndPreservesOthersItems

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cart remove: testObjectsFactory itemSellByTheStore 
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:30:02'!
test09CartCanNotRemoveUnexistentItem

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cart remove: 'invalid Item'. 
	
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2.
! !
!Cart methodsFor: 'testing' stamp: 'JN 7/8/2021 12:31:15'!
numberOfItems

	^items size. ! !
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:31:35' prior: 50909975!
test09CartCanNotRemoveUnexistentItem

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cart remove: 'invalid Item'. 
	
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2.
	self assert: cart numberOfItems equals: 2.
! !

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:31:38'!
ERROR!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:31:38'!
ERROR!
!Cart methodsFor: 'removing' stamp: 'JN 7/8/2021 12:32:01'!
remove: aString 
	self shouldBeImplemented.! !

a:=Bag new.!

a add: 1!

a add: 1!

a add: 1!

a add: 2!

a!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Packages/TerseGuide.pck.st----!

a  remove: 1 ifAbsent: [].!

a!

a remove: 3!
!Cart methodsFor: 'removing' stamp: 'JN 7/8/2021 12:36:25' prior: 50910008!
remove: anIsbn
	self error: self canNotRemoveItemNotAdded! !
!Cart methodsFor: 'removing' stamp: 'JN 7/8/2021 12:37:16' prior: 50912942!
remove: anIsbn

	self signalInvalidItem. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:37:22'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:37:22'!
ERROR!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:37:22'!
ERROR!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:37:27'!
ERROR!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:37:27'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:38:52' prior: 50909990!
test09CartCanNotRemoveUnexistentItem

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	self 
		should: [	cart remove: 'invalid Item'. ] 
	 	raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: cart invalidItemErrorMessage equals: anError messageText.
			self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2.
			self assert: cart numberOfItems equals: 2.
			]
	
	
! !

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:38:54'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:40:07' prior: 50909963!
test10CartCanRemoveOneItemAndPreservesOthersItems

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	cart remove: testObjectsFactory itemSellByTheStore.
	
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 1.
	self assert: (cart occurrencesOf: testObjectsFactory anotherItemSellByTheStore) = 1.
	self assert: cart numberOfItems equals: 3.! !

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:40:09'!
ERROR!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:40:09'!
ERROR!
!Cart methodsFor: 'removing' stamp: 'JN 7/8/2021 12:41:04' prior: 50912947!
remove: anIsbn
	
	items remove: anIsbn ifAbsent: [ self signalInvalidItem. ].
	 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:41:10'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:41:10'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:41:10'!
FAILURE!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:41:16'!
FAILURE!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:41:16'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'JN 7/8/2021 12:42:06' prior: 50913010!
test10CartCanRemoveOneItemAndPreservesOthersItems

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	cart remove: testObjectsFactory itemSellByTheStore.
	
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 1.
	self assert: (cart occurrencesOf: testObjectsFactory anotherItemSellByTheStore) = 2.
	self assert: cart numberOfItems equals: 3.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 12:42:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:42:10'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 12:45:48'!
test22CanRemoveAddedItemToCart

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	
	systemFacade remove: anotherValidBookISBN fromCartIdentifiedAd: cartId.
	
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	
		
	self assert: cartContent size equals: 3.
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 12:46:53' prior: 50913330!
test22CanRemoveAddedItemToCart

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	
	systemFacade remove: anotherValidBookISBN fromCartIdentifiedAd: cartId.
	
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: validBookISBN) equals: 1.
	self assert: (cartContent occurrencesOf: anotherValidBookISBN) equals: 1.
	self assert: cartContent size equals: 2.
! !

!testRun: #TusLibrosSystemFacadeTest #test22CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 12:46:55'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test22CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 12:46:55'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:47:09'!
remove: aString fromCartIdentifiedAd: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:48:05' prior: 50913389!
remove: aBook fromCartIdentifiedAd: aCartId 
	
	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession removeFromCart: aBook ]! !
!CartSession methodsFor: 'cart' stamp: 'JN 7/8/2021 12:48:24'!
 removeFromCart: aBook

	^cart remove: aBook! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 12:48:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 12:48:29'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 12:49:14' prior: 50909815!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: true.
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: true.
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 12:49:57'!
remove: anItem from: cartId

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'isbn'.anItem substrings first },
		{'cartId'.cartId }.		
	endpoint := '/addToCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:50:24' prior: 50908892!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:51:28'!
buildCartActionsRow

	| removeFromCartButton buttonsRowLayoutMorph |
	
	removeFromCartButton := PluggableButtonMorph model: self model stateGetter: nil action: #sendRemoveFromCartRequest  label: 'Remove'.

	
	buttonsRowLayoutMorph := LayoutMorph newRow.
	buttonsRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	morphHeight: 100;
	addMorph: removeFromCartButton.

	^buttonsRowLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:52:33'!
sendRemoveFromCartRequest

	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface remove: item from: cartId .
		self triggerEvent: #refreshCart with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:52:39' prior: 50913658!
sendRemoveFromCartRequest

	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface remove: item from: cartId .
		self triggerEvent: #refreshCart with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Remove Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:52:45' prior: 50909927!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: cartId.
		self triggerEvent: #refreshCart with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:52:51' prior: 50909866!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	
	self model when: #refreshCart send: #refreshCart to: self.	
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 12:53:31' prior: 50913602!
remove: anItem from: cartId

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'isbn'.anItem substrings first },
		{'cartId'.cartId }.		
	endpoint := '/removeFromCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 12:54:10' prior: 50913541!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: true.
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: true.
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 12:55:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 12:55:42'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 12:56:22' prior: 50913732!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId | 
			cartId := (request fields at: 'cartId') asNumber .
			request send200Response: (WebUtils jsonEncode: (tusLibros listParsedCartIdentifiedAs: cartId)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

a add: 1!

a:= Bag new.!

a add: 1!

a add: 1!

a add: 1!

a add: 2!

a!

a remove: 1!

a remove: 1!

a remove: 1!

a remove: 1!

a!

a remove: 2!

a!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 12:59:29' prior: 50913672!
sendRemoveFromCartRequest

	[ | item | 
		item := (cart at: cartSelectedIndex).
		restInterface remove: item from: cartId .
		self triggerEvent: #refreshCart with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Remove Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 13:41:58'!
test21CanRemoveAddedItemToCart

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	
	systemFacade remove: anotherValidBookISBN fromCartIdentifiedAd: cartId.
	
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: validBookISBN) equals: 1.
	self assert: (cartContent occurrencesOf: anotherValidBookISBN) equals: 1.
	self assert: cartContent size equals: 2.
! !

!methodRemoval: TusLibrosSystemFacadeTest #test22CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 13:42:03'!
test22CanRemoveAddedItemToCart

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	
	systemFacade remove: anotherValidBookISBN fromCartIdentifiedAd: cartId.
	
	cartContent := systemFacade listCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: validBookISBN) equals: 1.
	self assert: (cartContent occurrencesOf: anotherValidBookISBN) equals: 1.
	self assert: cartContent size equals: 2.
!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'JN 7/8/2021 13:42:41'!
DELETEtest21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN , ' - ' , testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN , ' - ' , testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2.
		
	self assert: cartContent size equals: 3.
! !

!methodRemoval: TusLibrosSystemFacadeTest #test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 13:42:41'!
test21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN , ' - ' , testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN , ' - ' , testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2.
		
	self assert: cartContent size equals: 3.
!

!methodRemoval: TusLibrosSystemFacade #listParsedCartIdentifiedAs: stamp: 'JN 7/8/2021 13:43:29'!
listParsedCartIdentifiedAs: aCartId
	
	| listOfIsbns |
	listOfIsbns := self listCartIdentifiedAs: aCartId.
	listOfIsbns := listOfIsbns collect: [:isbn | (isbn , ' - ' ,(catalog at: isbn) key)].
	^listOfIsbns asArray.!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 13:43:33'!
listParsedCartIdentifiedAs: aCartId
! !

!methodRemoval: TusLibrosSystemFacade #listParsedCartIdentifiedAs: stamp: 'JN 7/8/2021 13:43:38'!
listParsedCartIdentifiedAs: aCartId
!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:45:01' prior: 50913930!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (tusLibros listCatalog )) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:46:29'!
parseItems: items

		
	| catalog |
	catalog := self listCatalog.
	^(items collect: [:isbn | (isbn , ' - ' ,(catalog at: isbn) key)]) asArray.
! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:46:54' prior: 50914151!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:47:11'!
listCatalog

	^ tusLibros listCatalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 13:47:17'!
PASSED!

!methodRemoval: TusLibrosSystemFacadeTest #DELETEtest21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted stamp: 'JN 7/8/2021 13:47:25'!
DELETEtest21ListCartParsedReturnsTheRightNumberOfItemsWithTitlesFormatted

	| cartId cartContent anotherValidBookISBN validBookISBN |
	validBookISBN := testObjectsFactory itemSellByTheStore.
	anotherValidBookISBN := testObjectsFactory anotherItemSellByTheStore.

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: validBookISBN toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: anotherValidBookISBN toCartIdentifiedAs: cartId.
	cartContent := systemFacade listParsedCartIdentifiedAs: cartId.
	 
	self assert: (cartContent occurrencesOf: (validBookISBN , ' - ' , testObjectsFactory itemSellByTheStoreTitle)) equals: 1.
	self assert: (cartContent occurrencesOf: 
		(anotherValidBookISBN , ' - ' , testObjectsFactory anotherItemSellByTheStoreTitle )) equals: 2.
		
	self assert: cartContent size equals: 3.
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 13:47:29'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 13:51:37' prior: 50913686!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: cartId.
		"self triggerEvent: #refreshCart with: self."
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 13:51:49' prior: 50914585!
sendAddToCartRequest
	[ | item | 
		item := (catalog at: catalogSelectedIndex).
		restInterface add: quantityToAdd of: item to: cartId.
		self triggerEvent: #refreshCart with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Add Item To Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !

TusLibrosClientRest new listCart: 1!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:55:01' prior: 50914223!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

TusLibrosClientRest new listCart: 1!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 13:56:25' prior: 50906824!
listCatalog
	
	^catalog! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:57:02' prior: 50914614!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:57:31'!
listParsedCatalog

	| parsedCatalog |
	
	parsedCatalog := OrderedCollection new.
	(self listCatalog) keysAndValuesDo: [:isbn :item | 
		parsedCatalog add: ( isbn , ' - ' , item key , ' - $' , item value asString)].

	^parsedCatalog asArray.! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 13:58:47' prior: 50914684!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	! !

TusLibrosClientRest new listCart: 1!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:00:36' prior: 50914215!
parseItems: items

		
	| catalog parsedItems |
	catalog := self listCatalog.
	parsedItems := OrderedCollection new.
	parsedItems := items collect: [:isbn | (isbn , ' - ' ,(catalog at: isbn) key)].
	^parsedItems asArray.
! !

TusLibrosClientRest new listCart: 1!


testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	a := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock.!

TusLibrosServerRestInterface new!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:20:55' prior: 50914761!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (self parseTicket: ticket)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:22:17'!
checkOutCart: cartId forUser: user

	| cardNumber cardOwner expirationDate |
	^ tusLibros checkOutCartIdentifiedAs: cartId 
				withCreditCardNumbered: cardNumber 
				ownedBy:  cardOwner
				expiringOn: expirationDate.
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 14:25:05'!
test22CanNotCheckoutWithAnUserWithInvalidCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId forUser: self validUserWithInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/8/2021 14:26:58' prior: 50907033!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		at: self validUserInvalidCard put: self validUserPassword;
		yourself! !
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/8/2021 14:27:07'!
validUserInvalidCard

	^'validUserInvalidCard'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JN 7/8/2021 14:28:49' prior: 50907575!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		at: self validUserInvalidCard put: self validUserPassword;
		yourself! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JN 7/8/2021 14:29:05'!
validUserInvalidCard

	^'validUserInvalidCard'! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 14:29:50' prior: 50914941!
test22CanNotCheckoutWithAnUserWithInvalidCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId forUser: self validUserInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:29:55'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:29:55'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:30:08'!
checkOutCartIdentifiedAs: aSmallInteger forUser: aString 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 14:31:05' prior: 50915021!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	| aCreditCartNumber anExpirationMonthOfYear anOwner |
	^ self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear 
	
	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 14:31:23' prior: 50915027!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	| aCreditCartNumber anExpirationMonthOfYear anOwner |
	self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear 
	
	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 14:33:16' prior: 50915038!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	
	
	self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: '123' ownedBy: 'juan' expiringOn: (DateAndTime now). 
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 14:33:23'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:33:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:33:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:33:24'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 14:36:01' prior: 50907705!
test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted

	| catalog |
	catalog := systemFacade listCatalog.

	self assert: (catalog at: testObjectsFactory itemSellByTheStore) equals: 
		(testObjectsFactory itemSellByTheStoreTitle -> testObjectsFactory itemSellByTheStorePrice).
	
	self assert: (catalog at: testObjectsFactory anotherItemSellByTheStore) equals: 
		(testObjectsFactory anotherItemSellByTheStoreTitle -> testObjectsFactory anotherItemSellByTheStorePrice).
	
		
	self assert: catalog size equals: 2.	! !

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:36:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:36:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:36:05'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:36:05'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 14:36:55' prior: 50915049!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	
	
	| today |
	self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: '123' ownedBy: 'juan' expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	
	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 14:37:27' prior: 50915301!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	
	
	| today |
	today := DateAndTime now.
	self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: '123' ownedBy: 'juan' expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:37:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:37:30'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 14:37:56'!
test22CanCheckoutWithAnUserWithValidCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId forUser: self validUserInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 14:38:33'!
test23CanNotCheckoutWithAnUserWithInvalidCreditCard

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade checkOutCartIdentifiedAs: cartId forUser: self validUser.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.

		! !

!methodRemoval: TusLibrosSystemFacadeTest #test22CanCheckoutWithAnUserWithValidCreditCard stamp: 'JN 7/8/2021 14:38:44'!
test22CanCheckoutWithAnUserWithValidCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId forUser: self validUserInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		!

!testRun: #TusLibrosSystemFacadeTest #test23CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:38:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test23CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:38:46'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test23CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:40:34'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test23CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:40:34'!
ERROR!

!methodRemoval: TusLibrosSystemFacade #checkOutCartIdentifiedAs:forUser: stamp: 'JN 7/8/2021 14:41:15'!
checkOutCartIdentifiedAs: aCartId forUser: aUser

	
	
	| today |
	today := DateAndTime now.
	self checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: '123' ownedBy: 'juan' expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	
	!

!methodRemoval: TusLibrosSystemFacadeTest #test23CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:41:23'!
test23CanNotCheckoutWithAnUserWithInvalidCreditCard

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade checkOutCartIdentifiedAs: cartId forUser: self validUser.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.

		!

!methodRemoval: TusLibrosSystemFacadeTest #test22CanNotCheckoutWithAnUserWithInvalidCreditCard stamp: 'JN 7/8/2021 14:41:27'!
test22CanNotCheckoutWithAnUserWithInvalidCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId forUser: self validUserInvalidCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:41:29'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:43:10' prior: 50914931!
checkOutCart: cartId forUser: user

	| card |
	card := (self usersCards) at: user.
	^ tusLibros checkOutCartIdentifiedAs: cartId 
				withCreditCardNumbered: card key 
				ownedBy:  user
				expiringOn: card value.
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:45:18'!
usersCards
	| usersCards |
	usersCards := Dictionary new.
	usersCards add: self validUser -> (self validCardNumber -> self validCardExpiration).
	usersCards add: self validUserInvalidCard -> (self validCardNumber -> self invalidCardExpiration).
	^usersCards.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:46:56' prior: 50914855!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (self parseTicket: ticket)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:47:35' prior: 50915865!
usersCards
	| usersCards test testObjects |
	usersCards := Dictionary new.
	testObjects := test.
	usersCards add: self validUser -> (self validCardNumber -> self validCardExpiration).
	usersCards add: self validUserInvalidCard -> (self validCardNumber -> self invalidCardExpiration).
	^usersCards.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:49:07' prior: 50915954!
usersCards
	| usersCards testObjects |
	usersCards := Dictionary new.
	testObjects := StoreTestObjectsFactory new .
	usersCards add: self validUser -> testObjects notExpiredCreditCard.
	usersCards add: self validUserInvalidCard -> testObjects expiredCreditCard .
	^usersCards.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 14:51:57' prior: 50915967!
usersCards
	| usersCards testObjects |
	usersCards := Dictionary new.
	testObjects := StoreTestObjectsFactory new .
	usersCards add: self validUser -> (testObjects notExpiredCreditCardNumber -> testObjects notExpiredMonthOfYear).
	usersCards add: self validUserInvalidCard -> (testObjects notExpiredCreditCardNumber -> testObjects expiredMonthOfYear ).
	^usersCards.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 14:52:15'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:53:31' prior: 50913618!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCart  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 14:54:28'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex quantityToAdd catalog errorMessage user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:54:26'!
sendCheckOutCartRequest
	[  
		restInterface checkOutCart: cartId forUser: user
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel class methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:55:47'!
for: aCartId and: user

	^self new initializeWith: aCartId and: user.! !

!methodRemoval: TusLibrosClientStoreWindowModel class #for: stamp: 'JN 7/8/2021 14:55:54'!
for: aCartId 

	^self new initializeWith: aCartId.!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:56:23'!
initializeWith: aCartId and: aUser

	cartId := aCartId.
	user := aUser.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	errorMessage := ''.
	
! !

!methodRemoval: TusLibrosClientStoreWindowModel #initializeWith: stamp: 'JN 7/8/2021 14:56:28'!
initializeWith: aCartId

	cartId := aCartId.
	restInterface := TusLibrosClientRest new.
	catalog := restInterface listCatalog.
	cart := OrderedCollection new.
	catalogSelectedIndex := 0.
	cartSelectedIndex := 0.
	quantityToAdd := '1'.
	errorMessage := ''.
	
!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:57:00'!
initializeWith: aTitle andCart: aCartId andUser: aUser

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId and: aUser).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	
	self model when: #refreshCart send: #refreshCart to: self.	
	! !

!methodRemoval: TusLibrosClientStoreWindow #initializeWith:and: stamp: 'JN 7/8/2021 14:57:05'!
initializeWith: aTitle and: aCartId

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	
	self model when: #refreshCart send: #refreshCart to: self.	
	!
!TusLibrosClientStoreWindow class methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:57:39'!
openFor: aCartId and: aUser
	
	^self new initializeWith: 'Tus Libros - Store' andCart: aCartId andUser: aUser.! !

!methodRemoval: TusLibrosClientStoreWindow class #openFor: stamp: 'JN 7/8/2021 14:57:43'!
openFor: aCartId
	
	^self new initializeWith: 'Tus Libros - Store' and: aCartId.!
!TusLibrosClientHomeWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:58:01' prior: 50908160!
showStore

	TusLibrosClientStoreWindow openFor: self model cartId and: self model user.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:58:29' prior: 50916128!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCheckOutCartRequest  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 14:58:50' prior: 50916164!
sendCheckOutCartRequest
	[  
		restInterface checkOutCart: cartId forUser: user
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 15:00:50'!
checkOutCart: aCartId for: anUser

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.anUser.},
		{'cartId'.aCartId}.		
	endpoint := '/checkOutCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 15:01:31'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:03:41' prior: 50915877!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:04:58' prior: 50915855!
checkOutCart: cartId forUser: user

	| card |
	card := (self usersCards) at: user ifAbsent: [ self error: 'Invalid Card'].
	^ tusLibros checkOutCartIdentifiedAs: cartId 
				withCreditCardNumbered: card key 
				ownedBy:  user
				expiringOn: card value.
	! !

usersCards := Dictionary new.
	testObjects := StoreTestObjectsFactory new .
	usersCards add: self validUser -> (testObjects notExpiredCreditCardNumber -> testObjects notExpiredMonthOfYear).
	usersCards add: self validUserInvalidCard -> (testObjects notExpiredCreditCardNumber -> testObjects expiredMonthOfYear ).
	!


usersCards := Dictionary new.
	testObjects := StoreTestObjectsFactory new .
	usersCards add: 'a' -> (testObjects notExpiredCreditCardNumber -> testObjects notExpiredMonthOfYear).
	usersCards add: 'b' -> (testObjects notExpiredCreditCardNumber -> testObjects expiredMonthOfYear ).!

	usersCards!

	usersCards at: 'b'!

	c := usersCards at: 'b'!

	c!

	c key!

	c value!

	c := usersCards at: 'd'!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:08:50' prior: 50916445!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			"ticket := self checkOutCart: cartId forUser: user."
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:09:33' prior: 50916555!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:12:10' prior: 50916633!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user | 
			cartId := (request fields at: 'cartId').
			user := (request fields at: 'user').
			self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:12:17' prior: 50916521!
checkOutCart: cartId forUser: user

	| card |
	card := (self usersCards) at: user ifAbsent: [ self error: 'Invalid Card'].
	tusLibros checkOutCartIdentifiedAs: cartId 
				withCreditCardNumbered: card key 
				ownedBy:  user
				expiringOn: card value.
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:30:41'!
test23CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:30:55'!
test21CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
! !

!methodRemoval: TusLibrosSystemFacadeTest #test23CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:30:55'!
test23CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:31:08'!
test22CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
! !

!methodRemoval: TusLibrosSystemFacadeTest #test21CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:31:08'!
test21CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:31:10'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JN 7/8/2021 15:31:53' prior: 50906790!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear
	| ticket |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ticket := cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ].

	^ticket! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 15:31:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 15:31:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:31:57'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:33:12' prior: 50916872!
test22CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
	self assert: ticket size equals: 2
! !

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:33:14'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:33:14'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:36:06' prior: 50917072!
test22CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.

	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
	self assert: ticket size equals: 2
! !

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:36:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:36:09'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:36:47' prior: 50917105!
test22CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.

	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
	self assert: ticket size equals: 2
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:36:49' prior: 50917140!
test22CheckoutACartReturnsTicket

	| cartId purchases ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.

	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
	self assert: ticket size equals: 1
! !

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:36:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:36:51'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:37:37' prior: 50917166!
test22CheckoutACartReturnsTicket

	| cartId ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.

	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	self assert: ticket lineItems includes: 1
! !
!Ticket methodsFor: 'testing' stamp: 'JN 7/8/2021 15:38:06'!
lineItems

	^lineItems! !

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:38:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:38:12'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JN 7/8/2021 15:40:08' prior: 50917199!
test22CheckoutACartReturnsTicket

	| cartId ticket |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 3 of: self anotherValidBook toCartIdentifiedAs: cartId.

	ticket := systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	self assert: ticket lineItems size equals: 2
! !

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:40:10'!
PASSED!

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:42:46' prior: 50916709!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user | 
			cartId := (request fields at: 'cartId') asNumber.
			user := (request fields at: 'user').
			self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:43:50' prior: 50916785!
checkOutCart: cartId forUser: user

	| card |
	card := (self usersCards) at: user ifAbsent: [ self error: 'Invalid Card'].
	^tusLibros checkOutCartIdentifiedAs: cartId 
				withCreditCardNumbered: card key 
				ownedBy:  user
				expiringOn: card value.
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 15:44:03' prior: 50917258!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId') asNumber.
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (true)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !

TusLibrosClientLogInWindow open!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test09CartCanNotRemoveUnexistentItem stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CartTest #test10CartCanRemoveOneItemAndPreservesOthersItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20listCatalogReturnsListOfIsbnTitlesAndPricesFormatted stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21CanRemoveAddedItemToCart stamp: 'JN 7/8/2021 15:45:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test22CheckoutACartReturnsTicket stamp: 'JN 7/8/2021 15:45:13'!
PASSED!
!TusLibrosServerRestInterface methodsFor: 'facade' stamp: 'JN 7/8/2021 15:57:27'!
debit: anAmount from: aCreditCard
! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 15:59:39' prior: 50916288!
sendCheckOutCartRequest
	"["  
		restInterface checkOutCart: cartId forUser: user
	"]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		]."
	! !
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 16:00:01'!
checkOutCart: aCartId forUser: anUser

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.anUser.},
		{'cartId'.aCartId}.		
	endpoint := '/checkOutCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !

!methodRemoval: TusLibrosClientRest #checkOutCart:for: stamp: 'JN 7/8/2021 16:00:05'!
checkOutCart: aCartId for: anUser

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.anUser.},
		{'cartId'.aCartId}.		
	endpoint := '/checkOutCart'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:00:44' prior: 50917569!
sendCheckOutCartRequest
       [  
		restInterface checkOutCart: cartId forUser: user
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:01:21' prior: 50917609!
sendCheckOutCartRequest
       [  
		restInterface checkOutCart: cartId forUser: user.
		self triggerEvent: #showTicket with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:01:41' prior: 50916209!
initializeWith: aTitle andCart: aCartId andUser: aUser

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientStoreWindowModel for: aCartId and: aUser).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
	self model when: #throwError send: #showError to: self.	
	self model when: #refreshCart send: #refreshCart to: self.	
	self model when: #showTicket send: #showTicket to: self.	
! !

!classDefinition: #TusLibrosClientTicketWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:02:11'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:02:02'!
showTicket

	TusLibrosClientTicketWindow openWith: self model ticket

	! !

!classDefinition: #TusLibrosClientStoreWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:02:28'!
Object subclass: #TusLibrosClientStoreWindowModel
	instanceVariableNames: 'cartId restInterface cart catalogSelectedIndex cartSelectedIndex quantityToAdd catalog errorMessage user ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:02:27' prior: 50917620!
sendCheckOutCartRequest
       [  
		ticket := restInterface checkOutCart: cartId forUser: user.
		self triggerEvent: #showTicket with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Check Out Cart Failed'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:03:24'!
ticket
	^ticket! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:04:20' prior: 50917349!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId') asNumber.
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (self parseTicket: ticket)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:04:35'!
parseTicket: ticket

	^ticket
! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:06:12' prior: 50917769!
parseTicket: ticket

	ticket lineItemsDo: [ :item | ]
! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:08:25' prior: 50917776!
parseTicket: ticket
	| ticketParsed |
	ticketParsed := OrderedCollection new.
	ticket lineItemsDo: [ :item | ticketParsed add: (item item, ' - $' , item total) ].
	ticketParsed add: 'Total: $',ticket total.
	^ticketParsed.
! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:08:38' prior: 50917782!
parseTicket: ticket
	| ticketParsed |
	ticketParsed := OrderedCollection new.
	ticket lineItemsDo: [ :item | ticketParsed add: (item item, ' - $' , item total asString) ].
	ticketParsed add: 'Total: $',ticket total asString.
	^ticketParsed.
! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:08:57' prior: 50917793!
parseTicket: ticket
	| ticketParsed |
	ticketParsed := OrderedCollection new.
	ticket lineItemsDo: [ :item | ticketParsed add: (item item, ' - $' , item total asString) ].
	ticketParsed add: 'Total: $',ticket total asString.
	^ticketParsed asArray.
! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:09:35' prior: 50917677!
sendCheckOutCartRequest
       [  
		ticket := restInterface checkOutCart: cartId forUser: user.
		self triggerEvent: #showTicket with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Invalid Card'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosClientTicketWindow class methodsFor: 'no messages' stamp: 'JN 7/8/2021 16:10:31'!
openWith: ticket 
	
	^self new initializeWith: 'Tus Libros - Ticket' and: ticket.! !

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:11:35'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientTicketWindow methodsFor: 'no messages' stamp: 'JN 7/8/2021 16:11:31'!
initializeWith: aTitle and: ticket

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientTicketWindowModel for: ticket).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	
! !
!TusLibrosClientTicketWindowModel class methodsFor: 'no messages' stamp: 'JN 7/8/2021 16:11:51'!
for: ticket

	^self new initializeWith: ticket.! !

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:12:25'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientTicketWindowModel methodsFor: 'no messages' stamp: 'JN 7/8/2021 16:12:24'!
initializeWith: aTicket

	ticket := aTicket.
	! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:14:56' prior: 50917816!
sendCheckOutCartRequest
      " ["  
		ticket := restInterface checkOutCart: cartId forUser: user.
		self triggerEvent: #showTicket with: self.
	"]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Invalid Card'. 
			self triggerEvent: #throwError with: self.
		]."
	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:15:40' overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: 'asd'.! !

!classDefinition: #TusLibrosClientTicketWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:16:45'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: 'ticketListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:16:44' prior: 50917886 overrides: 50902012!
buildMorphicWindow
		
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: ticketListMorph.! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:17:01'!
ticket 

	^ticket
	! !

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:17:36'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'ticket ticketSelectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:17:34'!
ticketListIndex: anIndex
	
	ticketSelectedIndex := anIndex.! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:17:44'!
ticketListIndex
	
	^ticketSelectedIndex.! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:17:54' prior: 50917867!
initializeWith: aTicket

	ticket := aTicket.
	ticketSelectedIndex := 0.
	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:18:26' overrides: 50902098!
defaultExtent

	^ 735@1485
	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:18:41' prior: 50917946 overrides: 50902098!
defaultExtent

	^ 435@785
	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:18:51' prior: 50917952 overrides: 50902098!
defaultExtent

	^ 435@485
	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:19:25' prior: 50917902 overrides: 50902012!
buildMorphicWindow
		
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:21:13'!
buildCartColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:21:39'!
buildTicketColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCheckOutCartRequest  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:21:39'!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:21:39' prior: 50908704 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildTicketColumn .
! !

!methodRemoval: TusLibrosClientStoreWindow #buildCartColumn stamp: 'JN 7/8/2021 16:21:39'!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCheckOutCartRequest  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.!

!methodRemoval: TusLibrosClientTicketWindow #buildCartColumn stamp: 'JN 7/8/2021 16:21:39'!
buildCartColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:22:05'!
buildCartColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:22:05'!
buildCartColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCheckOutCartRequest  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:22:05' prior: 50918051 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beRow;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn .
! !

!methodRemoval: TusLibrosClientTicketWindow #buildTicketColumn stamp: 'JN 7/8/2021 16:22:05'!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.!

!methodRemoval: TusLibrosClientStoreWindow #buildTicketColumn stamp: 'JN 7/8/2021 16:22:05'!
buildTicketColumn

	| catalogColumnLayoutMorph checkOutButtonMorph |

	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCheckOutCartRequest  label: 'Check Out'.

	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	catalogColumnLayoutMorph := LayoutMorph newColumn.
	catalogColumnLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartActionsRow;
	addMorph: checkOutButtonMorph.
	^catalogColumnLayoutMorph.!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:22:17'!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !

!methodRemoval: TusLibrosClientTicketWindow #buildCartColumn stamp: 'JN 7/8/2021 16:22:22'!
buildCartColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:22:37' prior: 50917964 overrides: 50902012!
buildMorphicWindow
	
	self layoutMorph beColumn;
	separation: 0;
	axisEdgeWeight: 0;
	addMorph: self buildTicketColumn .
! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:23:16'!
logOut

	TusLibrosClientLogInWindow open.
	self closeButtonClicked.
! !
!TusLibrosClientStoreWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:23:30' prior: 50917659!
showTicket

	TusLibrosClientTicketWindow openWith: self model ticket.
	self closeButtonClicked.

	! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:24:24' prior: 50918210!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:26:15' prior: 50905232 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildHistoryColumn;
	addMorph: self buildGoHomeRow.
! !

!classDefinition: #TusLibrosClientHistoryWindow category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:27:44'!
Panel subclass: #TusLibrosClientHistoryWindow
	instanceVariableNames: 'historyListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:27:42'!
buildHistoryColumn

	| historyLayoutMorph homeButtonMorph |

	homeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.

	historyListMorph := PluggableListMorph model: self model listGetter: #history indexGetter: #historyListIndex indexSetter: #historyListIndex:.
	historyListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	historyLayoutMorph := LayoutMorph newColumn.
	historyLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'History');
	addMorph: historyListMorph;
	addMorph: homeButtonMorph.
	^historyLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:27:48' prior: 50918276!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:28:16' prior: 50917958 overrides: 50902098!
defaultExtent

	^ 535@485
	! !

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:28:42'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: 'user password restInterface history'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:28:40' prior: 50905938!
initializeWith: anUser authenticatedWith: aPassword

	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRest new.
	history := OrderedCollection new.! !

!classDefinition: #TusLibrosClientHistoryWindowModel category: 'TusLibros-Client' stamp: 'JN 7/8/2021 16:28:53'!
Object subclass: #TusLibrosClientHistoryWindowModel
	instanceVariableNames: 'user password restInterface history historySelectedIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:28:52' prior: 50918379!
initializeWith: anUser authenticatedWith: aPassword

	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRest new.
	history := OrderedCollection new.
	historySelectedIndex := 0.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:29:08'!
historySelectedIndex

	^historySelectedIndex.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:29:17'!
historySelectedIndex: index

	historySelectedIndex := index.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:29:31'!
history 

	^history! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:31:06' prior: 50918399!
initializeWith: anUser authenticatedWith: aPassword

	user := anUser.
	password := aPassword.
	restInterface := TusLibrosClientRest new.
	history := restInterface getHistoryFor: user authenticatedWith: password.
	historySelectedIndex := 0.! !

!methodRemoval: TusLibrosClientRest #sendRequest: stamp: 'JN 7/8/2021 16:31:28'!
sendRequest: sentence

	| resp fieldDict |
	fieldDict := Dictionary newFromPairs: {'user'. 'validUser'.},{'password'.'validUserPascsword'}.		
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].!
!TusLibrosClientRest methodsFor: 'sending requests' stamp: 'JN 7/8/2021 16:31:47'!
getHistoryFor: user authenticatedWith: password

	| resp fieldDict endpoint |
	fieldDict := Dictionary newFromPairs: 
		{'user'.user.},
		{'password'.password}.		
	endpoint := '/listPurchases'.
	resp := WebClient htmlSubmit: (self url,endpoint) fields: fieldDict.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: (resp content)].! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:33:03' prior: 50917693!
initializeWith: aPortNumber

	tusLibros := self tusLibrosFacade.
		
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		[ | password user | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			request send200Response: (WebUtils jsonEncode: (tusLibros createCartFor: user authenticatedWith: password)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCatalog' action:[:request | 
		[ 
			request send200Response: (WebUtils jsonEncode: (self listParsedCatalog)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listCart' action:[:request | 
		[ | cartId items | 
			cartId := (request fields at: 'cartId') asNumber .
			items := tusLibros listCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: (self parseItems: items)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | 
		[ | cartId isbn quantity | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity') asNumber.
			tusLibros add: quantity of: isbn  toCartIdentifiedAs: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/removeFromCart' action:[:request | 
		[ | cartId isbn | 
			cartId := (request fields at: 'cartId') asNumber.
			isbn := (request fields at: 'isbn').
			tusLibros remove: isbn fromCartIdentifiedAd: cartId.
			request send200Response: (WebUtils jsonEncode: true).
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/checkOutCart' action:[:request | 
		[ | cartId user ticket | 
			cartId := (request fields at: 'cartId') asNumber.
			user := (request fields at: 'user').
			ticket := self checkOutCart: cartId forUser: user.
			request send200Response: (WebUtils jsonEncode: (self parseTicket: ticket)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/listPurchases' action:[:request | 
		[ | password user purchases | 
			user := (request fields at: 'user').
			password := (request fields at: 'password').
			purchases := tusLibros listPurchasesOf: user authenticatingWith: password.
			request send200Response: (WebUtils jsonEncode: (self parsePurchases: purchases)) 
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

server destroy !

server := TusLibrosServerRestInterface listeningOn: 8080   !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:34:03'!
parsePurchases: purchases

^purchases.! !

TusLibrosClientLogInWindow open!
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:36:46' prior: 50918558!
parsePurchases: purchases

^purchases asArray.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:38:47' prior: 50918564!
parsePurchases: purchases
	| parsed |
	parsed := OrderedCollection new.
	purchases do: [:item | parsed add: item key, ' - $' , item value asString].
^	parsed asArray.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:39:02' prior: 50918569!
parsePurchases: purchases
	| parsed |
	parsed := OrderedCollection new.
	purchases do: [:item | parsed add: item ].
^	parsed asArray.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:39:43' prior: 50918578!
parsePurchases: purchases
	| parsed |
	parsed := OrderedCollection new.
	purchases keysAndValuesDo: [:isbn :quantity | parsed add: isbn, ' - $' , quantity ].
^	parsed asArray.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:39:50' prior: 50918586!
parsePurchases: purchases
	| parsed |
	parsed := OrderedCollection new.
	purchases keysAndValuesDo: [:isbn :quantity | parsed add: isbn, ' - $' , quantity asString ].
^	parsed asArray.! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:40:53' prior: 50918595!
parsePurchases: purchases
	| parsed catalog |
	parsed := OrderedCollection new.
	catalog := self listCatalog.
	purchases keysAndValuesDo: [:isbn :quantity | | title | 
		title:= (catalog at: isbn) key.
		parsed add: isbn, ' - ', title,  ' - $' , quantity asString ].
^	parsed asArray.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:41:24'!
historyListIndex: index

	historySelectedIndex := index.! !
!TusLibrosClientHistoryWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:41:31'!
historyListIndex

	^historySelectedIndex.! !

!methodRemoval: TusLibrosClientHistoryWindowModel #historySelectedIndex stamp: 'JN 7/8/2021 16:41:34'!
historySelectedIndex

	^historySelectedIndex.!

!methodRemoval: TusLibrosClientHistoryWindowModel #historySelectedIndex: stamp: 'JN 7/8/2021 16:41:38'!
historySelectedIndex: index

	historySelectedIndex := index.!
!TusLibrosClientHistoryWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:42:01' prior: 50918300 overrides: 50902012!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildHistoryColumn.
! !

!methodRemoval: TusLibrosClientHistoryWindow #buildGoHomeRow stamp: 'JN 7/8/2021 16:42:05'!
buildGoHomeRow

	| goHomeRowLayoutMorph goHomeButtonMorph |
	
	goHomeButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #goHome  label: 'Home'.
	
	goHomeRowLayoutMorph := LayoutMorph newRow.
	goHomeRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
 	addMorph: goHomeButtonMorph.
		
	^goHomeRowLayoutMorph.
!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:43:42' prior: 50918340!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph createCartButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.
	createCartButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #createCart  label: 'New Cart'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: createCartButtonMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:44:46' prior: 50918660!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph createCartButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'New Cart'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: createCartButtonMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:45:23' prior: 50918688!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph createCartButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: createCartButtonMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:45:28' prior: 50918717!
buildTicketColumn

	| ticketLayoutMorph logOutButtonMorph |

	logOutButtonMorph := PluggableButtonMorph model: self stateGetter: nil action: #logOut  label: 'Log Out'.

	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400.
	
	ticketLayoutMorph := LayoutMorph newColumn.
	ticketLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Ticket');
	addMorph: ticketListMorph;
	addMorph: logOutButtonMorph.
	^ticketLayoutMorph.! !
!TusLibrosClientStoreWindowModel methodsFor: 'as yet unclassified' stamp: 'JN 7/8/2021 16:49:09' prior: 50917873!
sendCheckOutCartRequest
       [ 
		ticket := restInterface checkOutCart: cartId forUser: user.
		self triggerEvent: #showTicket with: self.
	]	
		on: Error 
		do: [ :anError |
			errorMessage := 'Invalid Card'. 
			self triggerEvent: #throwError with: self.
		].
	! !
!TusLibrosServerRestInterface methodsFor: 'initialization' stamp: 'JN 7/8/2021 16:50:14' prior: 50917804!
parseTicket: ticket
	| ticketParsed catalog |
	ticketParsed := OrderedCollection new.
	catalog := self listCatalog.
	ticket lineItemsDo: [ :item | | title | 
		title := (catalog at: item item) key.
		ticketParsed add: (item item, ' - ', title ,' - $' , item total asString) ].
	ticketParsed add: 'Total: $',ticket total asString.
	^ticketParsed asArray.
! !

TusLibrosClientLogInWindow open!