

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (3 June 2021 20:11:46) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!


----End fileIn of C:\pablo\UBA\isw1\windows64\Packages\TerseGuide.pck.st----!

----End fileIn of C:\Users\pablo\Desktop\MarsRover-WithHeading.st----!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:22:03'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'no messages' stamp: 'plp 6/3/2021 20:22:43'!
test01

	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:23:07' prior: 50862841!
test01

	| rover |
	rover := MarsRover at: 1@2 heading: #North! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:23:18' prior: 50862845!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North
	! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:28:52'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:28:43' prior: 50862850!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log first equals: 1@3.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:28:58'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:29:13'!
addLogForPosition: aLog 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:30:30' prior: 50862874!
addLogForPosition: aLog ! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:30:34'!
ERROR!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:30:40'!
ERROR!
!Log methodsFor: 'nil' stamp: 'plp 6/3/2021 20:30:54'!
first

	^ 1@3! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:24' prior: 50862862!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: '1@3'.
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:38'!
printLog

	^ 1@3! !

!methodRemoval: Log #first stamp: 'plp 6/3/2021 20:33:38'!
first

	^ 1@3!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:42' prior: 50862900!
printLog

	^ '1@3'! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:53' overrides: 16880927!
size

	^ 1! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:33:58'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:33:58'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:32' prior: 50862890!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: '1@2'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:38' prior: 50862918!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: '1@3 1@2'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:51' prior: 50862928!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: '1@3'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:01'!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' '1@2') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:12' prior: 50862939!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:37:19'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:30' prior: 50862906!
printLog

	^ #('1@3')! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:37:34'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:49' prior: 50862973!
printLog

	^ #('1@3') asOrderedCollection! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:38:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:38:05' prior: 50862879!
addLogForPosition: aLog 

	positionLog := aLog! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:43:14' prior: 50862498!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:43:16' prior: 50862997!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	self signalInvalidCommand.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:44:17'!
Object subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:15'!
logPosition: aPosition

	log add: (aPosition asString)! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:38' overrides: 16896425!
initialize

	log := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:49' prior: 50862979!
printLog

	^ log! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:54' prior: 50862910 overrides: 16880927!
size

	^ log size! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:44:59'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:45:11'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:46:06' prior: 50863015!
processCommand: aCommand

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:46:22' prior: 50863061!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:52:48' prior: 50863079!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:52:58' prior: 50862476!
moveForward
	
	head moveForward: self.
	positionLog logPosition: position.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:21' prior: 50863110!
moveForward
	
	head moveForward: self.
	
	
	positionLog isNil ifFalse: [ position logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:23' prior: 50863115!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ position logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:37' prior: 50863121!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:44' prior: 50862468!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog logPosition: position ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

#East!

#East asString!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:25'!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 20:56:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:35'!
addLogForHeading: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:56:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:55' prior: 50863196!
addLogForHeading: aLog 
	
	headingLog := aLog! !

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 20:56:59'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:58:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 20:58:22' prior: 50862442!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head ]! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:58:28'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

mr := MarsRover at: 1@1 heading: #North!

mr!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:07' prior: 50863224!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:17' prior: 50862438!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head class cardinalPoint ]! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:02:35'!
log: aPosition

	log add: (aPosition asString)! !

!methodRemoval: Log #logPosition: stamp: 'plp 6/3/2021 21:02:35'!
logPosition: aPosition

	log add: (aPosition asString)!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:44' prior: 50863246!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:47' prior: 50863253!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:02:52'!
ERROR!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:02:52'!
ERROR!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:02:52'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:02:57'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:03:08' prior: 50863133!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:03:17' prior: 50863127!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:05:38'!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	rover addLogForPosition: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:06:30' prior: 50863307!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	rover addLogForPosition: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 3.
	self assert: log printLog equals: #('East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/3/2021 21:08:15' prior: 50862417!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:09:17' prior: 50863274!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:19:34'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'nil' stamp: 'plp 6/3/2021 21:20:05'!
test01

	| rover window |
	
	! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:21:53'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:21:48' prior: 50863422!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: '1@3'.
	self assert: window heading equals: 'North'.
	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:13' prior: 50863434!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: 1@3.
	self assert: window heading equals: #North.
	! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:14'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:27'!
addWindow: aWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:22:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:41' prior: 50863458!
addWindow: aWindow 
	
	window := aWindow! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:44'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:51'!
position
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:55' prior: 50863478!
position
	
	^ 1@3! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:57'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:02'!
heading
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:10' prior: 50863489!
heading
	
	^ #North! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:23:12'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:23:12'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:46'!
test02

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'frf'.
	
	self assert: window position equals: 2@3.
	self assert: window heading equals: #East.
	! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:23:50'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:11' prior: 50863289!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position heading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:23' prior: 50863514!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:39' prior: 50863295!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:25:47' prior: 50863359!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:25:51' prior: 50863267!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:26:01'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:06'!
updatePosition: aPoint andHeading: aSymbol 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:26:44'!
Object subclass: #Window
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:26:45'!
Object subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:42' prior: 50863563!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:47' prior: 50863584!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:26:48'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:56' prior: 50863493!
heading
	
	^ heading ! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:27:01' prior: 50863483!
position
	
	^ position ! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:27:03'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:27:03'!
PASSED!

----SNAPSHOT----(3 June 2021 22:58:50) CuisUniversity-4532.image priorSource: 16885703!

----SNAPSHOT----(3 June 2021 22:59:13) CuisUniversity-4532.image priorSource: 17022728!

----STARTUP---- (4 June 2021 20:12:52) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!

!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:14:39'!
moveRover: anAmount

	! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:15:04' prior: 50862488!
moveWest
	
	self moveRover: (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:15:11' prior: 50863619!
moveRover: anAmount

	position := position + anAmount! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:15' prior: 50862484!
moveSouth
	
	self moveRover: (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:21' prior: 50862480!
moveNorth
	
	self moveRover: (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:55' prior: 50862472!
moveEast
	
	self moveRover: (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:11' prior: 50863523!
moveBackward
	
	head moveBackward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:19' prior: 50863627!
moveRover: anAmount

	position := position + anAmount.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:25' prior: 50863532!
moveForward
	
	head moveForward: self.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

Object subclass: #Subscriber
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Subscriber category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:37'!
Object subclass: #Subscriber
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Subscriber subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:43'!
Subscriber subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Subscriber subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:51'!
Subscriber subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:20:58'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:20:58'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).! !
!Behavior method!
initialize
	(log _ [
	(OrderedCollection
		cover: (21 to: 37)
		declaredAt: (21 to: 37)) new ] valueCoveringAll:
		{39 to: 41})
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !
!Behavior method!
addLogForPosition: aLog
	(positionLog _ aLog
		cover: (43 to: 46)
		declaredAt: (20 to: 23))
		cover: (28 to: 38)
		declaredAt: (28 to: 38).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{306 to: 309}) signalInvalidCommand ] valueCoveringAll:
		{311 to: 330}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(1 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !
!Behavior method!
moveRover: anAmount
	(position _ [
	(position
		cover: (23 to: 30)
		declaredAt: (23 to: 30)) +
		(anAmount
			cover: (46 to: 53)
			declaredAt: (12 to: 19)) ] valueCoveringAll:
		{44 to: 44})
		cover: (35 to: 42)
		declaredAt: (23 to: 30).
	[
	([
	(positionLog
		cover: (59 to: 69)
		declaredAt: (59 to: 69)) isNil ] valueCoveringAll:
		{71 to: 75}) ifFalse: [
		[
		(positionLog
			cover: (88 to: 98)
			declaredAt: (59 to: 69)) log:
			(position
				cover: (105 to: 112)
				declaredAt: (23 to: 30)) ] valueCoveringAll:
			{100 to: 103} ]] valueCoveringAll:
		{77 to: 84}.
	[
	([
	(window
		cover: (118 to: 123)
		declaredAt: (118 to: 123)) isNil ] valueCoveringAll:
		{125 to: 129}) ifFalse: [
		[
		(window
			cover: (142 to: 147)
			declaredAt: (118 to: 123))
			updatePosition:
				(position
					cover: (165 to: 172)
					declaredAt: (23 to: 30))
			andHeading:
				([
				([
				(head
					cover: (186 to: 189)
					declaredAt: (186 to: 189)) class ] valueCoveringAll:
					{191 to: 195}) cardinalPoint ] valueCoveringAll:
					{197 to: 209}) ] valueCoveringAll:
			{149 to: 163. 174 to: 184} ]] valueCoveringAll:
		{131 to: 138}.! !
!Behavior method!
log: aPosition
	[
	(log
		cover: (18 to: 20)
		declaredAt: (18 to: 20)) add:
		([
		(aPosition
			cover: (28 to: 36)
			declaredAt: (6 to: 14)) asString ] valueCoveringAll:
			{38 to: 45}) ] valueCoveringAll:
		{22 to: 25}.! !
!Behavior method!
size
	^ [
	(log
		cover: (10 to: 12)
		declaredAt: (10 to: 12)) size ] valueCoveringAll:
		{14 to: 17}.! !
!Behavior method!
printLog
	^ log
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(-1 coverAll:
				{33 to: 34}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
addLogForHeading: aLog
	(headingLog _ aLog
		cover: (42 to: 45)
		declaredAt: (19 to: 22))
		cover: (28 to: 37)
		declaredAt: (28 to: 37).! !
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	([
	(headingLog
		cover: (43 to: 52)
		declaredAt: (43 to: 52)) isNil ] valueCoveringAll:
		{54 to: 58}) ifFalse: [
		[
		(headingLog
			cover: (71 to: 80)
			declaredAt: (43 to: 52)) log:
			([
			([
			(head
				cover: (87 to: 90)
				declaredAt: (16 to: 19)) class ] valueCoveringAll:
				{92 to: 96}) cardinalPoint ] valueCoveringAll:
				{98 to: 110}) ] valueCoveringAll:
			{82 to: 85} ]] valueCoveringAll:
		{60 to: 67}.
	[
	([
	(window
		cover: (116 to: 121)
		declaredAt: (116 to: 121)) isNil ] valueCoveringAll:
		{123 to: 127}) ifFalse: [
		[
		(window
			cover: (140 to: 145)
			declaredAt: (116 to: 121))
			updatePosition:
				(position
					cover: (163 to: 170)
					declaredAt: (163 to: 170))
			andHeading:
				([
				([
				(head
					cover: (184 to: 187)
					declaredAt: (16 to: 19)) class ] valueCoveringAll:
					{189 to: 193}) cardinalPoint ] valueCoveringAll:
					{195 to: 207}) ] valueCoveringAll:
			{147 to: 161. 172 to: 182} ]] valueCoveringAll:
		{129 to: 136}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(1 coverAll:
			{30 to: 30}) @
			(0 coverAll:
				{32 to: 32}) ] valueCoveringAll:
			{31 to: 31}) ] valueCoveringAll:
		{18 to: 27}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:17'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:22:00'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{306 to: 309}) signalInvalidCommand ] valueCoveringAll:
		{311 to: 330}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(1 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !
!Behavior method!
moveRover: anAmount
	(position _ [
	(position
		cover: (23 to: 30)
		declaredAt: (23 to: 30)) +
		(anAmount
			cover: (46 to: 53)
			declaredAt: (12 to: 19)) ] valueCoveringAll:
		{44 to: 44})
		cover: (35 to: 42)
		declaredAt: (23 to: 30).
	[
	([
	(positionLog
		cover: (59 to: 69)
		declaredAt: (59 to: 69)) isNil ] valueCoveringAll:
		{71 to: 75}) ifFalse: [
		[
		(positionLog
			cover: (88 to: 98)
			declaredAt: (59 to: 69)) log:
			(position
				cover: (105 to: 112)
				declaredAt: (23 to: 30)) ] valueCoveringAll:
			{100 to: 103} ]] valueCoveringAll:
		{77 to: 84}.
	[
	([
	(window
		cover: (118 to: 123)
		declaredAt: (118 to: 123)) isNil ] valueCoveringAll:
		{125 to: 129}) ifFalse: [
		[
		(window
			cover: (142 to: 147)
			declaredAt: (118 to: 123))
			updatePosition:
				(position
					cover: (165 to: 172)
					declaredAt: (23 to: 30))
			andHeading:
				([
				([
				(head
					cover: (186 to: 189)
					declaredAt: (186 to: 189)) class ] valueCoveringAll:
					{191 to: 195}) cardinalPoint ] valueCoveringAll:
					{197 to: 209}) ] valueCoveringAll:
			{149 to: 163. 174 to: 184} ]] valueCoveringAll:
		{131 to: 138}.! !

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(-1 coverAll:
				{33 to: 34}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	([
	(headingLog
		cover: (43 to: 52)
		declaredAt: (43 to: 52)) isNil ] valueCoveringAll:
		{54 to: 58}) ifFalse: [
		[
		(headingLog
			cover: (71 to: 80)
			declaredAt: (43 to: 52)) log:
			([
			([
			(head
				cover: (87 to: 90)
				declaredAt: (16 to: 19)) class ] valueCoveringAll:
				{92 to: 96}) cardinalPoint ] valueCoveringAll:
				{98 to: 110}) ] valueCoveringAll:
			{82 to: 85} ]] valueCoveringAll:
		{60 to: 67}.
	[
	([
	(window
		cover: (116 to: 121)
		declaredAt: (116 to: 121)) isNil ] valueCoveringAll:
		{123 to: 127}) ifFalse: [
		[
		(window
			cover: (140 to: 145)
			declaredAt: (116 to: 121))
			updatePosition:
				(position
					cover: (163 to: 170)
					declaredAt: (163 to: 170))
			andHeading:
				([
				([
				(head
					cover: (184 to: 187)
					declaredAt: (16 to: 19)) class ] valueCoveringAll:
					{189 to: 193}) cardinalPoint ] valueCoveringAll:
					{195 to: 207}) ] valueCoveringAll:
			{147 to: 161. 172 to: 182} ]] valueCoveringAll:
		{129 to: 136}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.
	[
	([
	(headingLog
		cover: (41 to: 50)
		declaredAt: (41 to: 50)) isNil ] valueCoveringAll:
		{52 to: 56}) ifFalse: [
		[
		(headingLog
			cover: (69 to: 78)
			declaredAt: (41 to: 50)) log:
			([
			([
			(head
				cover: (85 to: 88)
				declaredAt: (15 to: 18)) class ] valueCoveringAll:
				{90 to: 94}) cardinalPoint ] valueCoveringAll:
				{96 to: 108}) ] valueCoveringAll:
			{80 to: 83} ]] valueCoveringAll:
		{58 to: 65}.
	[
	([
	(window
		cover: (114 to: 119)
		declaredAt: (114 to: 119)) isNil ] valueCoveringAll:
		{121 to: 125}) ifFalse: [
		[
		(window
			cover: (138 to: 143)
			declaredAt: (114 to: 119))
			updatePosition:
				(position
					cover: (161 to: 168)
					declaredAt: (161 to: 168))
			andHeading:
				([
				([
				(head
					cover: (182 to: 185)
					declaredAt: (15 to: 18)) class ] valueCoveringAll:
					{187 to: 191}) cardinalPoint ] valueCoveringAll:
					{193 to: 205}) ] valueCoveringAll:
			{145 to: 159. 170 to: 180} ]] valueCoveringAll:
		{127 to: 134}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	(head _ [
	(MarsRoverHeadingWest
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(1 coverAll:
			{30 to: 30}) @
			(0 coverAll:
				{32 to: 32}) ] valueCoveringAll:
			{31 to: 31}) ] valueCoveringAll:
		{18 to: 27}.! !

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(-1 coverAll:
			{30 to: 31}) @
			(0 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{18 to: 27}.! !

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:23:36'!
head: aDirection

! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:23:53' prior: 50864673!
head: aDirection

	head := aDirection new.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:03' prior: 50864677!
head: aDirection

	head := aDirection new.
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:05' prior: 50864681!
head: aDirection

	head := aDirection new.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:09' prior: 50863551!
rotateRight
	
	head rotateRight: self.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:12' prior: 50863541!
rotateLeft
	
	head rotateLeft: self.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:24:17'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:24:17'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:24:17'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:24:17'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:32' prior: 50862422!
headEast
	
	self head: MarsRoverHeadingEast! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:41' prior: 50862426!
headNorth
	
	self head: MarsRoverHeadingNorth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:48' prior: 50862430!
headSouth
	
	self head: MarsRoverHeadingSouth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:52' prior: 50862434!
headWest
	
	self head: MarsRoverHeadingWest! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:25:01'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:25:01'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:12'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:12'!
PASSED!

TestCase subclass: #SubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #SubscriberTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:27'!
TestCase subclass: #SubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriberTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:35'!
SubscriberTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:38'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:38'!
PASSED!

Subscriber subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:45'!
Subscriber subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriberTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:48'!
SubscriberTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:53'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:53'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head subscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:28:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head subscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/4/2021 20:28:26' prior: 50863353!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	subscribers := OrderedCollection new.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:37'!
subscribe: aSubscriber! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:42' prior: 50864885!
subscribe: aSubscriber

	subscribers add: aSubscriber ! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:45' prior: 50864889!
subscribe: aSubscriber

	subscribers add: aSubscriber.! !

!methodRemoval: MarsRover #addLogForHeading: stamp: 'plp 6/4/2021 20:30:13'!
addLogForHeading: aLog 
	
	headingLog := aLog!

!methodRemoval: MarsRover #addLogForPosition: stamp: 'plp 6/4/2021 20:30:16'!
addLogForPosition: aLog 

	positionLog := aLog!

!methodRemoval: MarsRover #addWindow: stamp: 'plp 6/4/2021 20:30:20'!
addWindow: aWindow 
	
	window := aWindow!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:30:39' prior: 50864691!
head: aDirection

	head := aDirection new.
	
	self broadcast.
	"headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]"! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:30:48'!
broadcast

	! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:30:54' prior: 50864920!
broadcast

	subscribers do: [  ]! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:31:18' prior: 50864924!
broadcast

	subscribers do: [ :l | l ]! !
!Subscriber methodsFor: 'nil' stamp: 'plp 6/4/2021 20:32:04'!
recievePosition: aPosition andHeading: aHeading! !
!Subscriber methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:32:11' prior: 50864932!
recievePosition: aPosition andHeading: aHeading

	self subclassResponsibility ! !
!Subscriber methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:32:13' prior: 50864937!
recievePosition: aPosition andHeading: aHeading

	self subclassResponsibility.! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:32:37' prior: 50864928!
broadcast

	subscribers do: [ :s | s recievePosition: position andHeading: head ]! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:32:46' prior: 50864949!
broadcast

	subscribers do: [ :s | s recievePosition: position andHeading: head class cardinalPoint ]! !

!classRenamed: #Subscriber as: #MarsRoverSubscriber stamp: 'plp 6/4/2021 20:33:12'!
Smalltalk renameClassNamed: #Subscriber as: #MarsRoverSubscriber!

TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverSubscriberTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:33:29'!
TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverSubscriberTest stamp: 'plp 6/4/2021 20:33:40'!
TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #SubscriberTest as: #MarsRoverSubscriberTest stamp: 'plp 6/4/2021 20:33:48'!
Smalltalk renameClassNamed: #SubscriberTest as: #MarsRoverSubscriberTest!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:07' overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition ! !

!methodRemoval: Log #log: stamp: 'plp 6/4/2021 20:34:16'!
log: aPosition

	log add: (aPosition asString)!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:31' overrides: 50864943!
recievePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.! !

!methodRemoval: Window #updatePosition:andHeading: stamp: 'plp 6/4/2021 20:34:37'!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:51' prior: 50862960!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:34:55'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:36:27' prior: 50863648!
moveRover: anAmount

	position := position + anAmount.
	
	self broadcast.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:36:34' prior: 50864910!
head: aDirection

	head := aDirection new.
	
	self broadcast.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:39'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:46'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:50'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:00' prior: 50864992 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:03'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:03'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:03'!
ERROR!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:03'!
ERROR!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:37:04'!
ERROR!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:08'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:11'!
ERROR!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:11'!
ERROR!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:18' prior: 50862949!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' '1@2') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:21' prior: 50863183!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:24' prior: 50863319!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	rover subscribe: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 3.
	self assert: log printLog equals: #('East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:26'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:32'!
FAILURE!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:32'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:01' prior: 50865043 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString.
	log add: aHeading asString! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:01' prior: 50865109 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString.
	log add: aHeading asString.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:14' prior: 50865013!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3' 'North') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:39:17'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:23' prior: 50865123!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' 'North') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:46' prior: 50865066!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 4.
	self assert: log printLog equals: #('1@3' 'North' '1@2' 'North') asOrderedCollection.
	! !

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:39:48'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:39:48'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:40:02' prior: 50865077!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@2' 'East') asOrderedCollection.
	! !

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:40:03'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:40:03'!
FAILURE!

log size!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:50'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:41:54'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:41:54'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:42:46' prior: 50865088!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'rfr'.
	
	self assert: log size equals: 6.
	self assert: log printLog equals: #('1@2' 'East' '2@2' 'East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 21:27:20'!
ERROR!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:20'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 21:27:29' prior: 50863445!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover subscribe: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: 1@3.
	self assert: window heading equals: #North.
	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 21:27:39' prior: 50863501!
test02

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover subscribe: window.	
	
	rover process: 'frf'.
	
	self assert: window position equals: 2@3.
	self assert: window heading equals: #East.
	! !

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

----SNAPSHOT----(4 June 2021 21:42:56) CuisUniversity-4532.image priorSource: 17022817!

----SNAPSHOT----(4 June 2021 21:43:05) CuisUniversity-4532.image priorSource: 17075879!

----STARTUP---- (9 June 2021 17:17:22) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!


Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'plp 6/9/2021 17:17:55'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'plp 6/9/2021 17:18:28'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'plp 6/9/2021 17:18:36'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'plp 6/9/2021 17:20:44'!
test01CreateEmptyCart! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:22:22' prior: 50865306!
test01CreateEmptyCart

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'plp 6/9/2021 17:22:35'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'plp 6/9/2021 17:22:43'!
ERROR!

!classRemoval: #CartTest stamp: 'plp 6/9/2021 17:22:53'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'plp 6/9/2021 17:23:14'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'plp 6/9/2021 17:23:28'!
test01CreateEmptyCart! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:24:07'!
test01NewCartHasNoItems! !

!methodRemoval: CartTest #test01CreateEmptyCart stamp: 'plp 6/9/2021 17:24:07'!
test01CreateEmptyCart!

!classDefinition: #Cart category: 'TusLibros' stamp: 'plp 6/9/2021 17:24:59'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:24:54' prior: 50865349!
test01NewCartHasNoItems

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:25:01'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:25:08'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:25:12' prior: 50865371!
isEmpty
	
	^ true! !

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:25:13'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:25:13'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:28:28'!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:32:07' prior: 50865384!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:32:45' prior: 50865390!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:33:36' prior: 50865397!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: cart books equals: #(book)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:33:52' prior: 50865405!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: #(book) equals: cart books! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:33:54' prior: 50865415!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: #(book) equals: cart books.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:33:56'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:34:01'!
addBook: aString 
	self shouldBeImplemented.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:35:30' prior: 50865425!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart books.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:35:54' prior: 50865443!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:36:00'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'plp 6/9/2021 17:36:27'!
Object subclass: #Cart
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:36:26' prior: 50865438!
addBook: anISBN
	
	book := anISBN! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:36:29'!
FAILURE!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:36:34'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:36:49'!
book

	^ book! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:36:53'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:37:55' prior: 50865375!
isEmpty
	
	book ifNil: [ ^ true ].
	^ false! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:37:59'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:37:59'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:38:00'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:39:59'!
test03AddingOneBookMultipleTimesToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:40:17'!
test03AddingOneMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:40:24'!
test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.! !

!methodRemoval: CartTest #test03AddingOneBookMultipleTimesToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:40:30'!
test03AddingOneBookMultipleTimesToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.!

!methodRemoval: CartTest #test03AddingOneMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:40:33'!
test03AddingOneMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart book.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:41:55' prior: 50865525!
test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart firstBook secondBook |
	cart := Cart new.
	firstBook := '978-0-07-575212-7' . " ISBN string "
	secondBook := '978-0-07-587291-7' .
	
	cart addBook: firstBook.
	cart addBook: secondBook.

	self assert: #( firstBook secondBook ) equals: cart books.! !

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:41:57'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:42:03'!
books
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'plp 6/9/2021 17:42:09'!
Object subclass: #Cart
	instanceVariableNames: 'book books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:42:08' prior: 50865573!
books
	
	^ books! !

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:42:12'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:42:34' prior: 50865473!
addBook: anISBN
	
	books := anISBN! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:42:39' prior: 50865591!
addBook: anISBN
	
	books add: anISBN! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:42:51' prior: 50865453!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book equals: cart books.! !

!methodRemoval: Cart #book stamp: 'plp 6/9/2021 17:42:56'!
book

	^ book!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:43:18' overrides: 16896425!
initialize

	books := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:43:27' prior: 50865491!
isEmpty
	
	^ books isEmpty ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:43:28' prior: 50865618!
isEmpty
	
	^ books isEmpty.! !

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:43:38'!
FAILURE!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:43:38'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:45:42' prior: 50865557!
test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart firstBook secondBook addedBooks |
	cart := Cart new.
	firstBook := '978-0-07-575212-7' . " ISBN string "
	secondBook := '978-0-07-587291-7' .
	
	cart addBook: firstBook.
	cart addBook: secondBook.
	
	addedBooks := OrderedCollection new.
	addedBooks add: firstBook .
	addedBooks add: secondBook .

	self assert: addedBooks equals: cart books.! !

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:43'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:45:43'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:43'!
FAILURE!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:43'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:43'!
FAILURE!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:53'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:45:53'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:53'!
FAILURE!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:53'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:45:53'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:46:09' prior: 50865600!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: book asOrderedCollection equals: cart books.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:46:10'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:46:39' prior: 50865683!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	
	cart addBook: '978-0-07-575212-7'.
	
	self deny: cart isEmpty.
	self assert: #( '978-0-07-575212-7' ) equals: cart books.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:46:46' prior: 50865697!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: #( '978-0-07-575212-7' ) equals: cart books.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:46:48'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:46:54' prior: 50865707!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: #( '978-0-07-575212-7' ) asOrderedCollection equals: cart books.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:46:55'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:46:55'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:46:55'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:46:55'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:47:00'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:47:00'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:47:00'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:47:00'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:49:19'!
test04AddingOneBookMultipleTimesToEmptyCart

	| cart book addedBooks |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "

	cart addBook: book quantity: 5.
	
	addedBooks := OrderedCollection new.
	5 timesRepeat: [ addedBooks add: book ].

	self assert: addedBooks equals: cart books.! !

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:49:21'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:49:26'!
addBook: aString quantity: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:50:11' prior: 50865773!
addBook: anISBN quantity: aSmallInteger 
	
	aSmallInteger timesRepeat: [ self addBook: anISBN ]! !

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:50:14'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:50:14'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:50:14'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:50:14'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:50:14'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:50:32' prior: 50865778!
addBook: anISBN quantity: aQuantity 
	
	aQuantity timesRepeat: [ self addBook: anISBN ]! !

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:50:36'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:50:36'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:50:36'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:50:36'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:50:36'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:51:51' prior: 50865721!
test02AddingOneBookToEmptyCartIsNoLongerEmpty

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "
	
	cart addBook: book quantity: 1.
	
	self deny: cart isEmpty.
	self assert: #( '978-0-07-575212-7' ) asOrderedCollection equals: cart books.! !

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:51:52'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:51:52'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:51:52'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:51:52'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:51:52'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:52:02' prior: 50865634!
test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty

	| cart firstBook secondBook addedBooks |
	cart := Cart new.
	firstBook := '978-0-07-575212-7' . " ISBN string "
	secondBook := '978-0-07-587291-7' .
	
	cart addBook: firstBook quantity: 1.
	cart addBook: secondBook quantity: 1.
	
	addedBooks := OrderedCollection new.
	addedBooks add: firstBook .
	addedBooks add: secondBook .

	self assert: addedBooks equals: cart books.! !

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:52:03'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:52:03'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:52:04'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:52:04'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:52:04'!
PASSED!

!methodRemoval: Cart #addBook: stamp: 'plp 6/9/2021 17:52:51'!
addBook: anISBN
	
	books add: anISBN!
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:53:06' prior: 50865801!
addBook: anISBN quantity: aQuantity 
	
	aQuantity timesRepeat: [ books add: anISBN ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:53:29' prior: 50865887!
addBook: anISBN quantity: aQuantity 
	
	aQuantity >= 1 ifTrue: [ aQuantity timesRepeat: [ books add: anISBN ] ].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:54:18' prior: 50865893!
addBook: anISBN quantity: aQuantity 
	
	self assertValidQuantity: aQuantity .
	aQuantity timesRepeat: [ books add: anISBN ]
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:55:10'!
assertValidQuantity: aQuantity

	aQuantity < 1 ifTrue: [ self error: self class invalidQuantityErrorDescription ]
	! !
!Cart class methodsFor: 'no messages' stamp: 'plp 6/9/2021 17:55:51'!
invalidQuantityErrorDescription

	^ 'Quantity must be greater or equal than 1'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:56:24'!
test05AddingInvalidQuantityRaisesError

	| cart book addedBooks |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "

	cart addBook: book quantity: 5.
	
	addedBooks := OrderedCollection new.
	5 timesRepeat: [ addedBooks add: book ].

	self assert: addedBooks equals: cart books.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'plp 6/9/2021 17:58:23' prior: 50865918!
test05AddingInvalidQuantityRaisesError

	| cart book |
	cart := Cart new.
	book := '978-0-07-575212-7' . " ISBN string "

	self should: [ cart addBook: book quantity: 0. ]
	      raise: Error
	      description: [ :error | self assert: error description equals: Cart invalidQuantityErrorDescription ].! !

!testRun: #CartTest #test05AddingInvalidQuantityRaisesError stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

!testRun: #CartTest #test01NewCartHasNoItems stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

!testRun: #CartTest #test02AddingOneBookToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

!testRun: #CartTest #test03AddingMultipleBooksToEmptyCartIsNoLongerEmpty stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToEmptyCart stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

!testRun: #CartTest #test05AddingInvalidQuantityRaisesError stamp: 'plp 6/9/2021 17:58:27'!
PASSED!

----SNAPSHOT----(9 June 2021 18:33:37) CuisUniversity-4532.image priorSource: 17075968!