

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (23 June 2021 23:19:15) as C:\pablo\UBA\isw1\windows64_2\CuisUniversity-4532.image!


----End fileIn of C:\pablo\UBA\isw1\TusLibros-test.st----!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:19:57'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:19:58'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 'plp 6/23/2021 23:21:05'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'plp 6/23/2021 23:21:05'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulatorSuccess stamp: 'plp 6/23/2021 23:21:05'!
MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorSuccess
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulatorFailed stamp: 'plp 6/23/2021 23:21:06'!
MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorFailed
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'plp 6/23/2021 23:21:06'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'plp 6/23/2021 23:21:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'plp 6/23/2021 23:21:06'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'plp 6/23/2021 23:21:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthSimulator stamp: 'plp 6/23/2021 23:21:07'!
Object subclass: #AuthSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Application stamp: 'plp 6/23/2021 23:21:07'!
Object subclass: #Application
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'plp 6/23/2021 23:21:07'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'expirationDate validOwner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'plp 6/23/2021 23:21:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'plp 6/23/2021 23:21:07'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ApplicationTest stamp: 'plp 6/23/2021 23:21:08'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\pablo\UBA\isw1\TusLibros-test.st----!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:21:46'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:21:47'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:21:48'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:21:49'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:21:51'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate invalidIsbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:21:44' prior: 50860830 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.

	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	validExpirationDate := validMonth , validYear .
	validCardNumber := 1234567890123456.
	validCardOwner := 'Bjarne Stroustrup'.
	
	invalidCardNumber := 1111.
	expiratedExpirationDate := '122020'.

	validIsbn := testObjectsFactory itemSellByTheStore .
	invalidIsbn := '1111111111111'.	
	
	invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserID := '12345'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:22:16' prior: 50860961!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:22:19' prior: 50861012!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:22:24' prior: 50861057!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:22:41' prior: 50861089!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	self 
		should: [ app listPurchasesFor: invalidUserID withPassword: correctPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:22:46' prior: 50861123!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:22:50'!
ERROR!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:22:50'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:22:50'!
ERROR!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:22:56'!
ERROR!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:22:56'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:22:56'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:23:14' prior: 50862325!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:23:16'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:23:23' prior: 50862514!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:23:24'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:23:24'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:23:46' prior: 50860861!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := Application forCatalog: testObjectsFactory defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:23:50' prior: 50860882!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := Application forCatalog: testObjectsFactory defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:23:57' prior: 50860895!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := Application forCatalog: testObjectsFactory defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 23:24:16'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate invalidIsbn defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:14' prior: 50862220 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	defaultCatalog := testObjectsFactory defaultCatalog.

	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	validExpirationDate := validMonth , validYear .
	validCardNumber := 1234567890123456.
	validCardOwner := 'Bjarne Stroustrup'.
	
	invalidCardNumber := 1111.
	expiratedExpirationDate := '122020'.

	validIsbn := testObjectsFactory itemSellByTheStore .
	invalidIsbn := '1111111111111'.	
	
	invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserID := '12345'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:22' prior: 50862636!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := Application forCatalog: defaultCatalog.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:29' prior: 50862657!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:39' prior: 50862670!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := Application forCatalog: defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:44' prior: 50860909!
test04AddToCartToInvalidCartId

	| app |
	
	app := Application forCatalog: defaultCatalog.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:48' prior: 50860922!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:52' prior: 50860944!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:24:58' prior: 50862252!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:03' prior: 50862304!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:08' prior: 50861033!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:14' prior: 50862550!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:19' prior: 50862358!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := Application forCatalog: defaultCatalog.
	
	self 
		should: [ app listPurchasesFor: invalidUserID withPassword: correctPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:25' prior: 50861111!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app purchases |
	
	app := Application forCatalog: defaultCatalog.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:29' prior: 50862380!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:25:34' prior: 50861146!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:26:34'!
test15ListPurchasesOfMultipleUsers

	| app purchases cartId result anotherCartId |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:27:32' prior: 50861708!
authenticateUserId: aUserId withPassword: aPassword

	(aUserId = 'Non-registered id' or: (aPassword = 'WrongPassword')) ifTrue: [ self error: Application authenticationFailedErrorDescription ].! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/23/2021 23:27:38'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:27:56' prior: 50863044!
test15ListPurchasesOfMultipleUsers

	| app purchases cartId anotherCartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:28:09' prior: 50863139!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser purchases cartId anotherCartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:28:29' prior: 50863171!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser purchases cartId anotherCartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:28:38' prior: 50863203!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser purchases cartId anotherCartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:29:01' prior: 50863236!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser purchases cartId anotherCartId result |
	
	app := Application forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:29:02'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:29:03'!
PASSED!

!testRun: #ApplicationTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/23/2021 23:29:03'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:30:23' prior: 50863270!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := Application forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!testRun: #ApplicationTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:30:32'!
PASSED!

!testRun: #ApplicationTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/23/2021 23:30:32'!
PASSED!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:34:48' prior: 50861570!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart . " timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !

!classRenamed: #Application as: #ApplicationFacade stamp: 'plp 6/23/2021 23:38:22'!
Smalltalk renameClassNamed: #Application as: #ApplicationFacade!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862881!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862901!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862733!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862779!
test04AddToCartToInvalidCartId

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862956!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app listPurchasesFor: invalidUserID withPassword: correctPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50863012!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50863360!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50863076!
authenticateUserId: aUserId withPassword: aPassword

	(aUserId = 'Non-registered id' or: (aPassword = 'WrongPassword')) ifTrue: [ self error: ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862977!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app purchases |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862765!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862753!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862792!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862814!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862989!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862924!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50861541!
addToCart: aCartId with: anISBN quantity: aQuantity

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50862830!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:38:22' prior: 50861588!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !

!classRenamed: #ApplicationTest as: #ApplicationFacadeTest stamp: 'plp 6/23/2021 23:38:38'!
Smalltalk renameClassNamed: #ApplicationTest as: #ApplicationFacadeTest!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/23/2021 23:58:33' prior: 50863461!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart . "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/23/2021 23:58:35' prior: 50863881!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:00:08'!
test16AddToCartFailsAfter30Minutes

	| app cartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:00:15' prior: 50863909!
test16AddToCartFailsAfter30Minutes

	| app cartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:00:50'!
now

	^ DateAndTime now ! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:01:42'!
createCartForUser: aUserId password: aPassword on: on  

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863501!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863614!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863923!
test16AddToCartFailsAfter30Minutes

	| app cartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863695!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863681!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPassword on: now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863769!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863480!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863581!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863525!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword on: now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword on: now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863729!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863746!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863811!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:01:42' prior: 50863707!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: now.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !

!methodRemoval: ApplicationFacade #createCartForUser:password: stamp: 'plp 6/24/2021 00:01:42'!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:01:52' prior: 50863940!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:02:08' prior: 50864154!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:02:11' prior: 50864039!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:02:16' prior: 50864052!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self deny: (oneCartId = anotherCartId).! !

!classDefinition: #ApplicationFacadeTest category: 'TusLibros' stamp: 'plp 6/24/2021 00:02:34'!
TestCase subclass: #ApplicationFacadeTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate invalidIsbn defaultCatalog now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:02:32' prior: 50862700 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	defaultCatalog := testObjectsFactory defaultCatalog.

	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	validExpirationDate := validMonth , validYear .
	validCardNumber := 1234567890123456.
	validCardOwner := 'Bjarne Stroustrup'.
	
	invalidCardNumber := 1111.
	expiratedExpirationDate := '122020'.

	validIsbn := testObjectsFactory itemSellByTheStore .
	invalidIsbn := '1111111111111'.	
	
	invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserID := '12345'.
	correctPassword := 'CorrectPassword'.
	
	now := self now.! !

TestCase subclass: #ApplicationFacadeTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate invalidIsbn defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacadeTest category: 'TusLibros' stamp: 'plp 6/24/2021 00:03:01'!
TestCase subclass: #ApplicationFacadeTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPassword validCardNumber validCardOwner invalidCardNumber expiratedExpirationDate invalidIsbn defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:17' prior: 50864268!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:20' prior: 50864176!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:24' prior: 50864216!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:27' prior: 50864100!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:30' prior: 50863955!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:38' prior: 50864067!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:45' prior: 50864193!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:52' prior: 50864121!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:03:58' prior: 50863979!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:09' prior: 50864025!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1.! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:04:52'!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864583!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864469!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
			
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864719!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864673!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864559!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864447!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864639!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50863546!
test04AddToCartToInvalidCartId

	| app |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade invalidCartIdErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864538!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:04:52' prior: 50864616!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!methodRemoval: ApplicationFacade #addToCart:with:quantity: stamp: 'plp 6/24/2021 00:04:52'!
addToCart: aCartId with: anISBN quantity: aQuantity

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	!

DateAndTime now!

DateAndTime now + 30 minutes!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:05:41' prior: 50864792!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	

	app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:06:23' prior: 50865005!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:06:28'!
FAILURE!
!ApplicationFacade class methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:06:54'!
cartOutOfTimeErrorDescription
	
	^ 'The cart has ran out of time'! !
!ApplicationFacade class methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:07:01' prior: 50865038!
cartOutOfTimeErrorDescription
	
	^ 'The cart has ran out of time due to inactivity'! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:07:06'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:07:15'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:08:39' prior: 50864730!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	self assertCartLastActivity: aCartId on: on.
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:09:56'!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) x.
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:10:36' prior: 50864304!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(aTimeStamp@newCart) .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !

DateAndTime now - ( DateAndTime now + 30 minutes)!

DateAndTime now - ( DateAndTime now + 30 minutes) minute !

DateAndTime now - ( DateAndTime now + 30 minutes) minutes!

(DateAndTime now - ( DateAndTime now + 30 minutes)) minutes!

(( DateAndTime now + 30 minutes) - DateAndTime now) minutes!

(( DateAndTime now + 30 minutes) - DateAndTime now) minutes!

 29 !

 29 !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 00:13:24' prior: 50865068!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) x.
	
	(on - timeStamp) > (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:13:31'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:13:47' prior: 50865075!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart@aTimeStamp) .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 00:13:55' prior: 50865102!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) y.
	
	(on - timeStamp) > (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:13:58'!
ERROR!

----End fileIn of C:\pablo\UBA\isw1\windows64_2\Packages\TerseGuide.pck.st----!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:15:37' prior: 50865115!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) .   "timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 00:15:54' prior: 50865130!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) .
	
	(on - timeStamp) > (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 00:16:06' prior: 50868083!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) value.
	
	(on - timeStamp) > (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:16:14'!
FAILURE!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:16:14'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:16:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:16:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:16:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:16:52'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:17:26' prior: 50868068!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart ."(newCart->aTimeStamp) .   timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:17:35' prior: 50865018!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	"self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]"! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:17:48' prior: 50865057!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	"self assertCartLastActivity: aCartId on: on."
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:17:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/24/2021 00:17:52'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/24/2021 00:17:52'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:19:16'!
createCartForValidUserAndCorrectPasswordNowFor: anApp

	^ anApp createCartForUser: validUserID password: correctPassword on: self now.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:01' prior: 50864341!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:20:03'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:20:03'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:07' prior: 50864354!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	oneCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:09' prior: 50868481!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	oneCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:17' prior: 50864876!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:22' prior: 50864774!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
			
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:26' prior: 50864486!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:31' prior: 50864948!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:35' prior: 50864851!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:42' prior: 50864740!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:47' prior: 50868646!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:20:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:20:49'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:20:58' prior: 50864970!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:21:07' prior: 50864899!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: validUserID password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:21:11' prior: 50868798!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:21:23' prior: 50864804!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := app self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:21:26' prior: 50868865!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:21:45' prior: 50868190!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := ApplicationFacade forCatalog: defaultCatalog.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	"self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]"! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:22:34'!
createDefaultCatalogedApp

	^ApplicationFacade forCatalog: defaultCatalog.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:22:47' prior: 50864319!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:09' prior: 50868405!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:15' prior: 50868496!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:19' prior: 50864934!
test04AddToCartToInvalidCartId

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade invalidCartIdErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:23' prior: 50868510!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:27' prior: 50868533!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
			
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:30' prior: 50868550!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:34' prior: 50868601!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:37' prior: 50868622!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:41' prior: 50868679!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:44' prior: 50863559!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app listPurchasesFor: invalidUserID withPassword: correctPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:48' prior: 50863669!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app purchases |
	
	app := self createDefaultCatalogedApp.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:51' prior: 50868775!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:23:55' prior: 50868832!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:24:02' prior: 50868911!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:24:06' prior: 50868957!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	"self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]"! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:25:21'!
assertErrorCreateCartFor: anApp with: anUserID
	
	self 
		should: [ anApp createCartForUser: invalidUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 00:25:37' prior: 50869358!
assertErrorCreateCartFor: anApp with: anUserID
	
	self 
		should: [ anApp createCartForUser: anUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:26:09' prior: 50868979!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app createCartForUser: invalidUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].
		
	self assertErrorCreateCartFor: app with: validUserID .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:26:32' prior: 50869384!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartFor: app with: invalidUserID .
		
	self assertErrorCreateCartFor: app with: validUserID .! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:26:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:26:34'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:26:37' prior: 50869400!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartFor: app with: invalidUserID .
	self assertErrorCreateCartFor: app with: validUserID .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:28:27'!
XXtest05AddToCartNonAvailableISBN

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !

!methodRemoval: ApplicationFacadeTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:28:27'!
test05AddToCartNonAvailableISBN

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:28:54'!
XXtest07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!methodRemoval: ApplicationFacadeTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:28:54'!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:29:04'!
XXtest08CheckOutCartExpiredCard

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

!methodRemoval: ApplicationFacadeTest #test08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:29:04'!
test08CheckOutCartExpiredCard

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].!

!methodRemoval: ApplicationFacadeTest #XXtest08CheckOutCartExpiredCard stamp: 'plp 6/24/2021 00:30:06'!
XXtest08CheckOutCartExpiredCard

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: expiratedExpirationDate trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].!

!methodRemoval: ApplicationFacadeTest #XXtest07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/24/2021 00:30:09'!
XXtest07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId invalidCardOwner |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].!

!methodRemoval: ApplicationFacadeTest #XXtest05AddToCartNonAvailableISBN stamp: 'plp 6/24/2021 00:30:12'!
XXtest05AddToCartNonAvailableISBN

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 0 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:30:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:30:14'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:30:55' prior: 50869062!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
			
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:31:00' prior: 50869813!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:31:05' prior: 50869151!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	app addToCart: cartId with: validIsbn quantity: 1 on: self now.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:31:58'!
addOneValidItemToCart: aCartID in: anApp
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:32:15' prior: 50869830!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addOneValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:32:18' prior: 50869846!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addOneValidItemToCart: cartId in: app.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:32:46' prior: 50869175!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addOneValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:33:03' prior: 50869240!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addOneValidItemToCart: cartId in: app.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:33:07' prior: 50869263!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addOneValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:33:17' prior: 50869296!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	self addOneValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 00:34:16'!
addValidItemToCart: aCartID in: anApp
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50869969!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50869915!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50869947!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50869876!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50870001!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	self addValidItemToCart: cartId in: app.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:16' prior: 50869892!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !

!methodRemoval: ApplicationFacadeTest #addOneValidItemToCart:in: stamp: 'plp 6/24/2021 00:34:16'!
addOneValidItemToCart: aCartID in: anApp
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 00:34:43'!
addValidItemToCart: aCartID in: anApp anAmount: amount 
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:43' prior: 50870084!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app anAmount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:43' prior: 50870153!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	self addValidItemToCart: cartId in: app anAmount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:43' prior: 50870198!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app anAmount: amount.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:44' prior: 50870137!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app anAmount: amount.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:44' prior: 50870052!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app anAmount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:34:44' prior: 50870115!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app anAmount: amount.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!methodRemoval: ApplicationFacadeTest #addValidItemToCart:in: stamp: 'plp 6/24/2021 00:34:44'!
addValidItemToCart: aCartID in: anApp
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 00:35:02'!
addValidItemToCart: aCartID in: anApp amount: amount 
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870384!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: amount.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870267!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	self addValidItemToCart: cartId in: app amount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870351!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870312!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: amount.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870235!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: amount.
	app addToCart: anotherCartId with: validIsbn quantity: 2 on: self now.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:02' prior: 50870335!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: amount.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!methodRemoval: ApplicationFacadeTest #addValidItemToCart:in:anAmount: stamp: 'plp 6/24/2021 00:35:02'!
addValidItemToCart: aCartID in: anApp anAmount: amount 
	
	anApp addToCart: aCartID with: validIsbn quantity: 1 on: self now.!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 00:35:09' prior: 50870412!
addValidItemToCart: aCartID in: anApp amount: anAmount 
	
	anApp addToCart: aCartID with: validIsbn quantity: anAmount on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:25' prior: 50870576!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:31' prior: 50870521!
test09CheckOutCartValidCardAndCart

	| app cartId sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:40' prior: 50870544!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: 1.
	self addValidItemToCart: cartId in: app amount: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:46' prior: 50870420!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cartId result |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:35:53' prior: 50870488!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: 1.
	self addValidItemToCart: cartId in: app amount: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:36:06' prior: 50870699!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: 1.
	self addValidItemToCart: anotherCartId in: app amount: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:36:15' prior: 50870443!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	
	self addValidItemToCart: cartId in: app amount: 1.
	self addValidItemToCart: anotherCartId in: app amount: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:36:18'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:36:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:36:18'!
ERROR!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:36:30' prior: 50870646!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self addValidItemToCart: cartId in: app amount: 1.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:36:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:36:31'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:37:16' prior: 50870864!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	
	
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
	
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: anotherCartId in: app amount: 2.				
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:37:27' prior: 50870948!
test10CheckOutMultipleCartsWithValidCard

	| app cartId transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: validCardNumber 
					owner: validCardOwner 
					expiresOn: validExpirationDate 
					trought: merchantProcessorSuccess .
	
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: anotherCartId in: app amount: 2.				
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:39:35'!
createTransactionForNewCartWith: anAmount on: anApp
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:39:53' prior: 50870979!
test10CheckOutMultipleCartsWithValidCard

	| app transactionId anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app .
	
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: anotherCartId in: app amount: 2.				
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:40:27' prior: 50871025!
test10CheckOutMultipleCartsWithValidCard

	| app anotherCartId anotherTransactionId |
	
	app := self createDefaultCatalogedApp.
	
	
	
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: anotherCartId in: app amount: 2.				
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: validCardNumber 
						owner: validCardOwner 
						expiresOn: validExpirationDate 
						trought: merchantProcessorSuccess .
			
	self deny: (self createTransactionForNewCartWith: 1 on: app ) = (self createTransactionForNewCartWith: 2 on: app )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:40:35' prior: 50871048!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self createTransactionForNewCartWith: 1 on: app ) = (self createTransactionForNewCartWith: 2 on: app )
! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:40:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:40:37'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:40:42' prior: 50871071!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app ) = (self createTransactionForNewCartWith: 2 on: app )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:41:47' prior: 50870623!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:41:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:41:49'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:43:08'!
assertErrorListPurchaseOf: anApp with: aUserId password: aPassword
	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:43:42' prior: 50869207!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseOf: app with: invalidUserID password: correctPassword.
	self assertErrorListPurchaseOf: app with: validUserID password: wrongPassword .! !

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:43:43'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:43:43'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:44:26' prior: 50870677!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:44:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:44:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:44:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:44:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:44:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:44:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:44:30'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:45:00' prior: 50870731!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cartId result anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: anotherCartId in: app amount: 2.	
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:45:40' prior: 50871359!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app .
	self createTransactionForNewCartWith: 2 on: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:45:44'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:45:44'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:46:19' prior: 50870763!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser cartId anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	self addValidItemToCart: cartId in: app amount: 1.
	app checkOutCart: cartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:46:35' prior: 50871461!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:46:37' prior: 50871506!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:46:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/24/2021 00:47:29'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/24/2021 00:47:29'!
PASSED!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:47:45' prior: 50868174!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) . "  timeStamp@newCart "
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:47:55'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:47:55'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:47:55'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:47:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:47:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:47:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:47:56'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:47:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:47:58'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:48:19' prior: 50863862!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: (item key)) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:48:29' prior: 50871810!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:48:38'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:49:11' prior: 50871824!
listCartFor: aCartId

	| cart list |
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:49:15'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:49:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:49:17'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:49:35' prior: 50868207!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	"self assertCartLastActivity: aCartId on: on."
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:49:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:49:40'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:50:06' prior: 50861550!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:50:11'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:50:13'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:50:15'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:50:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:50:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:50:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/24/2021 00:50:23'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/24/2021 00:50:23'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:50:40' prior: 50869342!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:52:47'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:52:58' prior: 50871909!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	self assertCartLastActivity: aCartId on: on.
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	cart add: aQuantity of: anISBN.
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:53:00' prior: 50872146!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	self assertCartLastActivity: aCartId on: on .
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:53:16'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:53:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:53:16'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:54:27'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:54:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:54:28'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:54:28'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:54:28'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:54:38' prior: 50872126!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes).
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:54:38'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:54:53'!
ERROR!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:55:04' prior: 50872278!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:55:05'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:55:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:55:05'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:55:45' prior: 50872304!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:55:46'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:55:46'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:55:46'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:55:59'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:56:00'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:56:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:56:04'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:56:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:56:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:56:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:56:10'!
FAILURE!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:56:10'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:57:20' prior: 50872158!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	self assertCartLastActivity: aCartId on: on .
	
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:57:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:57:22'!
PASSED!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 00:58:44' prior: 50872481!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	
	self assertCartLastActivity: aCartId on: on .
	
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 00:58:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 00:58:54'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 00:59:20'!
test16CheckOutCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:00:15'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:00:15' prior: 50871544!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:00:15' prior: 50871010!
createTransactionForNewCartWith: anAmount on: anApp
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .! !

!methodRemoval: ApplicationFacade #checkOutCart:withCardNumber:owner:expiresOn:trought: stamp: 'plp 6/24/2021 01:00:15'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:01:16'!
createTransactionForNewCartWith: anAmount on: anApp aTime: at 
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:16' prior: 50871145!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app aTime: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:16' prior: 50871391!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app aTime: self now .
	self createTransactionForNewCartWith: 2 on: app aTime: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:16' prior: 50871291!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app aTime: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:16' prior: 50871134!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app aTime: self now ) = (self createTransactionForNewCartWith: 2 on: app aTime: self now )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:16' prior: 50872641!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app aTime: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on: stamp: 'plp 6/24/2021 01:01:16'!
createTransactionForNewCartWith: anAmount on: anApp
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:01:50'!
createTransactionForNewCartWith: anAmount on: anApp at: at 
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:50' prior: 50872766!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app at: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:50' prior: 50872731!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app at: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:50' prior: 50872794!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app at: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:50' prior: 50872748!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app at: self now .
	self createTransactionForNewCartWith: 2 on: app at: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:01:50' prior: 50872782!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app at: self now ) = (self createTransactionForNewCartWith: 2 on: app at: self now )
! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on:aTime: stamp: 'plp 6/24/2021 01:01:50'!
createTransactionForNewCartWith: anAmount on: anApp aTime: at 
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:01:55' prior: 50872847!
createTransactionForNewCartWith: anAmount on: anApp at: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:01:59' prior: 50872980!
createTransactionForNewCartWith: anAmount on: anApp at: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:02:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:02:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test16CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:02:14'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:02:33'!
test17CheckOutCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #test16CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:02:33'!
test16CheckOutCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:02:46' prior: 50873071!
test17CheckOutCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app at: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:02:54' prior: 50873104!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app at: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:02:55'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:03:14' prior: 50873120!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app at: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:03:18' prior: 50872376!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:03:38' prior: 50872619!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
	
	self assertCartLastActivity: aCartId on: on .
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:03:44' prior: 50873168!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:03:48' prior: 50873191!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .

	self assertCartLastActivity: aCartId on: on .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:03:55'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:03:55'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:04:03'!
FAILURE!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:05:12' prior: 50868093!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) value.
	
	(on - timeStamp) >= (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:05:17'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:05:17'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:05:17'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:05:22'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:05:22'!
FAILURE!

DateAndTime now + 30 minutes!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now)!

(DateAndTime now + 30 minutes) - (DateAndTime now) !

(DateAndTime now + 30 minutes) - (DateAndTime now) !

(DateAndTime now + 30 minutes) - (DateAndTime now) !

(DateAndTime now + 30 minutes) - (DateAndTime now) !

(DateAndTime now) - (DateAndTime now + 30 minutes)!

(DateAndTime now) - (DateAndTime now + 30 minutes) minutes!

((DateAndTime now) - (DateAndTime now + 30 minutes)) minutes!

((DateAndTime now) - (DateAndTime now + 30 minutes)) minutes abs!

(DateAndTime now + 30 minutes) - (DateAndTime now) !

(DateAndTime now + 30 minutes) - (DateAndTime now) minutes!

((DateAndTime now + 30 minutes) - (DateAndTime now)) minutes!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:09:52' prior: 50873247!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) value.
	
	((timeStamp - on) minutes abs) >= (30 minutes) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:09:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:09:54'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:09:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:09:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:10:00'!
ERROR!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:10:14' prior: 50873351!
assertCartLastActivity: aCartId on: on
	
	| timeStamp |
	timeStamp := (carts at: aCartId) value.
	
	((timeStamp - on) minutes abs) >= 30 ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:16'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:16'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:28'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:28'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:10:36'!
FAILURE!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:12:20' prior: 50873418!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (timeStamp - on) minutes abs .
	difference > 30 ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:12:53' prior: 50873495!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (timeStamp - on) .
	difference > 30 ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:13:07' prior: 50873506!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (on - timeStamp) .
	difference > 30 ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:13:59' prior: 50873213!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
	
	self assertCartLastActivity: aCartId on: on .
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:14:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:14:02'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:02'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:02'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:07'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:14:24' prior: 50873528!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	self assertCartLastActivity: aCartId on: on .
	
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:14:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:14:26'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:14:30'!
ERROR!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:14:48' prior: 50873517!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (on - timeStamp) .
	(difference > 30) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:14:54' prior: 50873686!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (on - timeStamp) minutes.
	(difference > 30) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:14:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:14:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:14:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:14:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:14:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:14:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:57'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:14:57'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'plp 6/24/2021 01:15:11' prior: 50873607!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |

	self assertCartLastActivity: aCartId on: on .
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	(carts at: aCartId) key .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:12'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:12'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:14'!
FAILURE!
!ApplicationFacade methodsFor: 'assertions' stamp: 'plp 6/24/2021 01:15:46' prior: 50873697!
assertCartLastActivity: aCartId on: on
	
	| timeStamp difference |
	timeStamp := (carts at: aCartId) value.
	difference := (on - timeStamp) minutes.
	(difference >= 30) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:48'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:48'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:15:55'!
FAILURE!

	timeStamp := (carts at: aCartId) value.!

on - timeStamp!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:17:08' prior: 50873138!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app at: (self now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:17:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:17:09'!
PASSED!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:19:30'!
createCartForValidUserAndCorrectPasswordNowFor: anApp at: at 

	^ anApp createCartForUser: validUserID password: correctPassword on: self now.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:19:30' prior: 50873152!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:19:30' prior: 50869001!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:19:30' prior: 50870607!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	self addValidItemToCart: cartId in: app amount: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:19:30' prior: 50869013!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:19:30' prior: 50872996!
createTransactionForNewCartWith: anAmount on: anApp at: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .! !

!methodRemoval: ApplicationFacadeTest #createCartForValidUserAndCorrectPasswordNowFor: stamp: 'plp 6/24/2021 01:19:30'!
createCartForValidUserAndCorrectPasswordNowFor: anApp

	^ anApp createCartForUser: validUserID password: correctPassword on: self now.
	!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:19:40' prior: 50873982!
createCartForValidUserAndCorrectPasswordNowFor: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:20:19' prior: 50873913!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app at: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:21:11'!
createTransactionForNewCartWith: anAmount on: anApp checkOutAt: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50872863!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50872879!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50872935!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app checkOutAt: self now .
	self createTransactionForNewCartWith: 2 on: app checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50872953!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app checkOutAt: self now ) = (self createTransactionForNewCartWith: 2 on: app checkOutAt: self now )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50874081!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app checkOutAt: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:11' prior: 50872896!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on:at: stamp: 'plp 6/24/2021 01:21:11'!
createTransactionForNewCartWith: anAmount on: anApp at: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:21:50'!
createTransactionForNewCartWith: anAmount on: anApp aCreationTime: createAt checkOutAt: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874189!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874163!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: self now ) = (self createTransactionForNewCartWith: 2 on: app aCreationTime: self now checkOutAt: self now )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874127!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874111!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874144!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: self now .
	self createTransactionForNewCartWith: 2 on: app aCreationTime: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:21:50' prior: 50874175!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app aCreationTime: self now checkOutAt: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on:checkOutAt: stamp: 'plp 6/24/2021 01:21:50'!
createTransactionForNewCartWith: anAmount on: anApp checkOutAt: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:22:05'!
createTransactionForNewCartWith: anAmount on: anApp createAt: createAt checkOutAt: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874313!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874368!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874331!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874260!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app amount: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874348!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now .
	self createTransactionForNewCartWith: 2 on: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:05' prior: 50874300!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now ) = (self createTransactionForNewCartWith: 2 on: app createAt: self now checkOutAt: self now )
! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on:aCreationTime:checkOutAt: stamp: 'plp 6/24/2021 01:22:05'!
createTransactionForNewCartWith: anAmount on: anApp aCreationTime: createAt checkOutAt: aTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: self now.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aTime .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'plp 6/24/2021 01:22:37' prior: 50874399!
createTransactionForNewCartWith: anAmount on: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:22:51' prior: 50874433!
test17CheckOutCartFailsAfter30Minutes

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app createAt: (self now) checkOutAt: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:23:03' prior: 50874572!
test17CheckOutCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app createAt: now checkOutAt: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:23:08' prior: 50874587!
test17CheckOutCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self createTransactionForNewCartWith: 1 on: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'plp 6/24/2021 01:23:12'!
PASSED!