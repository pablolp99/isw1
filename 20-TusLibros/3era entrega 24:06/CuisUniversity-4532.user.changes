

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (22 June 2021 18:05:38) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!


----End fileIn of C:\pablo\UBA\isw1\windows64\Packages\TerseGuide.pck.st----!

----End fileIn of C:\Users\pablo\Desktop\isw1\Iteracion2\TusLibros-33.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 18:07:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 18:07:22'!
PASSED!

TestCase subclass: #ApplicationTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/22/2021 18:13:18'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'no messages' stamp: 'plp 6/22/2021 18:17:04'!
test01CreateCartForNonExistingUser! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/22/2021 18:19:08'!
Object subclass: #Application
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:19:02' prior: 50862916!
test01CreateCartForNonExistingUser

	| app userId |
	
	app := Application new.
	userId := 'Non-registered id'.
	
	self should: [ app createCartForUser: userId ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:20:08' prior: 50862927!
test01CreateCartForNonExistingUser

	| app userId |
	
	app := Application new.
	userId := 'Non-registered id'.
	
	self 
		should: [ app createCartForUser: userId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:20:11'!
ERROR!
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:20:21'!
authenticationFailedErrorDescription
	self shouldBeImplemented.! !
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:21:02' prior: 50862952!
authenticationFailedErrorDescription
	
	^ 'Wrong User or Password'! !

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:21:04'!
FAILURE!

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:21:07'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:21:07'!
FAILURE!

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:21:07'!
FAILURE!

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:21:28'!
FAILURE!
!Application methodsFor: 'no messages' stamp: 'plp 6/22/2021 18:21:47'!
createCartForUser: aUserId

	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:22:25' prior: 50862979!
createCartForUser: aUserId

	self error: Application authenticationFailedErrorDescription.! !

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:22:29'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:22:29'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:22:46'!
test01CreateCartForNonRegisteredUser

	| app userId |
	
	app := Application new.
	userId := 'Non-registered id'.
	
	self 
		should: [ app createCartForUser: userId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !

!methodRemoval: ApplicationTest #test01CreateCartForNonExistingUser stamp: 'plp 6/22/2021 18:22:46'!
test01CreateCartForNonExistingUser

	| app userId |
	
	app := Application new.
	userId := 'Non-registered id'.
	
	self 
		should: [ app createCartForUser: userId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:24:12' prior: 50862997!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application new.
	invalidUserId := 'Non-registered id'.
	validUserId := 'Registered id'.
	wrongPassword := 'WrongPassword'.
	
	self 
		should: [ app createCartForUser: invalidUserId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:24:53'!
createCartForUser: aUserId password: password 

	self error: Application authenticationFailedErrorDescription.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:24:53' prior: 50863023!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application new.
	invalidUserId := 'Non-registered id'.
	validUserId := 'Registered id'.
	wrongPassword := 'WrongPassword'.
	
	self 
		should: [ app createCartForUser: invalidUserId password: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !

!methodRemoval: Application #createCartForUser: stamp: 'plp 6/22/2021 18:24:53'!
createCartForUser: aUserId

	self error: Application authenticationFailedErrorDescription.!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:25:00' prior: 50863045!
createCartForUser: aUserId password: aPassword 

	self error: Application authenticationFailedErrorDescription.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:25:11' prior: 50863052!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application new.
	invalidUserId := 'Non-registered id'.
	validUserId := 'Registered id'.
	wrongPassword := 'WrongPassword'.
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 18:25:14'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 18:25:14'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:26:40'!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	app createCartForUser: validUserId password: correctPassword.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:27:14' prior: 50863119!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:28:55' prior: 50863130!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: (#() asOrderedCollection equals: app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:29:05' prior: 50863142!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: ((#() asOrderedCollection) equals: app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:29:11' prior: 50863156!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: ((#() asOrderedCollection) equals: (app listCartFor: cartId)).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:29:25' prior: 50863170!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application new.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:29:30'!
ERROR!

!classDefinition: #AuthSimulator category: 'TusLibros' stamp: 'plp 6/22/2021 18:31:28'!
Object subclass: #AuthSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:31:24' prior: 50863081!
createCartForUser: aUserId password: aPassword 

	AuthSimulator authenticateUserId: aUserId withPassword: aPassword.
	
	self error: Application authenticationFailedErrorDescription.! !
!AuthSimulator class methodsFor: 'no messages' stamp: 'plp 6/22/2021 18:31:42'!
authenticateUserId: aUserId withPassword: aPassword! !
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:31:48' prior: 50863218!
authenticateUserId: aUserId withPassword: aPassword

	! !
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:32:24' prior: 50863223!
authenticateUserId: aUserId withPassword: aPassword

	aUserId! !
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:33:19' prior: 50863229!
authenticateUserId: aUserId withPassword: aPassword

	(aUserId = '12345' and: (aPassword = 'correctPassword')) ifFalse: [ self error: Application authenticationFailedErrorDescription ].! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 18:33:25'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:27'!
ERROR!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:27'!
ERROR!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:33:35' prior: 50863209!
createCartForUser: aUserId password: aPassword 

	AuthSimulator authenticateUserId: aUserId withPassword: aPassword.! !

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:37'!
ERROR!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:37'!
ERROR!
!AuthSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:33:50' prior: 50863235!
authenticateUserId: aUserId withPassword: aPassword

	(aUserId = '12345' and: (aPassword = 'CorrectPassword')) ifFalse: [ self error: Application authenticationFailedErrorDescription ].! !

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:54'!
ERROR!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:33:54'!
ERROR!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:34:22' prior: 50863255!
createCartForUser: aUserId password: aPassword 

	self assertAuthentication.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:34:37' prior: 50863287!
createCartForUser: aUserId password: aPassword 

	self assertAuthentication: aUserId with: aPassword .! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:34:39' prior: 50863293!
createCartForUser: aUserId password: aPassword 

	self assertAuthentication: aUserId with: aPassword.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:34:45'!
assertAuthentication: aUserId with: aPassword! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:34:47' prior: 50863306!
assertAuthentication: aUserId with: aPassword

	AuthSimulator authenticateUserId: aUserId withPassword: aPassword.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:35:12' prior: 50863300!
createCartForUser: aUserId password: aPassword 

	self assertAuthentication: aUserId with: aPassword.
	
	! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/22/2021 18:36:28'!
Object subclass: #Application
	instanceVariableNames: 'lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:36:26' overrides: 16896425!
initialize
	
	lastId := 0.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:37:14' prior: 50863318!
createCartForUser: aUserId password: aPassword 

	| newCartId |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := lastId + 1.	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:37:40' prior: 50863336!
createCartForUser: aUserId password: aPassword 

	| newCartId |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:38:15'!
createAvailableId

	
	lastId := lastId + 1.
	^ lastId
	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:38:18' prior: 50863352!
createAvailableId

	lastId := lastId + 1.
	^ lastId
	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:38:30' prior: 50863344!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	
	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:39:56' prior: 50863362!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	
	newCart := Cart acceptingItemsOf: StoreTestObjectsFactory new defaultCatalog.! !
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:40:55'!
forCatalog: aCatalog

	^ self new for: aCatalog.! !
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:41:04' prior: 50863382!
forCatalog: aCatalog

	^ self new initializeWith: aCatalog.! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/22/2021 18:41:36'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:41:35'!
initializeWith: aCatalog
	
	lastId := 0.
	catalog := aCatalog.! !

!methodRemoval: Application #initialize stamp: 'plp 6/22/2021 18:41:48'!
initialize
	
	lastId := 0.!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:42:01' prior: 50863088!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	invalidUserId := 'Non-registered id'.
	validUserId := 'Registered id'.
	wrongPassword := 'WrongPassword'.
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:42:08' prior: 50863184!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:42:32' prior: 50863371!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	
	newCart := Cart acceptingItemsOf: catalog.
	
	! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:43:10' prior: 50863450!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	
	newCart := Cart acceptingItemsOf: catalog.
	
	^ newCartId ! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:43:35'!
listCartFor: aUserId

	^ OrderedCollection new.! !

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:43:38'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:47:59'!
test03CreateMultipleCartsWithValidUsers

	| app validUserId correctPassword oneCartId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	oneCartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 18:48:00'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 18:48:00'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:48:00'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 18:48:00'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:49:09'!
test04AddToCart

	| app validUserId correctPassword oneCartId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:49:18' prior: 50863510!
test04AddToCart

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:49:33'!
test04AddToCartToInvalidCartId

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	! !

!methodRemoval: ApplicationTest #test04AddToCart stamp: 'plp 6/22/2021 18:49:41'!
test04AddToCart

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:49:54' prior: 50863531!
test04AddToCartToInvalidCartId

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:50:05' prior: 50863551!
test04AddToCartToInvalidCartId

	| app |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:50:58' prior: 50863562!
test04AddToCartToInvalidCartId

	| app isbn |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'
	
	self 
		should: [ app addToCart: 0 with: isbn ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:51:19' prior: 50863569!
test04AddToCartToInvalidCartId

	| app isbn |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'
	
	self 
		should: [ app addToCart: 0 with: isbn ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:51:37' prior: 50863583!
test04AddToCartToInvalidCartId

	| app isbn |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'
	
	self 
		should: [ app addToCart: 0 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 18:55:14'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:55:23' prior: 50863597!
test04AddToCartToInvalidCartId

	| app isbn |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'.
	
	self 
		should: [ app addToCart: 0 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 18:55:24'!
ERROR!
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:55:42'!
invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!Application class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:55:57' prior: 50863632!
invalidCartIdErrorDescription
	
	^ 'Invalid Cart ID'! !

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 18:55:58'!
FAILURE!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:56:32'!
addToCart: aCartId with: anISBN quantity: aQuantity

	self error: Application invalidCartIdErrorDescription ! !

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 18:57:52'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 18:57:52'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 18:57:52'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 18:57:52'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 18:57:52'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:59:18'!
test05AddToCartNonAvailableISBN

	| app isbn |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'.
	
	self 
		should: [ app addToCart: 0 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 18:59:59' prior: 50863670!
test05AddToCartNonAvailableISBN

	| app isbn cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	isbn := '1234567890123'.
	
	cartId := app 
	
	self 
		should: [ app addToCart: 1 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:00:19' prior: 50863684!
test05AddToCartNonAvailableISBN

	| app isbn cartId correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	isbn := '1234567890123'.
	
	self 
		should: [ app addToCart: 1 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:00:40' prior: 50863699!
test05AddToCartNonAvailableISBN

	| app isbn cartId correctPassword validUserId invalidISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: 1 with: isbn quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:01:49' prior: 50863719!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application invalidCartIdErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:02:07' prior: 50863740!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:02:34' prior: 50863761!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
		
	validISBN := 'a'.
		
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:02:59' prior: 50863781!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
		
	validISBN := 'validBook'.
		
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:03:13' prior: 50863809!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
		
	validISBN := 'validBook'.
		
	self 
		should: [ app addToCart: cartId with: validISBN quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:03:22' prior: 50863837!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validISBN quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:03:26'!
FAILURE!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/22/2021 19:04:22'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/22/2021 19:04:20' prior: 50863399!
initializeWith: aCatalog
	
	lastId := 0.
	catalog := aCatalog.
	carts := Dictionary new.! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:05:06' prior: 50863460!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self createAvailableId.	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart.
	
	^ newCartId ! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:05:10'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:05:12'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:05:14'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:05:15'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:05:17'!
FAILURE!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:05:17'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:06:23' prior: 50863646!
addToCart: aCartId with: anISBN quantity: aQuantity

	carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:06:34' prior: 50863941!
addToCart: aCartId with: anISBN quantity: aQuantity

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:06:48' prior: 50863949!
addToCart: aCartId with: anISBN quantity: aQuantity

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	
	cart! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:07:21' prior: 50863957!
addToCart: aCartId with: anISBN quantity: aQuantity

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	cart add: aQuantity of: anISBN.
	! !

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:07:33'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:07:33'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:07:33'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:07:33'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:07:33'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:07:33'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:10:26'!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	self assert: (app listCartFor: cartId) equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:10:31' prior: 50863995!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	self assert: (app listCartFor: cartId) equals: OrderedCollection new.! !

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:10:32'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:10:35'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:10:35'!
PASSED!
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:11:24' prior: 50863470!
listCartFor: aUserId

	carts at: aUserId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:11:43' prior: 50864082!
listCartFor: aCartId

	carts at: aCartId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:12:06' prior: 50864087!
listCartFor: aCartId

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	cart! !
!Cart methodsFor: 'total' stamp: 'plp 6/22/2021 19:13:08'!
items

	^ items! !

!methodRemoval: Cart #items stamp: 'plp 6/22/2021 19:15:44'!
items

	^ items!
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:16:18' prior: 50864092!
listCartFor: aCartId

	|cart|
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	
	catalog keysDo: [
			
	]! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:16:50' prior: 50864105!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [
		
	]! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:17:29' prior: 50864113!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			cart 
	]! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:18:30' prior: 50864123!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
					list add: ( item @ (cart occurrencesOf: item)).
				].
	].! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:18:45' prior: 50864133!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( item @ (cart occurrencesOf: item)).
		].
	].

	^ list! !

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:18:55'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 19:19:12' prior: 50864146!
listCartFor: aCartId

	| cart list |
	
	cart := carts at: aCartId ifAbsent: [ 	self error: Application invalidCartIdErrorDescription ].
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:19:14'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:19:15'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:19:15'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:19:15'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:19:15'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:19:15'!
FAILURE!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:19:15'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:19:43' prior: 50864014!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	self assert: (app listCartFor: cartId) equals: (OrderedCollection new add: (1@validISBN)).! !

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:19:45'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:20:24' prior: 50864202!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId validISBN expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validISBN).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 19:20:26'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'plp 6/22/2021 19:28:51'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'plp 6/22/2021 19:29:52'!
debit: anAmount from: aCreditCard ! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:29:56' prior: 50864284!
debit: anAmount from: aCreditCard! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:11'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:30:21' prior: 50862638!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: MerchantProcessorSimulator 
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:30:29' prior: 50862656!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: MerchantProcessorSimulator 
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:30:38' prior: 50862549!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: MerchantProcessorSimulator
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:30:46' prior: 50862570!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: MerchantProcessorSimulator
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:30:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:30:54' prior: 50862614!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: MerchantProcessorSimulator
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:30:55'!
FAILURE!

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'plp 6/22/2021 19:33:09'!
MerchantProcessorSimulator class
	instanceVariableNames: 'debitBehavior'!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:33:21' prior: 50864289!
debit: anAmount from: aCreditCard

	debitBehavior := [ :anAmountDebited :aCreditCardDebited | ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:34:11' prior: 50864505!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:34:36' prior: 50864547!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:34:37'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:35:29' prior: 50864574!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitedCreditCard := merchantProcessor debitedCreditCard.
	debitedAmout := merchantProcessor debitedAmout.
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:35:33'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:35:43'!
debitedCreditCard
	self shouldBeImplemented.! !

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'plp 6/22/2021 19:35:59'!
MerchantProcessorSimulator class
	instanceVariableNames: 'debitBehavior debitedCreditCard'!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:35:58' prior: 50864636!
debitedCreditCard
	
	^ debitedCreditCard! !

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'plp 6/22/2021 19:36:31'!
MerchantProcessorSimulator class
	instanceVariableNames: 'debitedCreditCard debitBehavior debitedAmount'!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:36:30' prior: 50864541!
debit: anAmount from: aCreditCard

	debitedCreditCard := aCreditCard.
	debitedAmount := anAmount .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:36:44'!
debitedAmount

	^ debitedAmount ! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:36:55' prior: 50864605!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitedCreditCard := merchantProcessor debitedCreditCard.
	debitedAmout := merchantProcessor debitedAmount .
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:36:57'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:37:02' prior: 50864671!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitedCreditCard := merchantProcessor debitedCreditCard.
	debitedAmout := merchantProcessor debitedAmount.
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:37:09' prior: 50864702!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitedCreditCard := merchantProcessor debitedCreditCard.
	debitedAmout := merchantProcessor debitedAmount.
	total := cashier checkOut.

	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:38:01' prior: 50864729!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	debitedCreditCard := merchantProcessor debitedCreditCard.
	debitedAmout := merchantProcessor debitedAmount.

	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:38:03'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:39:59' prior: 50864667!
debitedAmount

	^self new debitedAmount! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:40:24' prior: 50864788!
debitedAmount

	^debitedAmount! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50864756!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:43:44' prior: 50864660!
debit: anAmount from: aCreditCard

	self new debit: anAmount from: aCreditCard ! !

!methodRemoval: MerchantProcessorSimulator class #debitedAmount stamp: 'plp 6/22/2021 19:43:49'!
debitedAmount

	^debitedAmount!

!methodRemoval: MerchantProcessorSimulator class #debitedCreditCard stamp: 'plp 6/22/2021 19:43:53'!
debitedCreditCard
	
	^ debitedCreditCard!

MerchantProcessorSimulator class
	instanceVariableNames: ''!

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'plp 6/22/2021 19:44:01'!
MerchantProcessorSimulator class
	instanceVariableNames: ''!
!MerchantProcessorSimulator methodsFor: 'no messages' stamp: 'plp 6/22/2021 19:44:14'!
debit: anAmount from: aCard! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'plp 6/22/2021 19:44:51'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitedAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:44:49' prior: 50864845!
debit: anAmount from: aCreditCard

	debitedAmount := anAmount .! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'plp 6/22/2021 19:45:46'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:45:45' prior: 50864858!
debit: anAmount from: aCreditCard

	debitedAmount := anAmount .
	debitedCreditCard := aCreditCard .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'plp 6/22/2021 19:46:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:46:05' prior: 50864797!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator .
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'plp 6/22/2021 19:46:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:46:19' prior: 50864888!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator .
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:46:49' prior: 50864927!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard merchantProcessor aCreditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator .
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	debitedAmout := merchantProcessor debitedAmount.
	debitedCreditCard := aCreditCard
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:47:07' prior: 50864954!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator .
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	debitedAmout := merchantProcessor debitedAmount.
	debitedCreditCard := merchantProcessor debitedCreditCard.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:47:13'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:47:17'!
debitedAmount
	self shouldBeImplemented.! !

!methodRemoval: MerchantProcessorSimulator class #debitedAmount stamp: 'plp 6/22/2021 19:47:38'!
debitedAmount
	self shouldBeImplemented.!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:47:58' prior: 50864981!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	debitedAmout := merchantProcessor debitedAmount.
	debitedCreditCard := merchantProcessor debitedCreditCard.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:48:04' prior: 50864313!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: MerchantProcessorSimulator new
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:48:08' prior: 50864355!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: MerchantProcessorSimulator new
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:48:11' prior: 50864395!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: MerchantProcessorSimulator new
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:48:15' prior: 50864440!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: MerchantProcessorSimulator new
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!methodRemoval: MerchantProcessorSimulator class #debit:from: stamp: 'plp 6/22/2021 19:48:38'!
debit: anAmount from: aCreditCard

	self new debit: anAmount from: aCreditCard !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:48:45'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:48:50'!
debitedAmount
	self shouldBeImplemented.
	^debitedAmount! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:48:53' prior: 50865135!
debitedAmount

	^debitedAmount! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:48:56'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:49:03'!
debitedCreditCard
	self shouldBeImplemented.
	^debitedCreditCard! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:49:04' prior: 50865149!
debitedCreditCard
	
	^debitedCreditCard! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:49:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:49:11'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:49:26' prior: 50862588!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	merchantProcessor := MerchantProcessorSimulator new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:49:39' prior: 50865187!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	merchantProcessor := MerchantProcessorSimulator new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:50:29' prior: 50865216!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	merchantProcessor := MerchantProcessorSimulator new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!classRenamed: #MerchantProcessorSimulator as: #MerchantProcessorSimulatorSuccess stamp: 'plp 6/22/2021 19:52:37'!
Smalltalk renameClassNamed: #MerchantProcessorSimulator as: #MerchantProcessorSimulatorSuccess!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865048!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: MerchantProcessorSimulatorSuccess new
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865067!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: MerchantProcessorSimulatorSuccess new
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865021!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulatorSuccess new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	debitedAmout := merchantProcessor debitedAmount.
	debitedCreditCard := merchantProcessor debitedCreditCard.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865106!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: MerchantProcessorSimulatorSuccess new
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865245!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	merchantProcessor := MerchantProcessorSimulatorSuccess new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:52:37' prior: 50865084!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: MerchantProcessorSimulatorSuccess new
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

Object subclass: #MerchantProcessorSimulatorFailed
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulatorFailed category: 'TusLibros' stamp: 'plp 6/22/2021 19:52:50'!
Object subclass: #MerchantProcessorSimulatorFailed
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:53:01' prior: 50865367!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	merchantProcessor := MerchantProcessorSimulatorFailed new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:53:05' prior: 50865434!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulatorFailed new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'plp 6/22/2021 19:53:17' prior: 50865463!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard merchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulatorFailed new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!MerchantProcessorSimulatorFailed methodsFor: 'no messages' stamp: 'plp 6/22/2021 19:53:34'!
debit: anAmount from: aCreditCard

	self error: Cashier creditCardHasNoCreditErrorMessage! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:53:37'!
PASSED!

!methodRemoval: CashierTest #debit:from: stamp: 'plp 6/22/2021 19:56:38'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:56:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:56:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:56:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:56:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:56:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:56:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:56:49'!
PASSED!
!CashierTest methodsFor: 'setup' stamp: 'plp 6/22/2021 19:56:53' prior: 50862673 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'plp 6/22/2021 19:56:57'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:57:00'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'plp 6/22/2021 19:57:38'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorFailed
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulatorFailed category: 'TusLibros' stamp: 'plp 6/22/2021 19:57:47'!
MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorFailed
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorSuccess
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulatorSuccess category: 'TusLibros' stamp: 'plp 6/22/2021 19:57:50'!
MerchantProcessorSimulator subclass: #MerchantProcessorSimulatorSuccess
	instanceVariableNames: 'debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'plp 6/22/2021 19:58:09'!
debit: anAmount from: aCreditCard

	self subclassResponsibility ! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:58:10' prior: 50865634!
debit: anAmount from: aCreditCard

	self subclassResponsibility.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 19:58:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 19:58:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 19:58:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 19:58:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 19:58:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 19:58:12'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 19:59:30'!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId validISBN expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	! !

DateAndTime now!

DateAndTime now!

DateAndTime now + 30 minutes !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:02:34' prior: 50865665!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId validISBN expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	validISBN := 'validBook'.		
	app addToCart: cartId with: validISBN quantity: 1.
	
	! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/22/2021 20:02:55'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:02:53' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:03:41' prior: 50865684!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId validISBN expectedList invalidCreditCard |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	validISBN := 'validBook'.		
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCreditCard := testObjectsFactory.! !

Object subclass: #CreditCard
	instanceVariableNames: 'number owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'plp 6/22/2021 20:11:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner expiresOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:11:36' prior: 50862697!
isExpiredOn: aDate 
	
	^expiresOn start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'initialization' stamp: 'plp 6/22/2021 20:11:39' prior: 50862703!
initializeExpiringOn: aMonth 
	
	expiresOn := aMonth ! !
!CreditCard methodsFor: 'initialization' stamp: 'plp 6/22/2021 20:11:53'!
forNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear

	number := aCardNumber. 
	owner := anOwner.
	expiresOn := aMonthOfYear.! !
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:12:32'!
owner
	^owner! !
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:12:36'!
number
	^ number! !
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:12:40'!
expiresOn
	^expiresOn! !
!CreditCard class methodsFor: 'instance creation' stamp: 'plp 6/22/2021 20:13:02'!
assertCardNumber: aCardNumber
	
	((aCardNumber numberOfDigitsInBase: 10) = 16) ifFalse: [ self error: self invalidCardErrorMessage ].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'plp 6/22/2021 20:13:09'!
assertCardOwner: anOwner
	
	((anOwner withBlanksTrimmed isEmpty) or: (anOwner size > 30))
		ifTrue: [ self error: self invalidCardErrorMessage ].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'plp 6/22/2021 20:13:13'!
invalidCardErrorMessage

	^'Invalid card'.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'plp 6/22/2021 20:13:19'!
withNumber: aCardNumber 
	
	self assertCardNumber: aCardNumber.
	^ self new forNumber: aCardNumber.! !

!methodRemoval: CreditCard class #withNumber: stamp: 'plp 6/22/2021 20:13:27'!
withNumber: aCardNumber 
	
	self assertCardNumber: aCardNumber.
	^ self new forNumber: aCardNumber.!
!CreditCard class methodsFor: 'instance creation' stamp: 'plp 6/22/2021 20:13:34'!
withNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear
				
	self assertCardNumber: aCardNumber.
	self assertCardOwner: anOwner.

	^ self new forNumber: aCardNumber owner: anOwner expiresOn: aMonthOfYear! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:14:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:14:52'!
PASSED!

TestCase subclass: #CardTest
	instanceVariableNames: 'expirationDate validOwner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'plp 6/22/2021 20:15:11'!
TestCase subclass: #CardTest
	instanceVariableNames: 'expirationDate validOwner validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CardTest as: #CreditCardTest stamp: 'plp 6/22/2021 20:15:20'!
Smalltalk renameClassNamed: #CardTest as: #CreditCardTest!
!CreditCardTest methodsFor: 'no messages' stamp: 'plp 6/22/2021 20:15:29'!
test01CanNotCreateACardWithNumberDigitsNotEqualsTo16

	self 
		should: [ CreditCard withNumber: 1234567890123456123543154154 owner: validOwner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = CreditCard invalidCardErrorMessage. ].
		
	self 
		should: [ CreditCard withNumber: 123 owner: validOwner expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = CreditCard invalidCardErrorMessage. ].! !

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/22/2021 20:15:41'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/22/2021 20:15:41'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:15:48'!
test02CanNotCreateACardWithEmptyOwner

	self 
		should: [ CreditCard withNumber: validNumber owner: '' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = CreditCard invalidCardErrorMessage. ].
		
	self 
		should: [ CreditCard withNumber: validNumber owner: '    ' expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = CreditCard invalidCardErrorMessage. ].
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:16:00'!
test03CanCreateACardWithValidNumberAndOwner

	|card |
	card := CreditCard withNumber: validNumber owner: validOwner expiresOn: expirationDate.
	
	self assert: card number equals: validNumber.
	self assert: card owner equals: validOwner.
	self assert: card expiresOn equals: expirationDate.

! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:16:08'!
test04CanNotCreateACardWithExceededLengthOwner

	self 
		should: [ 
			CreditCard withNumber: validNumber 
				owner: 'este nombre es mas largo de 30 caracteres' 
				expiresOn: expirationDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: anError messageText = CreditCard invalidCardErrorMessage. ].
		
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:16:28' overrides: 16927572!
setUp
	
	| today |
	today := GregorianMonthOfYear current.
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.! !

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/22/2021 20:16:33'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/22/2021 20:16:33'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/22/2021 20:16:33'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/22/2021 20:16:33'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:18:49' prior: 50862790!
notExpiredCreditCard
	
	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:19:20' prior: 50865971!
notExpiredCreditCard
	
	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	^ CreditCard withNumber: validNumber owner: validOwner expiresOn: expirationDate.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:20:01' prior: 50862797!
expiredCreditCard

	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:20:34' prior: 50865999!
expiredCreditCard

	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber - 1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:20:43' prior: 50866013!
expiredCreditCard

	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) +1 monthNumber: today monthNumber - 1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	^ CreditCard withNumber: validNumber owner: validOwner expiresOn: expirationDate.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'plp 6/22/2021 20:21:07' prior: 50866024!
expiredCreditCard

	| expirationDate validNumber validOwner |
	expirationDate := GregorianMonthOfYear yearNumber: (today year number) monthNumber: (today monthNumber) - 1.
	validOwner := 'Alan Kay'.
	validNumber := 1234567890123456.
	
	^ CreditCard withNumber: validNumber owner: validOwner expiresOn: expirationDate.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:21:22'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:21:24'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'plp 6/22/2021 20:21:46' prior: 50862804 overrides: 16896425!
initialize

	today := GregorianMonthOfYear current.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:21:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:21:49'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:21:49'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:21:49'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:21:49'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:21:49'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:21:51'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:22:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:22:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:22:24'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:22:24'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:22:24'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:22:24'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:22:24'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:22:30'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:22:49' prior: 50865744!
isExpiredOn: aDate 
	
	^expiresOn < (Month month: aDate monthIndex year: aDate yearNumber) start ! !

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/22/2021 20:22:52'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/22/2021 20:22:52'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/22/2021 20:22:52'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/22/2021 20:22:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:22:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:22:54'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:22:54'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:22:54'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:22:54'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:22:54'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:22:58'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'plp 6/22/2021 20:23:41' prior: 50866128!
isExpiredOn: aDate 
	
	^expiresOn < aDate.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:23:43'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/22/2021 20:23:49'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/22/2021 20:23:49'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:25:08' prior: 50865714!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId validISBN expectedList invalidCreditCard |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	validISBN := 'validBook'.		
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCreditCard := testObjectsFactory notExpiredCreditCard.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:27:52' prior: 50866280!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	invalidCardNumber := 123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := 202001! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:28:14' prior: 50866299!
test07CheckOutCartInvalidCardNumber

	| app cartId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	invalidCardNumber := 123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := 202001! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:29:48' prior: 50866312!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := nil.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:32:24' prior: 50866324!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [
			app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:32:30' prior: 50866341!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [
			app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		]
		! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:32:57' prior: 50866362!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [
			app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:33:12' prior: 50866383!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [
			app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/22/2021 20:33:18' prior: 50866407!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/22/2021 20:33:23'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 20:33:59'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	! !
!Application methodsFor: 'communication' stamp: 'plp 6/22/2021 20:34:13' prior: 50866460!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	self error: CreditCard invalidCardErrorMessage ! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/22/2021 20:34:20'!
PASSED!

----SNAPSHOT----(22 June 2021 20:37:52) CuisUniversity-4532.image priorSource: 16885703!

----QUIT----(22 June 2021 20:37:55) CuisUniversity-4532.image priorSource: 17115242!

----STARTUP---- (23 June 2021 20:22:56) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!


!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 20:46:54'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 20:46:54'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 20:46:54'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 20:46:54'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/23/2021 20:46:55'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/23/2021 20:46:55'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:53:44'!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:53:54' prior: 50866595!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:54:00' prior: 50866620!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:54:27' prior: 50866645!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
		app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration
	"self should: [  . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ]."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:54:29' prior: 50866670!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration
	"self should: [  . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ]."! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:54:30'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:56:40' prior: 50866467!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	"self error: CreditCard invalidCardErrorMessage "! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:56:50' prior: 50866723!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	"self error: CreditCard invalidCardErrorMessage "! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:57:32' prior: 50866731!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	card := self createCardwith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	"self error: CreditCard invalidCardErrorMessage "! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:57:56' prior: 50866739!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	"self error: CreditCard invalidCardErrorMessage "! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:58:04'!
createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	
	"self error: CreditCard invalidCardErrorMessage "! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:58:26' prior: 50866761!
createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	self error: CreditCard invalidCardErrorMessage! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 20:58:32' prior: 50866750!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:58:39'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:58:39'!
ERROR!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:58:39'!
ERROR!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 20:58:45'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:58:46'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:58:46'!
ERROR!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:58:46'!
ERROR!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:58:58'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:59:00'!
ERROR!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:59:00'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 20:59:20' prior: 50866695!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.

	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 20:59:21'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 20:59:22'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 20:59:22'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:00:13' prior: 50866863!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.

	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:01:26' prior: 50866919!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.

	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:01:28'!
FAILURE!

'abcde' at: 1!

'abcde' 	copyFrom: 1 to: 2!

('012021' 	copyFrom: 1 to: 2)!

('012021' 	copyFrom: 1 to: 2) asNumber !

('012021' 	copyFrom: 1 to: 2) asNumber!

('012021' 	copyFrom: 3 to: 5) asNumber!

('012021' 	copyFrom: 3 to: 6) asNumber!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:05:45' prior: 50866769!
createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString
	
	| expirationMonth expirationYear |
	
	expirationMonth := (aCardExpirationString 	copyFrom: 1 to: 2) asNumber .
	expirationYear := (aCardExpirationString 	copyFrom: 3 to: 6) asNumber .
	
	self error: CreditCard invalidCardErrorMessage! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:07:55' prior: 50866979!
createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString
	
	| expirationMonth expirationYear expiration |
	
	expirationMonth := (aCardExpirationString 	copyFrom: 1 to: 2) asNumber .
	expirationYear := (aCardExpirationString 	copyFrom: 3 to: 6) asNumber .
	
	expiration := GregorianMonthOfYear yearNumber: expirationYear monthNumber: expirationMonth .
	
	^ CreditCard withNumber: aCardNumber owner: aCardOwner expiresOn: expiration ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:08:01' prior: 50866776!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:08:15' prior: 50867010!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 21:08:55'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 21:08:52' prior: 50863903!
initializeWith: aCatalog
	
	lastId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	cashier := Cashier new.! !
!Cashier class methodsFor: 'instance creation' stamp: 'plp 6/23/2021 21:14:29' prior: 50862508!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^ self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 21:18:09'!
PASSED!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:18:47' prior: 50867020!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage .! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:18:52'!
FAILURE!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:18:52'!
FAILURE!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:19:00'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:19:27' prior: 50866943!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration.

	"self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ]."! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:19:29'!
ERROR!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:19:29'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:19:41' prior: 50867083!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration.

	"self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ]."! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:19:43'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:19:50' prior: 50867118!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 21:20:10'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:20:10'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:20:36'!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!methodRemoval: ApplicationTest #test07CheckOutCartInvalidCardNumber stamp: 'plp 6/23/2021 21:20:40'!
test07CheckOutCartInvalidCardNumber

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:21:29' prior: 50867203!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:21:31' prior: 50867253!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:21:35' prior: 50867288!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:22:03' prior: 50867323!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:22:10' prior: 50867358!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:22:29' prior: 50867394!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:23:16' prior: 50867431!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:23:23' prior: 50867475!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:23:45' prior: 50867520!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:23:48'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:23:48'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:26:18'!
test08CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:26:26'!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

!methodRemoval: ApplicationTest #test08CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:26:26'!
test08CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:26:36' prior: 50867686!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:26:48' prior: 50867737!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

GregorianDayOfMonth today !

GregorianDay today !

GregorianDateTime today !

GregorianDateTime now !

GregorianDateTime now year!

GregorianDateTime now year asNumber !

(GregorianDateTime now year) asNumber !

(GregorianDateTime now year)!

GregorianDateTime now year number !

GregorianDateTime now year number asString !

GregorianDateTime now month number asString !

GregorianDateTime now !

GregorianDateTime now monthOfYear !

GregorianDateTime now monthOfYear asString !

GregorianDateTime now monthOfYear!

GregorianDateTime now monthOfYear monthNumber !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:29:32' prior: 50867763!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := (GregorianDateTime now year number asString)
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:29:38' prior: 50865708 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	
	GregorianDateTime now monthOfYear monthNumber ! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:29:45' prior: 50867810!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := 
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:29:51' prior: 50867848!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := 'aa'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:30:01' prior: 50867841 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	GregorianDateTime now year number asString .
	GregorianDateTime now monthOfYear monthNumber .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:30:24' prior: 50867906 overrides: 16927572!
setUp 

	| validYear |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := GregorianDateTime now year number asString .
	GregorianDateTime now monthOfYear monthNumber .
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:30:44' prior: 50867915 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := GregorianDateTime now year number asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber .
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:30:56' prior: 50867925 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber .
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:31:03' prior: 50867936 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1.
	
	! !

GregorianDateTime now monthOfYear !

GregorianDateTime now monthOfYear monthNumber !

GregorianDateTime now monthOfYear monthNumber digitAt: 1 put: 0!

GregorianDateTime now monthOfYear monthNumber!

GregorianDateTime now monthOfYear monthNumber digitLength !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:33:22' prior: 50867947 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ]
	! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 21:33:44'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:33:42' prior: 50867966 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:33:55' prior: 50867877!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:34:06' prior: 50868005!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .! !

Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 21:35:22'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 21:35:37'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts salesbook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 21:35:36' prior: 50867038!
initializeWith: aCatalog
	
	lastId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesbook := OrderedCollection new.! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 21:35:45'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts salesbook salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 21:35:43' prior: 50868078!
initializeWith: aCatalog
	
	lastId := 0.
	catalog := aCatalog.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !

Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 21:35:48'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:36:20' prior: 50867061!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:36:58' prior: 50868034!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	self assert: (app listPurchases) size equals: 1 .! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:37:00'!
ERROR!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:37:07'!
listPurchases
	self shouldBeImplemented.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:37:11' prior: 50868155!
listPurchases
	
	^ 1! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:37:13'!
ERROR!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:37:19'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:37:43' prior: 50868126!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	self assert: (app listPurchases size) equals: 1 .! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:37:51' prior: 50868160!
listPurchases
	
	^ #('a')! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:37:55'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:38:22' prior: 50868171!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	self assert: app listPurchases equals: #().! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:39:25' prior: 50868205!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: 1)
	
	self assert: app listPurchases equals: sales.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:39:31' prior: 50868231!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: 1)
	
	self assert: (app listPurchases) equals: sales.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:39:36' prior: 50868259!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: 1) .
	
	self assert: (app listPurchases) equals: sales.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:39:51' prior: 50868287!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: 10) .
	
	self assert: (app listPurchases) equals: sales.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:40:22' prior: 50868315!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice ) .
	
	self assert: (app listPurchases) equals: sales.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:40:23' prior: 50868343!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
	
	sales := OrderedCollection new.
	sales add: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice) .
	
	self assert: (app listPurchases) equals: sales.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:40:27'!
FAILURE!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:40:57' prior: 50868197!
listPurchases
	
	
	^ #()! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:41:41' prior: 50868406!
listPurchases
	
	salesBook add: (Sale do: StoreTestObjectsFactory new itemSellByTheStorePrice )
	^ salesBook! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:41:44' prior: 50868410!
listPurchases
	
	salesBook add: (Sale do: StoreTestObjectsFactory new itemSellByTheStorePrice ) .
	^ salesBook! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:41:49'!
ERROR!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:41:49'!
ERROR!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:42:01' prior: 50868417!
listPurchases
	
	salesBook add: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice ) .
	^ salesBook! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:42:04'!
FAILURE!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:42:04'!
FAILURE!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:42:17'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:43:33' prior: 50868373!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sales |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		
	self assert: (app listPurchases first) equals: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:43:35'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:43:49' prior: 50868448!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		
	self assert: (app listPurchases first) = (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:43:51'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:44:04' prior: 50868479!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		
	self assert: (app listPurchases first) equals: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:44:33' prior: 50868510!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first) equals: sale.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:44:37'!
FAILURE!

self first!

self first total!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:45:36' prior: 50868538!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:45:37'!
FAILURE!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:45:37'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:45:37'!
FAILURE!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:45:44'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:45:46'!
FAILURE!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:45:46'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:46:54' prior: 50868113!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cashier cart |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	"cashier := Cashier toCheckout:  charging:  throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:47:08' prior: 50868649!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cashier cart |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	"cashier := Cashier toCheckout: cart charging:  throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:47:17' prior: 50868665!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cart |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	"cashier := Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:48:42' prior: 50868681!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: MerchantProcessorSimulatorSuccess new
					on: self today
					registeringOn: salesBook.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:50:32'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString aProcessor: throught 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: MerchantProcessorSimulatorSuccess new
					on: self today
					registeringOn: salesBook.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:32' prior: 50867150!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:32' prior: 50867574!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:32' prior: 50868572!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration aProcessor: aMerchantProcessor .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.! !

!methodRemoval: Application #checkOutCart:withCardNumber:owner:expiresOn: stamp: 'plp 6/23/2021 21:50:32'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: MerchantProcessorSimulatorSuccess new
					on: self today
					registeringOn: salesBook.!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:50:54'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: throught 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: MerchantProcessorSimulatorSuccess new
					on: self today
					registeringOn: salesBook.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:54' prior: 50868740!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: aMerchantProcessor ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:54' prior: 50868827!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: aMerchantProcessor .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:50:54' prior: 50868767!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: aMerchantProcessor . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!methodRemoval: Application #checkOutCart:withCardNumber:owner:expiresOn:aProcessor: stamp: 'plp 6/23/2021 21:50:54'!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString aProcessor: throught 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: MerchantProcessorSimulatorSuccess new
					on: self today
					registeringOn: salesBook.!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:51:03' prior: 50868878!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	
	cart := 	carts at: aCartId .
	" Cashier toCheckout: cart charging: card throught:  on:  registeringOn: "
	"self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."
	
	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook.! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 21:51:54'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 21:51:55'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:51:53' prior: 50867989 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:52:08' prior: 50868958!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:52:13'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:52:17' prior: 50868900!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:52:19'!
FAILURE!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:52:19'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:52:28' prior: 50868927!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.! !
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 21:53:19'!
today

	^ GregorianMonthOfYear current.! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:53:34'!
FAILURE!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:53:34'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:54:02' prior: 50869039!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook.! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:54:34'!
FAILURE!

self isEmpty !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:55:35' prior: 50869163!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:55:39' prior: 50869257!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	validISBN := 'validBook'.
	app addToCart: cartId with: validISBN quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:55:46' prior: 50869079 overrides: 16927572!
setUp 

	| validYear validMonth validISBN |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validISBN := 'validBook'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:55:58' prior: 50869317 overrides: 16927572!
setUp 

	| validYear validMonth validISBN |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validISBN := StoreTestObjectsFactory new itemSellByTheStore .! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/23/2021 21:56:26'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:56:25' prior: 50869339 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:56:37' prior: 50869287!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:56:44' prior: 50869196!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.! !

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:56:47'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/23/2021 21:57:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/23/2021 21:57:04'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:57:12'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:57:12'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:57:27' prior: 50869423!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app listPurchases.
	
	self assert: (salesBook first total) equals: sale total.
	self assert: (salesBook size) equals: 1.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:57:28'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:57:28'!
PASSED!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:58:06' prior: 50868431!
listPurchases
	
	"salesBook add: (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice ) ."
	^ salesBook! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:58:27' prior: 50869237!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook.
					
	cashier checkOut .! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 21:58:30' prior: 50869684!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook .
					
	cashier checkOut .! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 21:58:38'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 21:58:38'!
PASSED!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 21:59:06' prior: 50869677!
listPurchases
	
	^ salesBook! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:08:37'!
salesBook
	
	^ salesBook! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:08:37' prior: 50869612!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: (salesBook first total) equals: sale total.
	self assert: (salesBook size) equals: 1.! !

!methodRemoval: Application #listPurchases stamp: 'plp 6/23/2021 22:08:37'!
listPurchases
	
	^ salesBook!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:08:43'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:08:43'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:09:11' prior: 50869757!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: (salesBook first total) equals: sale total.
	self assert: (salesBook size) equals: 1.! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 22:10:05'!
Object subclass: #Application
	instanceVariableNames: 'lastId catalog carts salesBook lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 22:10:04' prior: 50868093!
initializeWith: aCatalog
	
	lastId := 0 .
	catalog := aCatalog .
	carts := Dictionary new .
	salesBook := OrderedCollection new .
	lastTransactionId := 0 .! !

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 22:10:18'!
Object subclass: #Application
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:10:18' prior: 50869866!
initializeWith: aCatalog
	
	lastCartId := 0 .
	catalog := aCatalog .
	carts := Dictionary new .
	salesBook := OrderedCollection new .
	lastTransactionId := 0 .! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:10:18' prior: 50863357!
createAvailableId

	lastCartId := lastCartId + 1.
	^ lastCartId
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:11:37' prior: 50869701!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook .
					
	cashier checkOut .
	
	^ self getLastTransactionId! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:12:38' prior: 50863909!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart.
	
	^ newCartId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:13:03' prior: 50869897!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook .
					
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:13:04' prior: 50869927!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 	toCheckout: cart 
					charging: card
					throught: aProcessor
					on: self today
					registeringOn: salesBook .
					
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:13:19' prior: 50869826!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: (salesBook first total) equals: sale total.
	self assert: (salesBook size) equals: 1.
	self assert: transactionId equals: 1.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:20'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:23'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:13:24'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:24'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:13:52' prior: 50869966!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: (salesBook first total) equals: sale total.
	self assert: transactionId equals: 1.! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:13:54'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:13:54'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:14:02' prior: 50870102!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:14:47'!
test09CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:15:08' prior: 50870199!
test09CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:15:38' prior: 50870231!
test09CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	anotherTransactionId := app checkOutCart: anotherCartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
			
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:16:20' prior: 50870268!
test09CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:16:24'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:16:24'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:22:31'!
test10ListPurchases

	| app cartId correctPassword validUserId cardExpiration cardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:22:38' prior: 50870386!
test10ListPurchases

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:22:45' prior: 50870397!
test10ListPurchases

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:24:42' prior: 50869946!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 
				toCheckout: cart 
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:36:25' prior: 50870417!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 
				toCheckout: cart 
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:37:12'!
test10ListPurchasesOfNonExistingUser

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:37:24' prior: 50870456!
test10ListPurchasesOfNonExistingUser

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := 'Non-Existing user id'.
	correctPassword := 'CorrectPassword'.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:37:32' prior: 50870466!
test10ListPurchasesOfNonExistingUser

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := 'Non-Existing user id'.
	correctPassword := 'CorrectPassword'.
	
	self! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:38:48' prior: 50870477!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	
	self 
		should: [ app listPurchases: nonExistingUserId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application nonExistingUserErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:39:24' prior: 50870488!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	
	self 
		should: [ app listPurchases: nonExistingUserId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:39:40' prior: 50870504!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchases: nonExistingUserId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:39:50' prior: 50870520!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchases: nonExistingUserId password: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:40:08' prior: 50870537!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:40:14'!
FAILURE!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:40:57'!
listPurchasesFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:41:08' prior: 50870574!
listPurchasesFor: aString withPassword: aString2 
	
	self error: Application authenticationFailedErrorDescription ! !

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test10ListPurchases stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:41:09'!
PASSED!

!methodRemoval: ApplicationTest #test10ListPurchases stamp: 'plp 6/23/2021 22:41:16'!
test10ListPurchases

	| app correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.!
!Application methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:42:17' prior: 50870580!
listPurchasesFor: aUserID withPassword: aPassword
	
	"self assertAuthentication: aUserId with: aPassword."
	
	self error: Application authenticationFailedErrorDescription ! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:43:46'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'plp 6/23/2021 22:43:49'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'plp 6/23/2021 22:43:49'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:44:10'!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !

!methodRemoval: ApplicationTest #test10ListPurchasesOfNonExistingUser stamp: 'plp 6/23/2021 22:44:10'!
test10ListPurchasesOfNonExistingUser

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:44:40' prior: 50870784!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := 'Non-Existing user id'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:44:50' prior: 50870819!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := 'Non-Existing user id'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:44:51'!
PASSED!

!testRun: #ApplicationTest #test10ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:44:51'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:45:08' prior: 50870847!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := '1234'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:45:27' prior: 50870917!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := 'Registered id'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:04'!
test11ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:08' prior: 50870971!
test11ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:24'!
test10CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !

!methodRemoval: ApplicationTest #test09CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:46:24'!
test09CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:30'!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := 'Registered id'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !

!methodRemoval: ApplicationTest #test10ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:46:30'!
test10ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	validUserId := 'Registered id'.
	password := 'WrongPassword' .
	
	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:36'!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !

!methodRemoval: ApplicationTest #test11ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:46:36'!
test11ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:46:46' prior: 50871141!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:47:00' prior: 50871177!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	
	app listPurchasesFor: nonExistingUserId withPassword: password .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:47:08' prior: 50871196!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app nonExistingUserId password correctPassword validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	
	app listPurchasesFor: validUserId withPassword: correctPassword .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:48:12' prior: 50871210!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:48:25' prior: 50871224!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	self assert: self.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:48:56' prior: 50871238!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	self assert: purchases equals: OrderedCollection new.! !

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:48:57'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:49:19' prior: 50870640!
listPurchasesFor: aUserId withPassword: aPassword
	
	self assertAuthentication: aUserId with: aPassword.
	! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:49:22'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:49:22'!
FAILURE!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:49:22'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:49:33' prior: 50871272!
listPurchasesFor: aUserId withPassword: aPassword
	
	self assertAuthentication: aUserId with: aPassword.
	
	^ OrderedCollection new.! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:49:35'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:49:35'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:49:45' prior: 50871253!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:51:29'!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:51:54' prior: 50871390!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId invalidCardNumber transactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	invalidCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:05' prior: 50871406!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId invalidCardNumber transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:16' prior: 50870168!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:20' prior: 50871467!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:25' prior: 50871499!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:28' prior: 50871531!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:40' prior: 50869394!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:52:46' prior: 50871595!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:53:00' prior: 50871436!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:53:09' prior: 50871652!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	
	self assert: purchases equals: OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:54:18' prior: 50871682!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := OrderedCollection new.
	result add: 1@validIsbn .
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:54:20' prior: 50871711!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := OrderedCollection new.
	result add: 1@validIsbn .
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 22:54:39'!
FAILURE!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:55:19' prior: 50871742!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := OrderedCollection new.
	result add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:55:35' prior: 50871777!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := (OrderedCollection new)@10.
	result add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

1@2!

(1@2) x !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:56:04' prior: 50871808!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := (OrderedCollection new)@10.
	(result x) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 22:56:06'!
ERROR!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:56:16' prior: 50871839!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result x) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:56:54' prior: 50871874!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 22:56:58'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:57:19' prior: 50871325!
listPurchasesFor: aUserId withPassword: aPassword
	
	self assertAuthentication: aUserId with: aPassword.
	
	^ 0@OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 22:57:28' prior: 50871375!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.! !

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:57:29'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 22:57:29'!
FAILURE!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 22:57:29'!
FAILURE!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 22:57:33'!
PASSED!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 22:58:40'!
Object subclass: #Application
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Application category: 'TusLibros' stamp: 'plp 6/23/2021 22:58:41'!
Object subclass: #Application
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Application methodsFor: 'initialization' stamp: 'plp 6/23/2021 22:58:38' prior: 50869883!
initializeWith: aCatalog
	
	lastCartId := 0 .
	catalog := aCatalog .
	carts := Dictionary new .
	salesBook := OrderedCollection new .
	lastTransactionId := 0 .
	cartOwners := Dictionary new .
	purchases := Dictionary new . ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:59:18' prior: 50869915!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart.
	cartOwners add: newCartId->aUserId 
	
	^ newCartId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 22:59:39' prior: 50870436!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 
				toCheckout: cart 
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:00:17' prior: 50872061!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier userId |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 
				toCheckout: cart 
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	userId := cartOwners at: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:01:19' prior: 50872081!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor 

	| card cart cashier |
	
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .
	cart := 	carts at: aCartId .

	cashier := Cashier 
				toCheckout: cart 
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
					
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:01:31'!
addPurchase: aCartId
	
	| userId |
	userId := cartOwners at: aCartId .! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:04:48' prior: 50872122!
addPurchase: aCartId
	
	| userId |
	
	userId := cartOwners at: aCartId .
	
	" Ver si no tiene compras "
	purchases at: userId ifAbsent: [ 
		purchases at: userId put: OrderedCollection new
	]! !

d := Dictionary new!

d at: 1 ifAbsent: [ OrderedCollection new ]!

d at: 1!

d at: 1 ifAbsent: [ d add: 1->OrderedCollection new. d at: 1 ].!

d at: 1!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:08:46' prior: 50872128!
addPurchase: aCartId
	
	| userId |
	
	userId := cartOwners at: aCartId .
	
	purchases at: userId ifAbsent: [ 
		purchases at: userId put: OrderedCollection new .
		purchases at: userId .
	]! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:08:55' prior: 50872142!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases at: userId put: OrderedCollection new .
		purchases at: userId .
	]! !

d add: 1->2!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:09:26' prior: 50872151!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->OrderedCollection new .
		purchases at: userId .
	]! !

d at: 2 put: 3!

d at: 1!

d at: 2!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:10:51' prior: 50872162!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->OrderedCollection new .
		purchases at: userId .
	] .
	
	purchasesCollection add: aCartId ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:10:52' prior: 50872174!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->OrderedCollection new .
		purchases at: userId .
	] .
	
	purchasesCollection add: aCartId .! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:11:03' prior: 50872186!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->OrderedCollection new .
		purchases at: userId .
	] .
	
	purchasesCollection add: aCartId .
	^ purchasesCollection ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:11:18' prior: 50872198!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->OrderedCollection new .
		purchases at: userId .
	] .
	
	purchasesCollection add: aCartId .! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:11:34' prior: 50872048!
createCartForUser: aUserId password: aPassword 

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->newCart .
	cartOwners add: newCartId->aUserId .
	
	^ newCartId ! !

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:12:12'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:12:13'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:12:13'!
FAILURE!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:12:13'!
FAILURE!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:13:59'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:14:02'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:14:03'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:14:03'!
FAILURE!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:14:03'!
FAILURE!
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:17:28' prior: 50872211!
addPurchase: aCartId
	
	| userId purchasesCollection |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	purchasesCollection add: aCartId .! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:17:57' prior: 50872342!
addPurchase: aCartId
	
	| userId purchasesCollection cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId 
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:18:22' prior: 50872353!
addPurchase: aCartId
	
	| userId purchasesCollection cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesCollection := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:19:20' prior: 50872366!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		purchasesDict at: cartItems y
	]
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:19:26' prior: 50872379!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		purchasesDict at: (cartItems y)
	]
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:20:34' prior: 50872393!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		| bookTotalPurchases |
		bookTotalPurchases := purchasesDict at: (cartItems y) ifAbsent: [
		
		] .
	]
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:20:57' prior: 50872408!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		| bookTotalPurchases |
		bookTotalPurchases := purchasesDict at: (cartItems y) ifAbsent: [
			purchasesDict add: (cartItems y)->(cartItems x)
		] .
	]
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:21:47' prior: 50872425!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		| bookTotalPurchases |
		bookTotalPurchases := purchasesDict at: (cartItems y) ifAbsent: [
			purchasesDict add: (cartItems y)->0 .
			purchasesDict at: (cartItems y) .
		] .
		bookTotalPurchases := bookTotalPurchases + purchasesDict at: (cartItems y)
	]
	
	"purchasesCollection add: aCartId ."! !

d at: 5!

d at: 5 put: 0!

d at: 2 put: 3.!

d at: 2 put: 4.!

d at: 2!
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:24:18' prior: 50872443!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		purchasesDict at: (cartItems y) ifAbsent: [			purchasesDict add: (cartItems y)->0 ] .
		purchasesDict at: (cartItems y) put: ( purchasesDict at: (cartItems y) )
	]
	
	"purchasesCollection add: aCartId ."! !
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:24:59' prior: 50872467!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [
		purchasesDict at: (cartItems y) ifAbsent: [			purchasesDict add: (cartItems y)->0 ] .
		purchasesDict at: (cartItems y) put: ( purchasesDict at: (cartItems y) + (cartItems x))
	]
	
	"purchasesCollection add: aCartId ."! !

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:26:15'!
ERROR!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:26:25'!
ERROR!
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:26:49' prior: 50872486!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [ :item |
		purchasesDict at: (item y) ifAbsent: [			purchasesDict add: (item y)->0 ] .
		purchasesDict at: (item y) put: ( purchasesDict at: (item y) + (item x))
	]
	
	"purchasesCollection add: aCartId ."! !

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:27:01'!
ERROR!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:27:11'!
ERROR!
!Application methodsFor: 'private' stamp: 'plp 6/23/2021 23:27:32' prior: 50872512!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId .
	
	cartItems do: [ :item |
		purchasesDict at: (item y) ifAbsent: [			purchasesDict add: (item y)->0 ] .
		purchasesDict at: (item y) put: ( (purchasesDict at: (item y)) + (item x))
	]
	
	"purchasesCollection add: aCartId ."! !

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:27:38'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:27:38'!
FAILURE!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:27:38'!
FAILURE!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:30:32' prior: 50871940!
listPurchasesFor: aUserId withPassword: aPassword
	
	| userPurchases |
	self assertAuthentication: aUserId with: aPassword.
	
	userPurchases := (purchases at: aUserId) asOrderedCollection .
	
	^ 0@OrderedCollection new.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:32:09' prior: 50872609!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total |
	self assertAuthentication: aUserId with: aPassword.
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		
	] .
	
	^ 0@OrderedCollection new.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:32:53' prior: 50872619!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		
	] .
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:33:15' prior: 50872629!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		
	] .
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:33:48' prior: 50872641!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		self addTotal: key quantity: value to: total .
	] .
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:34:24'!
addTotal: anISBN quantity: aQuantity
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:34:51' prior: 50872654!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + self addTotal: key quantity: value .
	] .
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:35:02' prior: 50872673!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + self getTotal: key quantity: value .
	] .
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:35:14'!
getTotal: anISBN quantity: aQuantity
	! !

!methodRemoval: Application #addTotal:quantity: stamp: 'plp 6/23/2021 23:35:14'!
addTotal: anISBN quantity: aQuantity
	!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:35:20' prior: 50872702!
getTotal: anISBN quantity: aQuantity
	
	! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:35:38' prior: 50872710!
getTotal: anISBN quantity: aQuantity
	
	^ catalog at: anISBN ! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:36:18' prior: 50872715!
getTotal: anISBN quantity: aQuantity
	
	^ (catalog at: anISBN) * aQuantity ! !

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:36:30'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:36:49' prior: 50872688!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] .
	
	^ total@collection.! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:36:51'!
ERROR!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:36:51'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:36:51'!
ERROR!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:38:21'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:38:22'!
ERROR!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:38:22'!
ERROR!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:38:40'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:38:42'!
ERROR!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:38:42'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:40:20' prior: 50872730!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId ifAbsent: [^total@collection]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] 
	
	^ total@collection.! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:40:23'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:40:24'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:40:24'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:40:24'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:40:24'!
ERROR!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:40:24'!
ERROR!
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:40:35' prior: 50872817!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId ifAbsent: [ ^total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] 
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:40:37' prior: 50872882!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] 
	
	^ total@collection.! !
!Application methodsFor: 'communication' stamp: 'plp 6/23/2021 23:40:41' prior: 50872898!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] .
	
	^ total@collection.! !

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:40:42'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:40:51'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:40:53'!
PASSED!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:42:27'!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:42:39' prior: 50872983!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/23/2021 23:43:06' prior: 50873014!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'.
	cardExpiration := validExpirationDate .
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test01CreateCartForNonRegisteredUser stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test03CreateMultipleCartsWithValidUsers stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test04AddToCartToInvalidCartId stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test05AddToCartNonAvailableISBN stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test07CheckOutCartInvalidCardNumberAndInvalidOwner stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test08CheckOutCartExpiredCard stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test09CheckOutCartValidCardAndCart stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test10CheckOutMultipleCartsWithValidCard stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

!testRun: #ApplicationTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'plp 6/23/2021 23:43:08'!
PASSED!

----SNAPSHOT----(24 June 2021 00:48:05) CuisUniversity-4532.image priorSource: 17115332!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/24/2021 01:47:48'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/24/2021 01:47:50'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:47:57' prior: 50869372 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	validUserID := 'Registered id'.
	wrongPassword := 'WrongPassword'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:03' prior: 50863408!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:06' prior: 50873194!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPassword |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:37' prior: 50873169 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:42' prior: 50863434!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:45' prior: 50873266!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app validUserId correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:48:51' prior: 50863479!
test03CreateMultipleCartsWithValidUsers

	| app validUserId correctPassword oneCartId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	oneCartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:49:09' prior: 50863865!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validISBN quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:49:18' prior: 50873240 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:49:26' prior: 50873310!
test05AddToCartNonAvailableISBN

	| app cartId correctPassword validUserId invalidISBN validISBN |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	self 
		should: [ app addToCart: cartId with: invalidISBN quantity: 1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart new invalidItemErrorMessage ].
			
	self 
		should: [ app addToCart: cartId with: validISBN quantity: 0 ]
		raise: Error
		withExceptionDo: [ :anError |
				self assert: anError messageText = Cart new invalidQuantityErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:49:38' prior: 50864226!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId validISBN expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
			
	app addToCart: cartId with: validISBN quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validISBN).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:49:50' prior: 50873389!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:50:30' prior: 50869099!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	validCardNumber := 1234567890123456.
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:50:44' prior: 50873337 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	validCardOwner := '	Bjarne Stroustrup'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:50:57' prior: 50873430!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	invalidCardNumber := 11111.
	
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:51:09' prior: 50873490 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	validCardOwner := '	Bjarne Stroustrup'.
	
	validCardNumber := 1234567890123456."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:51:26' prior: 50871624!
test08CheckOutCartExpiredCard

	| app cartId correctPassword validUserId cardExpiration cardOwner validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:51:35' prior: 50873579 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	"invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	validCardOwner := '	Bjarne Stroustrup'.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:51:47' prior: 50871563!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup' .
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:51:58' prior: 50871007!
test10CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	

	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:52:05' prior: 50873701!
test10CheckOutMultipleCartsWithValidCard

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:52:19' prior: 50871087!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:52:22' prior: 50873773!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserId withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:52:36' prior: 50871905!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:52:46' prior: 50873050!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPassword.
	anotherCartId := app createCartForUser: validUserId password: correctPassword.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:53:35' prior: 50873217!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId wrongPasswordd |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPasswordd ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPasswordd ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/24/2021 01:54:29'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:54:27' prior: 50873637 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	"validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	validCardOwner := '	Bjarne Stroustrup'.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:54:39' prior: 50873887!
test01CreateCartForNonRegisteredUser

	| app invalidUserId validUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:54:47' prior: 50873954!
test01CreateCartForNonRegisteredUser

	| app invalidUserId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog .
	
	self 
		should: [ app createCartForUser: invalidUserId password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].
		
	self 
		should: [ app createCartForUser: validUserID password: wrongPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ]! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:54:55' prior: 50873280!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app correctPassword cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPassword.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !

!classDefinition: #ApplicationTest category: 'TusLibros' stamp: 'plp 6/24/2021 01:55:22'!
TestCase subclass: #ApplicationTest
	instanceVariableNames: 'testObjectsFactory validExpirationDate merchantProcessorSuccess merchantProcessorFail validIsbn invalidUserID validUserID wrongPassword correctPasswordd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:55:21' prior: 50873922 overrides: 16927572!
setUp 

	| validYear validMonth |

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validYear := (GregorianDateTime now year number + 1) asString .
	validMonth := GregorianDateTime now monthOfYear monthNumber + 1 .
	
	validMonth < 10 ifTrue: [ validMonth := '0', validMonth asString ] ifFalse: [ validMonth := validMonth asString ].
	
	validExpirationDate := validMonth , validYear .
	
	merchantProcessorSuccess := MerchantProcessorSimulatorSuccess new.
	merchantProcessorFail := MerchantProcessorSimulatorFailed new.
	
	validIsbn := testObjectsFactory itemSellByTheStore .
	
	invalidUserID := 'Non-registered id'.
	wrongPassword := 'WrongPassword'.
	
	validUserID := '12345'.
	correctPasswordd := 'CorrectPassword'.
	
	"invalidISBN := '1111111111111'.
	validISBN := 'validBook'.
	
	validCardOwner := '	Bjarne Stroustrup'.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup'."! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:55:29' prior: 50873998!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:55:39' prior: 50873294!
test03CreateMultipleCartsWithValidUsers

	| app correctPassword oneCartId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPassword.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:55:45' prior: 50874069!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	oneCartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPasswordd.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:55:56' prior: 50873410!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId correctPassword validUserId expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserId password: correctPasswordd.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:56:07' prior: 50874099!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId validUserId expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:56:11' prior: 50874119!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
			
	app addToCart: cartId with: validIsbn quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:56:20' prior: 50873520!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId correctPassword validUserId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	invalidCardNumber := 11111.
	
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:56:51' prior: 50874155!
test07CheckOutCartInvalidCardNumberAndInvalidOwner

	| app cartId cardExpiration cardOwner invalidCardNumber validCardNumber invalidCardOwner |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	invalidCardNumber := 11111.
	
	cardExpiration := '122021'.
	
	self should: [ 	app checkOutCart: cartId withCardNumber: invalidCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
		
	invalidCardOwner := ''.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := '    '.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].
	
	invalidCardOwner := 'credit card owner longer than 30 characters. Just to be sure'.
	self should: [ 	app checkOutCart: cartId withCardNumber: validCardNumber owner: invalidCardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardErrorMessage ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:57:02' prior: 50873610!
test08CheckOutCartExpiredCard

	| app cartId cardExpiration cardOwner validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	cardExpiration := '012021'.
	
	self should: [ app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage  ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:57:11' prior: 50873669!
test09CheckOutCartValidCardAndCart

	| app cartId correctPassword validUserId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup' .
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:57:17' prior: 50874291!
test09CheckOutCartValidCardAndCart

	| app cartId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup' .
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:57:19' prior: 50874323!
test09CheckOutCartValidCardAndCart

	| app cartId cardExpiration cardOwner sale salesBook transactionId validCardNumber |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	validCardNumber := 1234567890123456.
	cardOwner := '	Bjarne Stroustrup' .
	cardExpiration := validExpirationDate .
	
	transactionId := app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook :=	app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:57:39' prior: 50873737!
test10CheckOutMultipleCartsWithValidCard

	| app cartId cardExpiration cardOwner invalidCardNumber transactionId anotherCartId anotherTransactionId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
	
	transactionId := app 
					checkOutCart: cartId 
					withCardNumber: invalidCardNumber 
					owner: cardOwner 
					expiresOn: cardExpiration 
					trought: merchantProcessorSuccess .
					
	anotherTransactionId := app 
						checkOutCart: anotherCartId 
						withCardNumber: invalidCardNumber 
						owner: cardOwner 
						expiresOn: cardExpiration 
						trought: merchantProcessorSuccess .
			
	self deny: transactionId = anotherTransactionId .
! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:02' prior: 50873798!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: correctPasswordd ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:11' prior: 50874414!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app nonExistingUserId password |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	nonExistingUserId := 'Non-Existing user id'.
	password := 'APassword' .
	
	self 
		should: [ app listPurchasesFor: nonExistingUserId withPassword: correctPasswordd ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].

	self 
		should: [ app listPurchasesFor: validUserID withPassword: password ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Application authenticationFailedErrorDescription ].! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:25' prior: 50871948!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app correctPassword validUserId purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPasswordd .
	
	self assert: purchases equals: 0@OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:30' prior: 50874464!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app purchases |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPasswordd .
	
	self assert: purchases equals: 0@OrderedCollection new.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:37' prior: 50873823!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:42' prior: 50874493!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:58:52' prior: 50874520!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases cardExpiration cardOwner cartId validCardNumber result |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	purchases := app listPurchasesFor: validUserID withPassword: correctPasswordd .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:59:05' prior: 50873850!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserId withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:59:15' prior: 50874570!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app correctPassword validUserId purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	validUserId := '12345'.
	correctPassword := 'CorrectPassword'.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPasswordd .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationTest methodsFor: 'as yet unclassified' stamp: 'plp 6/24/2021 01:59:25' prior: 50874607!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases cardExpiration cardOwner cartId validCardNumber result anotherCartId |
	
	app := Application forCatalog: StoreTestObjectsFactory new defaultCatalog.
	
	cartId := app createCartForUser: validUserID password: correctPasswordd.
	anotherCartId := app createCartForUser: validUserID password: correctPasswordd.
	
	app addToCart: cartId with: validIsbn quantity: 1.
	app addToCart: anotherCartId with: validIsbn quantity: 2.
		
	app checkOutCart: cartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: cardOwner expiresOn: cardExpiration trought: merchantProcessorSuccess .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPasswordd .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/isw1/20-TusLibros/TusLibros-Last.st----!

!testRun: #ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateACardWithNumberDigitsNotEqualsTo16 stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateACardWithEmptyOwner stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CreditCardTest #test03CanCreateACardWithValidNumberAndOwner stamp: 'jn 6/24/2021 12:57:56'!
PASSED!

!testRun: #CreditCardTest #test04CanNotCreateACardWithExceededLengthOwner stamp: 'jn 6/24/2021 12:57:56'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:00:54'!
test01CanNotCreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartFor: app with: invalidUserID .
	self assertErrorCreateCartFor: app with: validUserID .! !

!methodRemoval: ApplicationFacadeTest #test01CreateCartForNonRegisteredUser stamp: 'jn 6/24/2021 13:00:54'!
test01CreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartFor: app with: invalidUserID .
	self assertErrorCreateCartFor: app with: validUserID .!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:03:32'!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).! !

!methodRemoval: ApplicationFacadeTest #test02CreateCartForRegisteredUserAndCorrectPassword stamp: 'jn 6/24/2021 13:03:32'!
test02CreateCartForRegisteredUserAndCorrectPassword

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self assert: (#() asOrderedCollection) equals: (app listCartFor: cartId).!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:05:56' prior: 50870867!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowFor: app at: self now.
	
	self assert: (app listCartFor: cartId) isEmpty .! !

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 13:05:58'!
PASSED!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:06:35'!
assertErrorCreateCartIn: anApp with: anUserID
	
	self 
		should: [ anApp createCartForUser: anUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:06:35' prior: 50870847!
test01CanNotCreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartIn: app with: invalidUserID .
	self assertErrorCreateCartIn: app with: validUserID .! !

!methodRemoval: ApplicationFacadeTest #assertErrorCreateCartFor:with: stamp: 'jn 6/24/2021 13:06:35'!
assertErrorCreateCartFor: anApp with: anUserID
	
	self 
		should: [ anApp createCartForUser: anUserID password: wrongPassword on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:07:16'!
assertErrorListPurchaseIn: anApp withUser: aUserId password: aPassword
	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:16' prior: 50869544!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID password: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID password: wrongPassword .! !

!methodRemoval: ApplicationFacadeTest #assertErrorListPurchaseOf:with:password: stamp: 'jn 6/24/2021 13:07:16'!
assertErrorListPurchaseOf: anApp with: aUserId password: aPassword
	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:07:31'!
assertErrorListPurchaseIn: anApp withUser: aUserId andPassword: aPassword
	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:31' prior: 50870955!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID andPassword: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID andPassword: wrongPassword .! !

!methodRemoval: ApplicationFacadeTest #assertErrorListPurchaseIn:withUser:password: stamp: 'jn 6/24/2021 13:07:31'!
assertErrorListPurchaseIn: anApp withUser: aUserId password: aPassword
	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:07:48'!
createCartForValidUserAndCorrectPasswordNowIn: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:48' prior: 50869498!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	self addValidItemToCart: cartId in: app amount: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:48' prior: 50869715!
createTransactionForNewCartWith: anAmount on: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp amount: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:48' prior: 50870892!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	
	self assert: (app listCartFor: cartId) isEmpty .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:48' prior: 50869641!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:07:48' prior: 50869471!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	anotherCartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	
	self deny: (oneCartId = anotherCartId).! !

!methodRemoval: ApplicationFacadeTest #createCartForValidUserAndCorrectPasswordNowFor:at: stamp: 'jn 6/24/2021 13:07:48'!
createCartForValidUserAndCorrectPasswordNowFor: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:08:23'!
addValidItemToCart: aCartID in: anApp quantity: anAmount 
	
	anApp addToCart: aCartID with: validIsbn quantity: anAmount on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:08:23' prior: 50871041!
createTransactionForNewCartWith: anAmount on: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp quantity: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:08:23' prior: 50871025!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidUserAndCorrectPasswordNowIn: app at: self now.
	self addValidItemToCart: cartId in: app quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:08:23' prior: 50869602!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self createTransactionForNewCartWith: 1 on: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app quantity: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!methodRemoval: ApplicationFacadeTest #addValidItemToCart:in:amount: stamp: 'jn 6/24/2021 13:08:23'!
addValidItemToCart: aCartID in: anApp amount: anAmount 
	
	anApp addToCart: aCartID with: validIsbn quantity: anAmount on: self now.!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:08:30' prior: 50871110!
addValidItemToCart: aCartID in: anApp quantity: aQuantity 
	
	anApp addToCart: aCartID with: validIsbn quantity: aQuantity on: self now.! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:09:49'!
createCartForValidCredentialsIn: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:09:49' prior: 50871118!
createTransactionForNewCartWith: anAmount on: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp quantity: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:09:49' prior: 50871059!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app at: self now.
	
	self assert: (app listCartFor: cartId) isEmpty .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:09:49' prior: 50871088!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidCredentialsIn: app at: self now.
	anotherCartId := self createCartForValidCredentialsIn: app at: self now.
	
	self deny: (oneCartId = anotherCartId).! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:09:49' prior: 50871071!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app at: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:09:49' prior: 50871136!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app at: self now.
	self addValidItemToCart: cartId in: app quantity: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!methodRemoval: ApplicationFacadeTest #createCartForValidUserAndCorrectPasswordNowIn:at: stamp: 'jn 6/24/2021 13:09:49'!
createCartForValidUserAndCorrectPasswordNowIn: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:11:20'!
checkoutCartWith: anAmount in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp quantity: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50869583!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now .
	self checkoutCartWith: 2 in: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50869514!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50869657!
test17CheckOutCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 in: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50869531!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now ) = (self checkoutCartWith: 2 in: app createAt: self now checkOutAt: self now )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50871152!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self addValidItemToCart: anotherCartId in: app quantity: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:11:20' prior: 50869567!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !

!methodRemoval: ApplicationFacadeTest #createTransactionForNewCartWith:on:createAt:checkOutAt: stamp: 'jn 6/24/2021 13:11:20'!
createTransactionForNewCartWith: anAmount on: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp quantity: anAmount.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:11:29' prior: 50871294!
checkoutCartWith: aQuantity in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp at: aCreationTime.
	self addValidItemToCart: cartId in: anApp quantity: aQuantity.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:12:41'!
add: aCartID ofValidItemToCart: anApp in: aQuantity 
	
	anApp addToCart: aCartID with: validIsbn quantity: aQuantity on: self now.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:12:41' prior: 50871446!
checkoutCartWith: aQuantity in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp at: aCreationTime.
	self add: cartId ofValidItemToCart: anApp in: aQuantity.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:12:41' prior: 50871374!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: anotherCartId ofValidItemToCart: app in: 2.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:12:41' prior: 50871271!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app at: self now.
	self add: cartId ofValidItemToCart: app in: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!methodRemoval: ApplicationFacadeTest #addValidItemToCart:in:quantity: stamp: 'jn 6/24/2021 13:12:41'!
addValidItemToCart: aCartID in: anApp quantity: aQuantity 
	
	anApp addToCart: aCartID with: validIsbn quantity: aQuantity on: self now.!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:13:00' prior: 50871462!
add: aQuantity ofValidItemToCart: aCartID in: anApp  
	
	anApp addToCart: aCartID with: validIsbn quantity: aQuantity on: self now.! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartForNonRegisteredUser stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:13:08'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 13:13:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 13:13:08'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:13:45' prior: 50870979!
assertErrorListPurchaseIn: anApp withUser: aUserId andPassword: aPassword

	self 
		should: [ anApp listPurchasesFor: aUserId withPassword: aPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade authenticationFailedErrorDescription ].! !
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:14:44'!
createCartForValidCredentialsIn: anApp createAt: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:14:44' prior: 50871255!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:14:44' prior: 50871470!
checkoutCartWith: aQuantity in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp createAt: aCreationTime.
	self add: cartId ofValidItemToCart: anApp in: aQuantity.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:14:44' prior: 50871526!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: cartId ofValidItemToCart: app in: 1.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:14:44' prior: 50871231!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self assert: (app listCartFor: cartId) isEmpty .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:14:44' prior: 50871242!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidCredentialsIn: app createAt: self now.
	anotherCartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self deny: (oneCartId = anotherCartId).! !

!methodRemoval: ApplicationFacadeTest #createCartForValidCredentialsIn:at: stamp: 'jn 6/24/2021 13:14:44'!
createCartForValidCredentialsIn: anApp at: aTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aTime.
	!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:14:53' prior: 50871621!
createCartForValidCredentialsIn: anApp createAt: aCreationTime

	^ anApp createCartForUser: validUserID password: correctPassword on: aCreationTime.
	! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartForNonRegisteredUser stamp: 'jn 6/24/2021 13:15:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 13:15:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'jn 6/24/2021 13:15:10'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'jn 6/24/2021 13:15:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:15:13'!
ERROR!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:15:13'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'jn 6/24/2021 13:16:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'jn 6/24/2021 13:16:53'!
PASSED!

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:17:01'!
ERROR!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:17:23' prior: 50871663!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:17:25'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 13:17:27'!
ERROR!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 13:17:27'!
ERROR!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:18:01' prior: 50871646!
checkoutCartWith: aQuantity in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp createAt: aCreationTime.
	self add: aQuantity ofValidItemToCart: cartId in: anApp.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !

!testRun: #ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:18:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 13:18:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:18:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'jn 6/24/2021 13:18:10'!
PASSED!

!testRun: #ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'jn 6/24/2021 13:18:11'!
PASSED!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 13:18:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 13:18:13'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:18:14'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:18:14'!
ERROR!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:18:52' prior: 50871487!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: 1 ofValidItemToCart: anotherCartId in: app.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:18:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:18:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:19:31'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:19:31'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 13:20:06'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 13:20:09'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:20:15'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 13:20:15'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:25:58'!
test03CartsIdNotEqualsWhenCreateMultipleCarts

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidCredentialsIn: app createAt: self now.
	anotherCartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self deny: (oneCartId = anotherCartId).! !

!methodRemoval: ApplicationFacadeTest #test03CreateMultipleCartsWithValidUsers stamp: 'jn 6/24/2021 13:25:58'!
test03CreateMultipleCartsWithValidUsers

	| app oneCartId anotherCartId |
	
	app := self createDefaultCatalogedApp.
	
	oneCartId := self createCartForValidCredentialsIn: app createAt: self now.
	anotherCartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self deny: (oneCartId = anotherCartId).!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:26:15'!
test04CanNotAddToCartToInvalidCartId

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade invalidCartIdErrorDescription ].! !

!methodRemoval: ApplicationFacadeTest #test04AddToCartToInvalidCartId stamp: 'jn 6/24/2021 13:26:16'!
test04AddToCartToInvalidCartId

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self 
		should: [ app addToCart: 0 with: invalidIsbn quantity: 1 on: self now ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade invalidCartIdErrorDescription ].!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:27:52'!
test05ListCartHasItemAndQuantityAddedToCart

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.! !

!methodRemoval: ApplicationFacadeTest #test06AddToCartToValidCartIDAValidISBNWithAValidQuantity stamp: 'jn 6/24/2021 13:27:52'!
test06AddToCartToValidCartIDAValidISBNWithAValidQuantity

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId) equals: expectedList.!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:28:47'!
test06SalesBookHasRegisteredCheckOut

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !

!methodRemoval: ApplicationFacadeTest #test09CheckOutCartValidCardAndCart stamp: 'jn 6/24/2021 13:28:47'!
test09CheckOutCartValidCardAndCart

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self checkoutCartWith: 1 in: app createAt: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
!
!ApplicationFacadeTest methodsFor: 'private' stamp: 'jn 6/24/2021 13:44:03'!
checkoutCartWith: aQuantity ofItemin: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp createAt: aCreationTime.
	self add: aQuantity ofValidItemToCart: cartId in: anApp.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871347!
test17CheckOutCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871831!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser resultAnotherUser resultFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: 1 ofValidItemToCart: anotherCartId in: app.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	resultFirstUser := 10@(OrderedCollection new).
	(resultFirstUser y) add: 1@validIsbn .
	
	resultAnotherUser := 20@(OrderedCollection new).
	(resultAnotherUser y) add: 2@validIsbn .
	
	self assert: purchasesFirstUser equals: resultFirstUser.
	self assert: purchasesAnotherUser equals: resultAnotherUser.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871413!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 10@(OrderedCollection new).
	(result y) add: 1@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871311!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	self checkoutCartWith: 2 ofItemin: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	result := 30@(OrderedCollection new).
	(result y) add: 3@validIsbn .
	
	self assert: purchases equals: result.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871362!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: 
		(self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now ) = (self checkoutCartWith: 2 ofItemin: app createAt: self now checkOutAt: self now )
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:03' prior: 50871981!
test06SalesBookHasRegisteredCheckOut

	| app sale salesBook transactionId |
	
	app := self createDefaultCatalogedApp.
	transactionId := (self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now) .
		
	sale := (Sale of: StoreTestObjectsFactory new itemSellByTheStorePrice).
	salesBook := app salesBook.
	
	self assert: transactionId equals: 1.
	self assert: (salesBook first total) equals: sale total.
! !

!methodRemoval: ApplicationFacadeTest #checkoutCartWith:in:createAt:checkOutAt: stamp: 'jn 6/24/2021 13:44:03'!
checkoutCartWith: aQuantity in: anApp createAt: aCreationTime checkOutAt: aCheckOutTime
	
	| cartId |
	cartId := self createCartForValidCredentialsIn: anApp createAt: aCreationTime.
	self add: aQuantity ofValidItemToCart: cartId in: anApp.
	^ anApp checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: aCheckOutTime .!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:44:44'!
checkoutCartWith: aQuantity ofItemin: anApp 
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:45:05' prior: 50872165!
checkoutCartWith: aQuantity ofItemin: anApp 

  	self checkoutCartWith: aQuantity ofItemin: anApp createAt: self now checkOutAt: self now 
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:45:27' prior: 50872119!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self checkoutCartWith: 1 ofItemin: app) = (self checkoutCartWith: 2 ofItemin: app)
! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:45:29'!
FAILURE!

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:45:29'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:45:43' prior: 50872170!
checkoutCartWith: aQuantity ofItemin: anApp 

  	^ self checkoutCartWith: aQuantity ofItemin: anApp createAt: self now checkOutAt: self now 
! !

!testRun: #ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:45:46'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:47:19'!
test7TransactionsIdsNotEqualesWhenCheckOutMultipleCarts

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self checkoutCartWith: 1 ofItemin: app) = (self checkoutCartWith: 2 ofItemin: app)
! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:47:29'!
test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self checkoutCartWith: 1 ofItemin: app) = (self checkoutCartWith: 2 ofItemin: app)
! !

!methodRemoval: ApplicationFacadeTest #test7TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 13:47:29'!
test7TransactionsIdsNotEqualesWhenCheckOutMultipleCarts

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self checkoutCartWith: 1 ofItemin: app) = (self checkoutCartWith: 2 ofItemin: app)
!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 13:47:34'!
PASSED!

!methodRemoval: ApplicationFacadeTest #test10CheckOutMultipleCartsWithValidCard stamp: 'jn 6/24/2021 13:47:40'!
test10CheckOutMultipleCartsWithValidCard

	| app |
	
	app := self createDefaultCatalogedApp.
			
	self deny: (self checkoutCartWith: 1 ofItemin: app) = (self checkoutCartWith: 2 ofItemin: app)
!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:48:25'!
test11CanNotListPurchasesWithInvalidCredentials

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID andPassword: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID andPassword: wrongPassword .! !

!methodRemoval: ApplicationFacadeTest #test11ListPurchasesOfNonExistingUserOrWrongPassword stamp: 'jn 6/24/2021 13:48:25'!
test11ListPurchasesOfNonExistingUserOrWrongPassword

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID andPassword: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID andPassword: wrongPassword .!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:48:44'!
test01CanNotCreateCartWithInvalidCredentials

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartIn: app with: invalidUserID .
	self assertErrorCreateCartIn: app with: validUserID .! !

!methodRemoval: ApplicationFacadeTest #test01CanNotCreateCartForNonRegisteredUser stamp: 'jn 6/24/2021 13:48:44'!
test01CanNotCreateCartForNonRegisteredUser

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorCreateCartIn: app with: invalidUserID .
	self assertErrorCreateCartIn: app with: validUserID .!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:49:02'!
test08CanNotListPurchasesWithInvalidCredentials

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID andPassword: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID andPassword: wrongPassword .! !

!methodRemoval: ApplicationFacadeTest #test11CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 13:49:02'!
test11CanNotListPurchasesWithInvalidCredentials

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self assertErrorListPurchaseIn: app withUser: invalidUserID andPassword: correctPassword.
	self assertErrorListPurchaseIn: app withUser: validUserID andPassword: wrongPassword .!

1@2!

1@2 first!

1@2 x!

(1@2) x!

(1@2) first !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:54:03'!
test09EmptyListPurchasesOfValidUserWithoutPurchases

	| app purchases |
	
	app := self createDefaultCatalogedApp.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.! !

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 13:54:05'!
PASSED!

!methodRemoval: ApplicationFacadeTest #test12ListPurchasesOfRegisteredUserWithoutPurchases stamp: 'jn 6/24/2021 13:54:18'!
test12ListPurchasesOfRegisteredUserWithoutPurchases

	| app purchases |
	
	app := self createDefaultCatalogedApp.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@OrderedCollection new.!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:55:34' prior: 50872084!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result itemsPurchased |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	itemsPurchased := OrderedCollection new add: 1@validIsbn.
	result := 10@itemsPurchased.
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 13:55:37'!
FAILURE!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 13:55:37'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:56:08' prior: 50872349!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases result itemsPurchased |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: 1@validIsbn.
	result := 10@itemsPurchased.
	
	self assert: purchases equals: result.! !

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 13:56:10'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:58:32' prior: 50872374!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn.
	
	self assert: purchases equals: expectedListPurchases.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 13:59:48'!
listPurchasesWith: aQuantity of: anIsbn| itemsPurchased |
.
	
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: aQuantity@anIsbn.
	^10@itemsPurchased.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:00:07' prior: 50872413!
listPurchasesWith: aQuantity of: anIsbn

	| itemsPurchased |
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: aQuantity@anIsbn.
	^10@itemsPurchased.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:01:01'!
listPurchasesWith: aQuantity of: anIsbn total: total 

	| itemsPurchased |
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: aQuantity@anIsbn.
	^10@itemsPurchased.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:01:01' prior: 50872396!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn total: total.
	
	self assert: purchases equals: expectedListPurchases.! !

!methodRemoval: ApplicationFacadeTest #listPurchasesWith:of: stamp: 'jn 6/24/2021 14:01:01'!
listPurchasesWith: aQuantity of: anIsbn

	| itemsPurchased |
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: aQuantity@anIsbn.
	^10@itemsPurchased.!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:01:13' prior: 50872430!
listPurchasesWith: aQuantity of: anIsbn total: total 

	| itemsPurchased |
	itemsPurchased := OrderedCollection new.
	itemsPurchased add: aQuantity@anIsbn.
	^ total@itemsPurchased.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:01:24' prior: 50872439!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn total: 10.
	
	self assert: purchases equals: expectedListPurchases.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:01:54' prior: 50872100!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	self checkoutCartWith: 2 ofItemin: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: result.! !

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 14:02:03'!
FAILURE!

!testRun: #ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 14:02:03'!
FAILURE!

!testRun: #ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 14:02:22'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:05:03'!
test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn total: 10.
	
	self assert: purchases equals: expectedListPurchases.! !

!methodRemoval: ApplicationFacadeTest #test13ListPurchasesOfRegisteredUserWithOnePurchase stamp: 'jn 6/24/2021 14:05:09'!
test13ListPurchasesOfRegisteredUserWithOnePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn total: 10.
	
	self assert: purchases equals: expectedListPurchases.!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:06:17'!
test14ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	self checkoutCartWith: 2 ofItemin: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: expectedListPurchases.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:06:28' prior: 50872559!
test14ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app .
	self checkoutCartWith: 2 ofItemin: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: expectedListPurchases.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:06:36' prior: 50872524!
test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedListPurchases := self listPurchasesWith: 1 of: validIsbn total: 10.
	
	self assert: purchases equals: expectedListPurchases.! !

!methodRemoval: ApplicationFacadeTest #test14ListPurchasesOfRegisteredUserWithMultiplePurchases stamp: 'jn 6/24/2021 14:06:44'!
test14ListPurchasesOfRegisteredUserWithMultiplePurchases

	| app purchases result expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	self checkoutCartWith: 2 ofItemin: app createAt: self now checkOutAt: self now .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: result.!

!testRun: #ApplicationFacadeTest #test14ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 14:06:46'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:06:54'!
test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app .
	self checkoutCartWith: 2 ofItemin: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: expectedListPurchases.! !

!methodRemoval: ApplicationFacadeTest #test14ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 14:06:54'!
test14ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases

	| app purchases expectedListPurchases |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app .
	self checkoutCartWith: 2 ofItemin: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .

	expectedListPurchases := self listPurchasesWith: 3 of: validIsbn total: 30.

	self assert: purchases equals: expectedListPurchases.!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:08:12' prior: 50872045!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser expectedListPurchasesAnotherUser expectedListPurchasesFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	anotherValidUser := '54321' .
	
	self checkoutCartWith: 1 ofItemin: app createAt: self now checkOutAt: self now .
	
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: 1 ofValidItemToCart: anotherCartId in: app.
	app checkOutCart: anotherCartId withCardNumber: validCardNumber owner: validCardOwner expiresOn: validExpirationDate trought: merchantProcessorSuccess on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	expectedListPurchasesFirstUser := self listPurchasesWith: 1 of: validIsbn total: 10.
	expectedListPurchasesAnotherUser := self listPurchasesWith: 2 of: validIsbn total: 20.
	
	self assert: purchasesFirstUser equals: expectedListPurchasesFirstUser.
	self assert: purchasesAnotherUser equals: expectedListPurchasesAnotherUser.! !

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 14:08:23'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 14:08:23'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:17:26' prior: 50872676!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser expectedListPurchasesAnotherUser expectedListPurchasesFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	
	self checkoutCartWith: 1 ofItemin: app  .
	
	anotherValidUser := '54321' .
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: 1 ofValidItemToCart: anotherCartId in: app.
	app checkOutCart: anotherCartId 
		withCardNumber: validCardNumber 
		owner: validCardOwner 
		expiresOn: validExpirationDate 
		trought: merchantProcessorSuccess 
		on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	expectedListPurchasesFirstUser := self listPurchasesWith: 1 of: validIsbn total: 10.
	expectedListPurchasesAnotherUser := self listPurchasesWith: 2 of: validIsbn total: 20.
	
	self assert: purchasesFirstUser equals: expectedListPurchasesFirstUser.
	self assert: purchasesAnotherUser equals: expectedListPurchasesAnotherUser.! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:48:38' prior: 50870099!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := self getCart: aCartId on: on.
	
	cart add: aQuantity of: anISBN.
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:52:50'!
getCart: aCartId on: on

	| cartAndCreation |
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	
	self assertCartLastActivity: aCartId on: on .
	
	^ cartAndCreation key.
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:52:57' prior: 50872772!
getCart: aCartId on: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: aCartId on: on .
	^ cartAndCreation key.
	! !
!ApplicationFacade methodsFor: 'assertions' stamp: 'jn 6/24/2021 14:53:44' prior: 50870230!
assertCartLastActivity: aCreationDateTime on: on
	
	| difference |
	difference := (on - aCreationDateTime) minutes.
	(difference >= 30) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].
	! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:54:25' prior: 50872783!
getCart: aCartId on: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	^ cartAndCreation key.
	! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 14:57:03'!
getCart: aCartId ifIsValidOn: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	^ cartAndCreation key.
	! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:57:03' prior: 50872764!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := self getCart: aCartId ifIsValidOn: on.
	
	cart add: aQuantity of: anISBN.
	! !

!methodRemoval: ApplicationFacade #getCart:on: stamp: 'jn 6/24/2021 14:57:03'!
getCart: aCartId on: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	^ cartAndCreation key.
	!
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 14:57:33'!
getCart: aCartId ifValidOn: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	^ cartAndCreation key.
	! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 14:57:33' prior: 50872827!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	
	cart := self getCart: aCartId ifValidOn: on.
	
	cart add: aQuantity of: anISBN.
	! !

!methodRemoval: ApplicationFacade #getCart:ifIsValidOn: stamp: 'jn 6/24/2021 14:57:33'!
getCart: aCartId ifIsValidOn: on

	| cartAndCreation |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	^ cartAndCreation key.
	!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:57:59' prior: 50870110!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	cashier checkOut .
	
	"Agregar a purchases"
	self addPurchase: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:59:13' prior: 50870147!
listCartFor: aCartId

	| cart list |
	
	cart := self getCart: aCartId ifValidOn: self now.
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 14:59:24'!
now

	^ DateAndTime now ! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 14:59:49' prior: 50872898!
listCartFor: aCartId

	| cart list |
	
	cart := self getCart: aCartId ifValidOn: self now.
	list := OrderedCollection new.
	
	
	catalog keysDo: [ 
		:item | 
			(cart occurrencesOf: item) = 0 ifFalse: [
				list add: ( (cart occurrencesOf: item) @ item ).
		].
	].

	^ list! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:10:37' prior: 50870132!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) .
	self addCart: newCart toUser: aUserId.
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:11:07'!
addCart: cart toUser: aUserId
	
	 ! !

a := Dictionary new!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 15:14:14'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases userCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 15:14:22'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases userCarts cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:14:20' prior: 50872939!
addCart: cart toUser: aUserId
	
	userCarts := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCarts add: cart.
! !

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 15:14:32'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:14:58' prior: 50872964!
addCart: cart toUser: aUserId

	| userCarts |
	userCarts := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCarts add: cart.
! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:18:51' prior: 50872988!
addCart: cart toUser: aUserId

	cartsForUsers at: aUserId ifAbsent: [ 
		cartsForUsers add: aUserId->OrderedCollection new ].
	(cartsForUsers at: aUserId) add: cart.
! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:20:04' prior: 50872876!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	cashier checkOut .
	
	self addToPurchases: aCartId .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:20:39' prior: 50873005!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self addToPurchases: aCartId withTotal: total .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:23:41' prior: 50873026!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self addToPurchases: cart with: aCartId Total: total .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 15:24:41'!
addToPurchases: cart with: aCartId Total: total

	purchases add: aCartId->(cart->total) .! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:25:58' prior: 50873048!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |

	cart := self getCartForCheckout: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self addToPurchases: cart with: aCartId Total: total .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:27:35' prior: 50873076!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self addToPurchases: cart with: aCartId Total: total .
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 15:31:39'!
addCart: cart forUser: aUserId

	cartsForUsers at: aUserId ifAbsent: [ 
		cartsForUsers add: aUserId->OrderedCollection new ].
	(cartsForUsers at: aUserId) add: cart.
! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 15:31:39' prior: 50872925!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) .
	self addCart: newCart forUser: aUserId.
	
	^ newCartId ! !

!methodRemoval: ApplicationFacade #addCart:toUser: stamp: 'jn 6/24/2021 15:31:39'!
addCart: cart toUser: aUserId

	cartsForUsers at: aUserId ifAbsent: [ 
		cartsForUsers add: aUserId->OrderedCollection new ].
	(cartsForUsers at: aUserId) add: cart.
!
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 15:31:47' prior: 50873121!
addCart: aCartId forUser: aUserId

	cartsForUsers at: aUserId ifAbsent: [ 
		cartsForUsers add: aUserId->OrderedCollection new ].
	(cartsForUsers at: aUserId) add: aCartId.
! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:32:04' prior: 50873130!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	lastCartId := lastCartId + 1.
	newCartId := lastCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) .
	self addCart: newCartId forUser: aUserId.
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:37:26' prior: 50870160!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection userCartsIds |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	userCartsIds := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCartsIds do: [ :aCartId | | cartAndTotal | 
		cartAndTotal := purchases at: aCartId.
		total := total + cartAndTotal value. 
		
	].
	
	"(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] ."
	
	^ total@collection.! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:41:42' prior: 50872913!
listCartFor: aCartId

	| cart listItems |
	
	cart := self getCart: aCartId ifValidOn: self now.
	listItems := OrderedCollection new.
	
	catalog keysDo: [ :item | |itemQuantity| 
		itemQuantity := (cart occurrencesOf: item).
		itemQuantity = 0 ifFalse: [ listItems add: ( itemQuantity @ item ) ] ].

	^ listItems! !

x _ Dictionary new.							"allocate collection"
!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x includesKey: #a.				!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:44:54' prior: 50873176!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection userCartsIds |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	userCartsIds := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCartsIds do: [ :aCartId | | cartAndTotal | 
		(purchases includesKey: aCartId) ifTrue: [
			
		].
		cartAndTotal := purchases at: aCartId.
		total := total + cartAndTotal value. 
		
	].
	
	"(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] ."
	
	^ total@collection.! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 15:46:04'!
add: aCartId ToPurchasesWithTotal: total

	purchases add: aCartId->total .! !

!methodRemoval: ApplicationFacade #addToPurchases:with:Total: stamp: 'jn 6/24/2021 15:46:12'!
addToPurchases: cart with: aCartId Total: total

	purchases add: aCartId->(cart->total) .!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:46:31' prior: 50873099!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |

	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self add: aCartId ToPurchasesWithTotal: total. 
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 15:53:53' prior: 50873217!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total collection userCartsIds |
	self assertAuthentication: aUserId with: aPassword .
	collection := 	OrderedCollection new .
	total := 0 .
	
	userCartsIds := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCartsIds do: [ :aCartId |  
		(purchases includesKey: aCartId) ifTrue: [
			total := total + purchases at: aCartId. 
			collection addAll: (self listCartFor: aCartId).
		].		
	].
	
	"(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] ."
	
	^ total@collection.! !

a := OrderedCollection new.!

a add: (1@'a')!

a add: (1@'a').
a add: (3@'b').
a add: (5@'a')!

a!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:01:02' prior: 50873275!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total items userCartsIds |
	self assertAuthentication: aUserId with: aPassword .
	items := 	Dictionary new .
	total := 0 .
	
	userCartsIds := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCartsIds do: [ :aCartId |  
		(purchases includesKey: aCartId) ifTrue: [
			total := total + purchases at: aCartId. 
			self addItemsFrom: aCartId to: items.
		].		
	].

	
	"(purchases at: aUserId ifAbsent: [ ^ total@collection ]) keysAndValuesDo: [ :key :value |
		collection add: (value@key) .
		total := total + (self getTotal: key quantity: value) .
	] ."
	
	^ total@items.! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:01:30'!
addItemsFrom: aCartId to: items

	(self listCartFor: aCartId)! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:02:30' prior: 50873326!
addItemsFrom: aCartId to: items

	(self listCartFor: aCartId) do: [ :item |
		items at: (item y) ifAbsent: [			items add: (item y)->0 ] .
		items at: (item y) put: ( (items at: (item y)) + (item x))
	]! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:04:18'!
summarizeItemsFrom: aCartId to: items

	(self listCartFor: aCartId) do: [ :item | | isbn quantity |
		isbn := item y. quantity := item x.
		items at: isbn ifAbsent: [			items add: isbn->0 ] .
		items at: isbn put: ( (items at: isbn) + quantity)]! !

!methodRemoval: ApplicationFacade #addItemsFrom:to: stamp: 'jn 6/24/2021 16:04:31'!
addItemsFrom: aCartId to: items

	(self listCartFor: aCartId) do: [ :item |
		items at: (item y) ifAbsent: [			items add: (item y)->0 ] .
		items at: (item y) put: ( (items at: (item y)) + (item x))
	]!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:05:24' prior: 50873303!
listPurchasesFor: aUserId withPassword: aPassword
	
	| total items userCartsIds |
	self assertAuthentication: aUserId with: aPassword .
	items := 	Dictionary new .
	total := 0 .
	
	userCartsIds := cartsForUsers at: aUserId ifAbsent: [ OrderedCollection new ].
	userCartsIds do: [ :aCartId |  
		(purchases includesKey: aCartId) ifTrue: [
			total := total + purchases at: aCartId. 
			self summarizeItemsFrom: aCartId to: items.
		].		
	].
	
	^ total@items.! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:05:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:05:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:05:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:05:29'!
ERROR!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:05:29'!
FAILURE!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:05:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:05:57'!
ERROR!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:05:57'!
ERROR!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:06:07'!
ERROR!
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:06:25' prior: 50873152!
addCart: aCartId forUser: aUserId

	cartsForUsers at: aUserId ifAbsent: [ 
		cartsForUsers add: aUserId->OrderedCollection new ].
	(cartsForUsers at: aUserId) add: aCartId.
! !
!ApplicationFacade methodsFor: 'initialization' stamp: 'jn 6/24/2021 16:06:39' prior: 50870085!
initializeWith: aCatalog
	
	lastCartId := 0 .
	catalog := aCatalog .
	carts := Dictionary new .
	salesBook := OrderedCollection new .
	lastTransactionId := 0 .
	cartsForUsers := Dictionary new .
	purchases := Dictionary new . ! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:06:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:06:41'!
FAILURE!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:06:41'!
FAILURE!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:06:41'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:06:42'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:06:42'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:06:42'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:06:47'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:06:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:06:48'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:06:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:06:50'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:06:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:06:52'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:06:53'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:06:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:06:54'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:07:03' prior: 50872321!
test09EmptyListPurchasesOfValidUserWithoutPurchases

	| app purchases |
	
	app := self createDefaultCatalogedApp.
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	self assert: purchases equals: 0@Dictionary new.! !

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:07:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:07:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:07:08'!
FAILURE!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:07:08'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:07:25' prior: 50872598!
test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase

	| app purchases expectedDictPurchases |
	
	app := self createDefaultCatalogedApp.
	self checkoutCartWith: 1 ofItemin: app .
	
	purchases := app listPurchasesFor: validUserID withPassword: correctPassword .
	
	expectedDictPurchases := self listPurchasesWith: 1 of: validIsbn total: 10.
	
	self assert: purchases equals: expectedDictPurchases.! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:08:07' prior: 50872465!
listPurchasesWith: aQuantity of: anIsbn total: total 

	| itemsPurchased |
	itemsPurchased := Dictionary new.
	itemsPurchased add: (anIsbn->aQuantity).
	^ total@itemsPurchased.! !

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:08:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:08:13'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:08:14'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:08:15'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:08:15'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:08:20'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:08:21'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:10:01'!
test18ListCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.

	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:16:46' prior: 50873640!
test18ListCartFailsAfter30Minutes

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:17:09' prior: 50873655!
test18ListCartFailsAfter30Minutes

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:17:31'!
listCartFor: aCartId on: on 

	| cart listItems |
	
	cart := self getCart: aCartId ifValidOn: self now.
	listItems := OrderedCollection new.
	
	catalog keysDo: [ :item | |itemQuantity| 
		itemQuantity := (cart occurrencesOf: item).
		itemQuantity = 0 ifFalse: [ listItems add: ( itemQuantity @ item ) ] ].

	^ listItems! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:17:31' prior: 50871679!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self assert: (app listCartFor: cartId on: on) isEmpty .! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:17:31' prior: 50873340!
summarizeItemsFrom: aCartId to: items

	(self listCartFor: aCartId on: on) do: [ :item | | isbn quantity |
		isbn := item y. quantity := item x.
		items at: isbn ifAbsent: [			items add: isbn->0 ] .
		items at: isbn put: ( (items at: isbn) + quantity)]! !
!ApplicationFacade methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:17:31' prior: 50870175!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId on: on .
	
	cartItems do: [ :item |
		purchasesDict at: (item y) ifAbsent: [			purchasesDict add: (item y)->0 ] .
		purchasesDict at: (item y) put: ( (purchasesDict at: (item y)) + (item x))
	]
	
	"purchasesCollection add: aCartId ."! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:17:31' prior: 50871950!
test05ListCartHasItemAndQuantityAddedToCart

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId on: on) equals: expectedList.! !

!methodRemoval: ApplicationFacade #listCartFor: stamp: 'jn 6/24/2021 16:17:31'!
listCartFor: aCartId

	| cart listItems |
	
	cart := self getCart: aCartId ifValidOn: self now.
	listItems := OrderedCollection new.
	
	catalog keysDo: [ :item | |itemQuantity| 
		itemQuantity := (cart occurrencesOf: item).
		itemQuantity = 0 ifFalse: [ listItems add: ( itemQuantity @ item ) ] ].

	^ listItems!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:17:40' prior: 50873691!
listCartFor: aCartId on: aDateTime 

	| cart listItems |
	
	cart := self getCart: aCartId ifValidOn: aDateTime.
	listItems := OrderedCollection new.
	
	catalog keysDo: [ :item | |itemQuantity| 
		itemQuantity := (cart occurrencesOf: item).
		itemQuantity = 0 ifFalse: [ listItems add: ( itemQuantity @ item ) ] ].

	^ listItems! !

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:17:49'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:17:51'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:17:51'!
ERROR!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:17:51'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:17:51'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:17:51'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:17:51'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:17:51'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:18:03' prior: 50873705!
test02CartIsEmptyBeforeCreateCartForValidCredentials

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self assert: (app listCartFor: cartId on: self now) isEmpty .! !

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:18:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:18:08'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:18:12' prior: 50873747!
test05ListCartHasItemAndQuantityAddedToCart

	| app cartId expectedList |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	
	expectedList := OrderedCollection new.
	expectedList add: (1@validIsbn).
	
	self assert: (app listCartFor: cartId on: self now) equals: expectedList.! !

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:18:13'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:18:41'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:18:41'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:18:41'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:18:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:18:47'!
ERROR!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:18:47'!
ERROR!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:19:44' prior: 50873716!
summarizeItemsFrom: aCartId to: items

	(self listCartFor: aCartId) do: [ :item | | isbn quantity |
		isbn := item y. quantity := item x.
		items at: isbn ifAbsent: [			items add: isbn->0 ] .
		items at: isbn put: ( (items at: isbn) + quantity)]! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:20:21'!
listCartFor: aCartId

	^ self listCartFor: aCartId on: self new. 
! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:20:27'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:20:27'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:20:27'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:20:27'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:20:27'!
PASSED!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:21:56' prior: 50873965!
listCartFor: aCartId

	| cart listItems |
	
	cart := self getCart: aCartId.
	listItems := OrderedCollection new.
	
	catalog keysDo: [ :item | |itemQuantity| 
		itemQuantity := (cart occurrencesOf: item).
		itemQuantity = 0 ifFalse: [ listItems add: ( itemQuantity @ item ) ] ].

	^ listItems! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:22:45'!
getCart: aCartId

	
	
	^ (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:22:50' prior: 50874039!
getCart: aCartId
	
	^ (carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ]) key.
	! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:22:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:22:54'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:22:54'!
FAILURE!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:23:05'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:23:06'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:23:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:23:07'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:23:08'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:23:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:23:16'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:23:18'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:23:19'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:23:20'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:23:21'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:23:22'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:23:23'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:23:25'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:23:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:23:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:23:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:23:32'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:23:33'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:23:36'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:23:36'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:26:55'!
FAILURE!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:26:55'!
FAILURE!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:28:10' prior: 50872724!
test15ListPurchasesOfMultipleUsers

	| app anotherValidUser anotherCartId purchasesAnotherUser purchasesFirstUser expectedListPurchasesAnotherUser expectedListPurchasesFirstUser |
	
	app := self createDefaultCatalogedApp.
	
	
	self checkoutCartWith: 1 ofItemin: app  .
	
	anotherValidUser := '54321' .
	anotherCartId := app createCartForUser: anotherValidUser password: correctPassword on: self now.
	self add: 2 ofValidItemToCart: anotherCartId in: app.
	app checkOutCart: anotherCartId 
		withCardNumber: validCardNumber 
		owner: validCardOwner 
		expiresOn: validExpirationDate 
		trought: merchantProcessorSuccess 
		on: self now .
	
	purchasesFirstUser := app listPurchasesFor: validUserID withPassword: correctPassword .
	purchasesAnotherUser := app listPurchasesFor: anotherValidUser withPassword: correctPassword .
	
	expectedListPurchasesFirstUser := self listPurchasesWith: 1 of: validIsbn total: 10.
	expectedListPurchasesAnotherUser := self listPurchasesWith: 2 of: validIsbn total: 20.
	
	self assert: purchasesFirstUser equals: expectedListPurchasesFirstUser.
	self assert: purchasesAnotherUser equals: expectedListPurchasesAnotherUser.! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:28:12'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:28:29'!
PASSED!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:29:08'!
test19CanNotCheckoutTwoTimesSameCart

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:29:26'!
test19CanNotCheckoutTwiceSameCart

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #test19CanNotCheckoutTwoTimesSameCart stamp: 'jn 6/24/2021 16:29:33'!
test19CanNotCheckoutTwoTimesSameCart

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:30:05' prior: 50874316!
test19CanNotCheckoutTwiceSameCart

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:31:17' prior: 50874351!
test19CanNotCheckoutTwiceSameCart

	| app now |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app.
	
	self 
		should: [ ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:31:24' prior: 50874366!
test19CanNotCheckoutTwiceSameCart

	| app |
	
	app := self createDefaultCatalogedApp.
	
	self checkoutCartWith: 1 ofItemin: app.
	
	self 
		should: [ ^true]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:32:36' prior: 50874379!
test19CanNotCheckoutTwiceSameCart

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	app checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .
	
	self 
		should: [ app checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:33:06' prior: 50874392!
test19CanNotCheckoutTwiceSameCart

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	app checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .
	
	self 
		should: [ app checkOutCart: cartId 
			withCardNumber: validCardNumber 
			owner: validCardOwner 
			expiresOn: validExpirationDate 
			trought: merchantProcessorSuccess on: self now .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade canNotCheckoutTwiceSameCartErrorDescription ]! !
!ApplicationFacade class methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:33:32'!
canNotCheckoutTwiceSameCartErrorDescription
	
	^ 'Can not checkout cart twice.'! !

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 16:33:38'!
FAILURE!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 16:33:38'!
FAILURE!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:34:16' prior: 50873253!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |
	self assertCartNotCheckouted: aCartId.
	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self add: aCartId ToPurchasesWithTotal: total. 
	
	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:35:28'!
assertCartNotCheckouted: aCartId

	(purchases includesKey: aCartId) ifTrue: [ 
		self error: ApplicationFacade canNotCheckoutTwiceSameCartErrorDescription ].
	! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 16:35:29'!
PASSED!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 16:36:33'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: ApplicationFacade #addPurchase: stamp: 'jn 6/24/2021 16:37:26'!
addPurchase: aCartId
	
	| userId purchasesDict cartItems |
	
	userId := cartOwners at: aCartId .
	
	purchasesDict := purchases at: userId ifAbsent: [ 
		purchases add: userId->Dictionary new .
		purchases at: userId .
	] .
	
	cartItems := self listCartFor: aCartId on: on .
	
	cartItems do: [ :item |
		purchasesDict at: (item y) ifAbsent: [			purchasesDict add: (item y)->0 ] .
		purchasesDict at: (item y) put: ( (purchasesDict at: (item y)) + (item x))
	]
	
	"purchasesCollection add: aCartId ."!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 16:38:01'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId cartOwners purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationFacade category: 'TusLibros' stamp: 'jn 6/24/2021 16:39:23'!
Object subclass: #ApplicationFacade
	instanceVariableNames: 'lastCartId catalog carts salesBook lastTransactionId purchases cartsForUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: ApplicationFacade #getTotal:quantity: stamp: 'jn 6/24/2021 16:40:41'!
getTotal: anISBN quantity: aQuantity
	
	^ (catalog at: anISBN) * aQuantity !

!methodRemoval: ApplicationFacade #createAvailableId stamp: 'jn 6/24/2021 16:41:45'!
createAvailableId

	lastCartId := lastCartId + 1.
	^ lastCartId
	!
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:44:03' prior: 50874457!
checkOutCart: aCartId withCardNumber: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString trought: aProcessor on: on  

	| card cart cashier total |
	self assertCartNotCheckouted: aCartId.
	cart := self getCart: aCartId ifValidOn: on.
		
	card := self createCardWith: aCardNumber owner: aCardOwner expiresOn: aCardExpirationString .

	cashier := Cashier 
				toCheckout: cart
				charging: card
				throught: aProcessor
				on: self today
				registeringOn: salesBook .
				
	total := cashier checkOut .
	
	self add: aCartId ToPurchasesWithTotal: total. 
	
	^ self getTransactionId.! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:44:15'!
getTransactionId

	lastTransactionId := lastTransactionId + 1 .
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:45:08' prior: 50873161!
createCartForUser: aUserId password: aPassword on: aTimeStamp

	| newCartId newCart |

	self assertAuthentication: aUserId with: aPassword.
	
	newCartId := self getCartId .	
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: newCartId->(newCart->aTimeStamp) .
	self addCart: newCartId forUser: aUserId.
	
	^ newCartId ! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:45:19' prior: 50874673!
getTransactionId

	lastCartId := lastCartId + 1.
	^ lastCartId! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:45:41'!
getCartId

	lastCartId := lastCartId + 1.
	^ lastCartId! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 16:45:49' prior: 50874693!
getTransactionId

	lastTransactionId := lastTransactionId + 1.
	^ lastTransactionId! !
!ApplicationFacade methodsFor: 'communication' stamp: 'jn 6/24/2021 16:46:29' prior: 50872857!
addToCart: aCartId with: anISBN quantity: aQuantity on: on 

	|cart|
	cart := self getCart: aCartId ifValidOn: on.
	cart add: aQuantity of: anISBN.
	! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:48:03'!
test16AddToCartFailsAfter30MinutesOfInactivity

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #test16AddToCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:48:04'!
test16AddToCartFailsAfter30Minutes

	| app cartId |
	
	app := self createDefaultCatalogedApp.
	
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	
	self 
		should: [ app addToCart: cartId with: validIsbn quantity: 1 on: (self now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:48:11'!
test17CheckOutCartFailsAfter30MinutesOfInactivity

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #test17CheckOutCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:48:11'!
test17CheckOutCartFailsAfter30Minutes

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:48:18'!
test18ListCartFailsAfter30MinutesOfInactivity

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!methodRemoval: ApplicationFacadeTest #test18ListCartFailsAfter30Minutes stamp: 'jn 6/24/2021 16:48:18'!
test18ListCartFailsAfter30Minutes

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]!
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:52:33'!
test20EventFailsAfter30MinutesOfInactivity

	| app now cartId |
	
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	self add: 1 ofValidItemToCart: cartId in: app.
	now := self now.

	self 
		should: [ app listCartFor: cartId on: (now + 30 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:56:14' prior: 50874813!
test20EventFailsAfter30MinutesOfInactivity

	| app now cartId |

	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: self now.
	app addToCart: cartId with: validIsbn quantity: 2 on: (self now + 15 minutes).

	self assert: (app listCartFor: cartId on: (self now + 30 minutes)).
		! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:56:28' prior: 50874831!
test20EventFailsAfter30MinutesOfInactivity

	| app now cartId |
	now := self now.
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: now.
	app addToCart: cartId with: validIsbn quantity: 2 on: (now + 15 minutes).

	self assert: (app listCartFor: cartId on: (now + 30 minutes)).
		! !
!ApplicationFacadeTest methodsFor: 'as yet unclassified' stamp: 'jn 6/24/2021 16:57:25' prior: 50874845!
test20EventFailsAfter30MinutesOfInactivity

	| app now cartId expectedList |
	now := self now.
	app := self createDefaultCatalogedApp.
	cartId := self createCartForValidCredentialsIn: app createAt: now.
	app addToCart: cartId with: validIsbn quantity: 2 on: (now + 15 minutes).
	
	expectedList := OrderedCollection new.
	expectedList add: (2@validIsbn).
	
	self assert: (app listCartFor: cartId on: (self now + 30 minutes)) equals: expectedList.
		! !

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 16:57:30'!
ERROR!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 16:57:30'!
ERROR!
!ApplicationFacade methodsFor: 'assertions' stamp: 'jn 6/24/2021 16:59:27' prior: 50872794!
assertCartLastActivity: aCreationDateTime on: on
	
	| difference |
	difference := (on - aCreationDateTime) minutes.
	(difference >= 30) ifTrue: [ self error: ApplicationFacade cartOutOfTimeErrorDescription ].! !
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 17:01:39' prior: 50872845!
getCart: aCartId ifValidOn: on

	| cartAndCreation cart |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	cart := cartAndCreation key.
	carts at: (aCartId -> (cart -> on)).
	^  cart.
	! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:01:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:01:41'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 17:01:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 17:01:41'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 17:01:42'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 17:01:42'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:01:42'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:01:42'!
FAILURE!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:01:42'!
ERROR!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:02:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:02:36'!
FAILURE!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:02:36'!
ERROR!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:03:00'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:03:01'!
ERROR!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:03:01'!
ERROR!
!ApplicationFacade methodsFor: 'private' stamp: 'jn 6/24/2021 17:03:24' prior: 50874894!
getCart: aCartId ifValidOn: on

	| cartAndCreation cart |
	
	cartAndCreation := carts at: aCartId ifAbsent: [ 	self error: ApplicationFacade invalidCartIdErrorDescription ].
	self assertCartLastActivity: (cartAndCreation value) on: on .
	cart := cartAndCreation key.
	carts add: (aCartId -> (cart -> on)).
	^  cart.
	! !

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:26'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:26'!
FAILURE!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:03:30'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:03:31'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 17:03:32'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 17:03:32'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 17:03:33'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 17:03:34'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 17:03:35'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 17:03:35'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 17:03:36'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 17:03:37'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 17:03:38'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 17:03:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:39'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:40'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:40'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:52'!
FAILURE!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:52'!
FAILURE!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:56'!
PASSED!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 17:03:57'!
PASSED!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:03:58'!
PASSED!
!ApplicationFacadeTest methodsFor: 'tests' stamp: 'jn 6/24/2021 17:04:57' prior: 50874749!
test17CheckOutCartFailsAfter30MinutesOfInactivity

	| app now |
	
	app := self createDefaultCatalogedApp.
	now := self now.
	
	self 
		should: [ self checkoutCartWith: 1 ofItemin: app createAt: now checkOutAt: (now + 31 minutes). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = ApplicationFacade cartOutOfTimeErrorDescription ]! !

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:04:59'!
PASSED!

!testRun: #ApplicationFacadeTest #test01CanNotCreateCartWithInvalidCredentials stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test02CartIsEmptyBeforeCreateCartForValidCredentials stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test03CartsIdNotEqualsWhenCreateMultipleCarts stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test04CanNotAddToCartToInvalidCartId stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test05ListCartHasItemAndQuantityAddedToCart stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test06SalesBookHasRegisteredCheckOut stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test07TransactionsIdsNotEqualesWhenCheckOutMultipleCarts stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test08CanNotListPurchasesWithInvalidCredentials stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test09EmptyListPurchasesOfValidUserWithoutPurchases stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test10ListPurchasesKnowsItemsQuantityAndTotalOfUserUniquePurchase stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test11ListPurchasesKnowsItemsQuantityAndTotalOfUserMultiplePurchases stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test15ListPurchasesOfMultipleUsers stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test16AddToCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test17CheckOutCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test18ListCartFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test19CanNotCheckoutTwiceSameCart stamp: 'jn 6/24/2021 17:05:02'!
PASSED!

!testRun: #ApplicationFacadeTest #test20EventFailsAfter30MinutesOfInactivity stamp: 'jn 6/24/2021 17:05:02'!
PASSED!