

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (3 June 2021 20:11:46) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!


----End fileIn of C:\pablo\UBA\isw1\windows64\Packages\TerseGuide.pck.st----!

----End fileIn of C:\Users\pablo\Desktop\MarsRover-WithHeading.st----!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 20:21:34'!
PASSED!

TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:22:03'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'no messages' stamp: 'plp 6/3/2021 20:22:43'!
test01

	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:23:07' prior: 50862841!
test01

	| rover |
	rover := MarsRover at: 1@2 heading: #North! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:23:18' prior: 50862845!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North
	! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:28:52'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:28:43' prior: 50862850!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log first equals: 1@3.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:28:58'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:29:13'!
addLogForPosition: aLog 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:30:30' prior: 50862874!
addLogForPosition: aLog ! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:30:34'!
ERROR!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:30:40'!
ERROR!
!Log methodsFor: 'nil' stamp: 'plp 6/3/2021 20:30:54'!
first

	^ 1@3! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:24' prior: 50862862!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: '1@3'.
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:38'!
printLog

	^ 1@3! !

!methodRemoval: Log #first stamp: 'plp 6/3/2021 20:33:38'!
first

	^ 1@3!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:42' prior: 50862900!
printLog

	^ '1@3'! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:33:53' overrides: 16880927!
size

	^ 1! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:33:58'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:33:58'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:32' prior: 50862890!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: '1@2'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:38' prior: 50862918!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: '1@3 1@2'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:35:51' prior: 50862928!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: '1@3'.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:01'!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' '1@2') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:12' prior: 50862939!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForPosition: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:37:19'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:30' prior: 50862906!
printLog

	^ #('1@3')! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:37:34'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:37:49' prior: 50862973!
printLog

	^ #('1@3') asOrderedCollection! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:38:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:38:05' prior: 50862879!
addLogForPosition: aLog 

	positionLog := aLog! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:43:14' prior: 50862498!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:43:16' prior: 50862997!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	self signalInvalidCommand.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:44:17'!
Object subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:15'!
logPosition: aPosition

	log add: (aPosition asString)! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:38' overrides: 16896425!
initialize

	log := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:49' prior: 50862979!
printLog

	^ log! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:44:54' prior: 50862910 overrides: 16880927!
size

	^ log size! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:44:59'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:45:11'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:46:06' prior: 50863015!
processCommand: aCommand

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:46:22' prior: 50863061!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	((self isForwardCommand: aCommand) or: (self isBackwardCommand: aCommand))	 ifTrue: [ positionLog logPosition: position ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'plp 6/3/2021 20:52:48' prior: 50863079!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].	

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:52:58' prior: 50862476!
moveForward
	
	head moveForward: self.
	positionLog logPosition: position.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:21' prior: 50863110!
moveForward
	
	head moveForward: self.
	
	
	positionLog isNil ifFalse: [ position logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:23' prior: 50863115!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ position logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:37' prior: 50863121!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 20:53:44' prior: 50862468!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog logPosition: position ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 20:53:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 20:54:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 20:54:02'!
PASSED!

#East!

#East asString!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:25'!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 20:56:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:35'!
addLogForHeading: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:56:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 20:56:55' prior: 50863196!
addLogForHeading: aLog 
	
	headingLog := aLog! !

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 20:56:59'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:58:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 20:58:22' prior: 50862442!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head ]! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 20:58:28'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

mr := MarsRover at: 1@1 heading: #North!

mr!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:07' prior: 50863224!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:17' prior: 50862438!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog logHeading: head class cardinalPoint ]! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:02:35'!
log: aPosition

	log add: (aPosition asString)! !

!methodRemoval: Log #logPosition: stamp: 'plp 6/3/2021 21:02:35'!
logPosition: aPosition

	log add: (aPosition asString)!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:44' prior: 50863246!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:02:47' prior: 50863253!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:02:52'!
ERROR!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:02:52'!
ERROR!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:02:52'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:02:57'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:03:08' prior: 50863133!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:03:17' prior: 50863127!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:04:44'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:05:38'!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	rover addLogForPosition: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:06:30' prior: 50863307!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	rover addLogForPosition: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 3.
	self assert: log printLog equals: #('East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:32'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:06:44'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/3/2021 21:08:15' prior: 50862417!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:09:17' prior: 50863274!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ]! !

!testRun: #LogTest #test01 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/3/2021 21:19:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/3/2021 21:19:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/3/2021 21:19:22'!
PASSED!

TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:19:34'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'nil' stamp: 'plp 6/3/2021 21:20:05'!
test01

	| rover window |
	
	! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:21:53'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:21:48' prior: 50863422!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: '1@3'.
	self assert: window heading equals: 'North'.
	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:13' prior: 50863434!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: 1@3.
	self assert: window heading equals: #North.
	! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:14'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:27'!
addWindow: aWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:22:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:41' prior: 50863458!
addWindow: aWindow 
	
	window := aWindow! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:44'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:51'!
position
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:22:55' prior: 50863478!
position
	
	^ 1@3! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:22:57'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:02'!
heading
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:10' prior: 50863489!
heading
	
	^ #North! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:23:12'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:23:12'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:23:46'!
test02

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover addWindow: window.	
	
	rover process: 'frf'.
	
	self assert: window position equals: 2@3.
	self assert: window heading equals: #East.
	! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:23:50'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:11' prior: 50863289!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position heading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:23' prior: 50863514!
moveBackward
	
	head moveBackward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/3/2021 21:25:39' prior: 50863295!
moveForward
	
	head moveForward: self.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:25:47' prior: 50863359!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/3/2021 21:25:51' prior: 50863267!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:26:01'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:06'!
updatePosition: aPoint andHeading: aSymbol 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:26:44'!
Object subclass: #Window
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/3/2021 21:26:45'!
Object subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:42' prior: 50863563!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:47' prior: 50863584!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.! !

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:26:48'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:26:56' prior: 50863493!
heading
	
	^ heading ! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/3/2021 21:27:01' prior: 50863483!
position
	
	^ position ! !

!testRun: #WindowTest #test01 stamp: 'plp 6/3/2021 21:27:03'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/3/2021 21:27:03'!
PASSED!

----SNAPSHOT----(3 June 2021 22:58:50) CuisUniversity-4532.image priorSource: 16885703!

----SNAPSHOT----(3 June 2021 22:59:13) CuisUniversity-4532.image priorSource: 17022728!

----STARTUP---- (4 June 2021 20:12:52) as C:\pablo\UBA\isw1\windows64\CuisUniversity-4532.image!

!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:14:39'!
moveRover: anAmount

	! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:15:04' prior: 50862488!
moveWest
	
	self moveRover: (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:15:11' prior: 50863619!
moveRover: anAmount

	position := position + anAmount! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:15' prior: 50862484!
moveSouth
	
	self moveRover: (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:21' prior: 50862480!
moveNorth
	
	self moveRover: (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:16:55' prior: 50862472!
moveEast
	
	self moveRover: (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:11' prior: 50863523!
moveBackward
	
	head moveBackward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:19' prior: 50863627!
moveRover: anAmount

	position := position + anAmount.
	
	positionLog isNil ifFalse: [ positionLog log: position ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:18:25' prior: 50863532!
moveForward
	
	head moveForward: self.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:18:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:18:31'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:18:33'!
PASSED!

Object subclass: #Subscriber
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Subscriber category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:37'!
Object subclass: #Subscriber
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Subscriber subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:43'!
Subscriber subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Subscriber subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:20:51'!
Subscriber subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:20:58'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:20:58'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:02'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:21:06'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).! !
!Behavior method!
initialize
	(log _ [
	(OrderedCollection
		cover: (21 to: 37)
		declaredAt: (21 to: 37)) new ] valueCoveringAll:
		{39 to: 41})
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !
!Behavior method!
addLogForPosition: aLog
	(positionLog _ aLog
		cover: (43 to: 46)
		declaredAt: (20 to: 23))
		cover: (28 to: 38)
		declaredAt: (28 to: 38).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{306 to: 309}) signalInvalidCommand ] valueCoveringAll:
		{311 to: 330}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(1 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !
!Behavior method!
moveRover: anAmount
	(position _ [
	(position
		cover: (23 to: 30)
		declaredAt: (23 to: 30)) +
		(anAmount
			cover: (46 to: 53)
			declaredAt: (12 to: 19)) ] valueCoveringAll:
		{44 to: 44})
		cover: (35 to: 42)
		declaredAt: (23 to: 30).
	[
	([
	(positionLog
		cover: (59 to: 69)
		declaredAt: (59 to: 69)) isNil ] valueCoveringAll:
		{71 to: 75}) ifFalse: [
		[
		(positionLog
			cover: (88 to: 98)
			declaredAt: (59 to: 69)) log:
			(position
				cover: (105 to: 112)
				declaredAt: (23 to: 30)) ] valueCoveringAll:
			{100 to: 103} ]] valueCoveringAll:
		{77 to: 84}.
	[
	([
	(window
		cover: (118 to: 123)
		declaredAt: (118 to: 123)) isNil ] valueCoveringAll:
		{125 to: 129}) ifFalse: [
		[
		(window
			cover: (142 to: 147)
			declaredAt: (118 to: 123))
			updatePosition:
				(position
					cover: (165 to: 172)
					declaredAt: (23 to: 30))
			andHeading:
				([
				([
				(head
					cover: (186 to: 189)
					declaredAt: (186 to: 189)) class ] valueCoveringAll:
					{191 to: 195}) cardinalPoint ] valueCoveringAll:
					{197 to: 209}) ] valueCoveringAll:
			{149 to: 163. 174 to: 184} ]] valueCoveringAll:
		{131 to: 138}.! !
!Behavior method!
log: aPosition
	[
	(log
		cover: (18 to: 20)
		declaredAt: (18 to: 20)) add:
		([
		(aPosition
			cover: (28 to: 36)
			declaredAt: (6 to: 14)) asString ] valueCoveringAll:
			{38 to: 45}) ] valueCoveringAll:
		{22 to: 25}.! !
!Behavior method!
size
	^ [
	(log
		cover: (10 to: 12)
		declaredAt: (10 to: 12)) size ] valueCoveringAll:
		{14 to: 17}.! !
!Behavior method!
printLog
	^ log
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(-1 coverAll:
				{33 to: 34}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
addLogForHeading: aLog
	(headingLog _ aLog
		cover: (42 to: 45)
		declaredAt: (19 to: 22))
		cover: (28 to: 37)
		declaredAt: (28 to: 37).! !
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	([
	(headingLog
		cover: (43 to: 52)
		declaredAt: (43 to: 52)) isNil ] valueCoveringAll:
		{54 to: 58}) ifFalse: [
		[
		(headingLog
			cover: (71 to: 80)
			declaredAt: (43 to: 52)) log:
			([
			([
			(head
				cover: (87 to: 90)
				declaredAt: (16 to: 19)) class ] valueCoveringAll:
				{92 to: 96}) cardinalPoint ] valueCoveringAll:
				{98 to: 110}) ] valueCoveringAll:
			{82 to: 85} ]] valueCoveringAll:
		{60 to: 67}.
	[
	([
	(window
		cover: (116 to: 121)
		declaredAt: (116 to: 121)) isNil ] valueCoveringAll:
		{123 to: 127}) ifFalse: [
		[
		(window
			cover: (140 to: 145)
			declaredAt: (116 to: 121))
			updatePosition:
				(position
					cover: (163 to: 170)
					declaredAt: (163 to: 170))
			andHeading:
				([
				([
				(head
					cover: (184 to: 187)
					declaredAt: (16 to: 19)) class ] valueCoveringAll:
					{189 to: 193}) cardinalPoint ] valueCoveringAll:
					{195 to: 207}) ] valueCoveringAll:
			{147 to: 161. 172 to: 182} ]] valueCoveringAll:
		{129 to: 136}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:21:16'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(1 coverAll:
			{30 to: 30}) @
			(0 coverAll:
				{32 to: 32}) ] valueCoveringAll:
			{31 to: 31}) ] valueCoveringAll:
		{18 to: 27}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:21:17'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:22:00'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{306 to: 309}) signalInvalidCommand ] valueCoveringAll:
		{311 to: 330}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(1 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !
!Behavior method!
moveRover: anAmount
	(position _ [
	(position
		cover: (23 to: 30)
		declaredAt: (23 to: 30)) +
		(anAmount
			cover: (46 to: 53)
			declaredAt: (12 to: 19)) ] valueCoveringAll:
		{44 to: 44})
		cover: (35 to: 42)
		declaredAt: (23 to: 30).
	[
	([
	(positionLog
		cover: (59 to: 69)
		declaredAt: (59 to: 69)) isNil ] valueCoveringAll:
		{71 to: 75}) ifFalse: [
		[
		(positionLog
			cover: (88 to: 98)
			declaredAt: (59 to: 69)) log:
			(position
				cover: (105 to: 112)
				declaredAt: (23 to: 30)) ] valueCoveringAll:
			{100 to: 103} ]] valueCoveringAll:
		{77 to: 84}.
	[
	([
	(window
		cover: (118 to: 123)
		declaredAt: (118 to: 123)) isNil ] valueCoveringAll:
		{125 to: 129}) ifFalse: [
		[
		(window
			cover: (142 to: 147)
			declaredAt: (118 to: 123))
			updatePosition:
				(position
					cover: (165 to: 172)
					declaredAt: (23 to: 30))
			andHeading:
				([
				([
				(head
					cover: (186 to: 189)
					declaredAt: (186 to: 189)) class ] valueCoveringAll:
					{191 to: 195}) cardinalPoint ] valueCoveringAll:
					{197 to: 209}) ] valueCoveringAll:
			{149 to: 163. 174 to: 184} ]] valueCoveringAll:
		{131 to: 138}.! !

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) moveRover:
		([
		(0 coverAll:
			{31 to: 31}) @
			(-1 coverAll:
				{33 to: 34}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{19 to: 28}.! !

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	([
	(headingLog
		cover: (43 to: 52)
		declaredAt: (43 to: 52)) isNil ] valueCoveringAll:
		{54 to: 58}) ifFalse: [
		[
		(headingLog
			cover: (71 to: 80)
			declaredAt: (43 to: 52)) log:
			([
			([
			(head
				cover: (87 to: 90)
				declaredAt: (16 to: 19)) class ] valueCoveringAll:
				{92 to: 96}) cardinalPoint ] valueCoveringAll:
				{98 to: 110}) ] valueCoveringAll:
			{82 to: 85} ]] valueCoveringAll:
		{60 to: 67}.
	[
	([
	(window
		cover: (116 to: 121)
		declaredAt: (116 to: 121)) isNil ] valueCoveringAll:
		{123 to: 127}) ifFalse: [
		[
		(window
			cover: (140 to: 145)
			declaredAt: (116 to: 121))
			updatePosition:
				(position
					cover: (163 to: 170)
					declaredAt: (163 to: 170))
			andHeading:
				([
				([
				(head
					cover: (184 to: 187)
					declaredAt: (16 to: 19)) class ] valueCoveringAll:
					{189 to: 193}) cardinalPoint ] valueCoveringAll:
					{195 to: 207}) ] valueCoveringAll:
			{147 to: 161. 172 to: 182} ]] valueCoveringAll:
		{129 to: 136}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.
	[
	([
	(headingLog
		cover: (41 to: 50)
		declaredAt: (41 to: 50)) isNil ] valueCoveringAll:
		{52 to: 56}) ifFalse: [
		[
		(headingLog
			cover: (69 to: 78)
			declaredAt: (41 to: 50)) log:
			([
			([
			(head
				cover: (85 to: 88)
				declaredAt: (15 to: 18)) class ] valueCoveringAll:
				{90 to: 94}) cardinalPoint ] valueCoveringAll:
				{96 to: 108}) ] valueCoveringAll:
			{80 to: 83} ]] valueCoveringAll:
		{58 to: 65}.
	[
	([
	(window
		cover: (114 to: 119)
		declaredAt: (114 to: 119)) isNil ] valueCoveringAll:
		{121 to: 125}) ifFalse: [
		[
		(window
			cover: (138 to: 143)
			declaredAt: (114 to: 119))
			updatePosition:
				(position
					cover: (161 to: 168)
					declaredAt: (161 to: 168))
			andHeading:
				([
				([
				(head
					cover: (182 to: 185)
					declaredAt: (15 to: 18)) class ] valueCoveringAll:
					{187 to: 191}) cardinalPoint ] valueCoveringAll:
					{193 to: 205}) ] valueCoveringAll:
			{145 to: 159. 170 to: 180} ]] valueCoveringAll:
		{127 to: 134}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	(head _ [
	(MarsRoverHeadingWest
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(1 coverAll:
			{30 to: 30}) @
			(0 coverAll:
				{32 to: 32}) ] valueCoveringAll:
			{31 to: 31}) ] valueCoveringAll:
		{18 to: 27}.! !

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) moveRover:
		([
		(-1 coverAll:
			{30 to: 31}) @
			(0 coverAll:
				{33 to: 33}) ] valueCoveringAll:
			{32 to: 32}) ] valueCoveringAll:
		{18 to: 27}.! !

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:22:01'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:23:36'!
head: aDirection

! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:23:53' prior: 50864673!
head: aDirection

	head := aDirection new.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:03' prior: 50864677!
head: aDirection

	head := aDirection new.
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:05' prior: 50864681!
head: aDirection

	head := aDirection new.
	
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:09' prior: 50863551!
rotateRight
	
	head rotateRight: self.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:12' prior: 50863541!
rotateLeft
	
	head rotateLeft: self.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:24:17'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:24:17'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:24:17'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:24:17'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:32' prior: 50862422!
headEast
	
	self head: MarsRoverHeadingEast! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:41' prior: 50862426!
headNorth
	
	self head: MarsRoverHeadingNorth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:48' prior: 50862430!
headSouth
	
	self head: MarsRoverHeadingSouth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:24:52' prior: 50862434!
headWest
	
	self head: MarsRoverHeadingWest! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:24:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/4/2021 20:24:57'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:25:01'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:25:01'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:27:09'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:12'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:12'!
PASSED!

TestCase subclass: #SubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #SubscriberTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:27'!
TestCase subclass: #SubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriberTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:35'!
SubscriberTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:38'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:38'!
PASSED!

Subscriber subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:45'!
Subscriber subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

SubscriberTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:27:48'!
SubscriberTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:27:51'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 20:27:53'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 20:27:53'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head subscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:28:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head subscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/4/2021 20:28:26' prior: 50863353!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	subscribers := OrderedCollection new.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:37'!
subscribe: aSubscriber! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:42' prior: 50864885!
subscribe: aSubscriber

	subscribers add: aSubscriber ! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:29:45' prior: 50864889!
subscribe: aSubscriber

	subscribers add: aSubscriber.! !

!methodRemoval: MarsRover #addLogForHeading: stamp: 'plp 6/4/2021 20:30:13'!
addLogForHeading: aLog 
	
	headingLog := aLog!

!methodRemoval: MarsRover #addLogForPosition: stamp: 'plp 6/4/2021 20:30:16'!
addLogForPosition: aLog 

	positionLog := aLog!

!methodRemoval: MarsRover #addWindow: stamp: 'plp 6/4/2021 20:30:20'!
addWindow: aWindow 
	
	window := aWindow!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:30:39' prior: 50864691!
head: aDirection

	head := aDirection new.
	
	self broadcast.
	"headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]"! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:30:48'!
broadcast

	! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:30:54' prior: 50864920!
broadcast

	subscribers do: [  ]! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:31:18' prior: 50864924!
broadcast

	subscribers do: [ :l | l ]! !
!Subscriber methodsFor: 'nil' stamp: 'plp 6/4/2021 20:32:04'!
recievePosition: aPosition andHeading: aHeading! !
!Subscriber methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:32:11' prior: 50864932!
recievePosition: aPosition andHeading: aHeading

	self subclassResponsibility ! !
!Subscriber methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:32:13' prior: 50864937!
recievePosition: aPosition andHeading: aHeading

	self subclassResponsibility.! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:32:37' prior: 50864928!
broadcast

	subscribers do: [ :s | s recievePosition: position andHeading: head ]! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/4/2021 20:32:46' prior: 50864949!
broadcast

	subscribers do: [ :s | s recievePosition: position andHeading: head class cardinalPoint ]! !

!classRenamed: #Subscriber as: #MarsRoverSubscriber stamp: 'plp 6/4/2021 20:33:12'!
Smalltalk renameClassNamed: #Subscriber as: #MarsRoverSubscriber!

TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverSubscriberTest category: 'MarsRover-WithHeading' stamp: 'plp 6/4/2021 20:33:29'!
TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverSubscriberTest stamp: 'plp 6/4/2021 20:33:40'!
TestCase subclass: #MarsRoverSubscriberTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #SubscriberTest as: #MarsRoverSubscriberTest stamp: 'plp 6/4/2021 20:33:48'!
Smalltalk renameClassNamed: #SubscriberTest as: #MarsRoverSubscriberTest!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:07' overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition ! !

!methodRemoval: Log #log: stamp: 'plp 6/4/2021 20:34:16'!
log: aPosition

	log add: (aPosition asString)!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:31' overrides: 50864943!
recievePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.! !

!methodRemoval: Window #updatePosition:andHeading: stamp: 'plp 6/4/2021 20:34:37'!
updatePosition: aPosition andHeading: aHeading
	
	position := aPosition.
	heading := aHeading.!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:34:51' prior: 50862960!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:34:55'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/4/2021 20:36:27' prior: 50863648!
moveRover: anAmount

	position := position + anAmount.
	
	self broadcast.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/4/2021 20:36:34' prior: 50864910!
head: aDirection

	head := aDirection new.
	
	self broadcast.! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:39'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:46'!
FAILURE!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:36:50'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:00' prior: 50864992 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:03'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:03'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:03'!
ERROR!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:03'!
ERROR!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:37:04'!
ERROR!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:08'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:11'!
ERROR!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:11'!
ERROR!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:18' prior: 50862949!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' '1@2') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:21' prior: 50863183!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:37:24' prior: 50863319!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	rover subscribe: log.
	
	rover process: 'rfr'.
	
	self assert: log size equals: 3.
	self assert: log printLog equals: #('East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:37:26'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:37:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:32'!
FAILURE!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:37:32'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:01' prior: 50865043 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString.
	log add: aHeading asString! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:01' prior: 50865109 overrides: 50864943!
recievePosition: aPosition andHeading: aHeading

	log add: aPosition asString.
	log add: aHeading asString.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:14' prior: 50865013!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('1@3' 'North') asOrderedCollection.
	! !

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:39:17'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:23' prior: 50865123!
test01

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'f'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@3' 'North') asOrderedCollection.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:39:46' prior: 50865066!
test02

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'fb'.
	
	self assert: log size equals: 4.
	self assert: log printLog equals: #('1@3' 'North' '1@2' 'North') asOrderedCollection.
	! !

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:39:48'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:39:48'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:39:48'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:40:02' prior: 50865077!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'r'.
	
	self assert: log size equals: 2.
	self assert: log printLog equals: #('1@2' 'East') asOrderedCollection.
	! !

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:40:03'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:40:03'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:40:03'!
FAILURE!

log size!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:50'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:41:54'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:41:54'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:41:54'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 20:42:46' prior: 50865088!
test04

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover subscribe: log.	
	
	rover process: 'rfr'.
	
	self assert: log size equals: 6.
	self assert: log printLog equals: #('1@2' 'East' '2@2' 'East' '2@2' 'South') asOrderedCollection.
	! !

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 20:42:47'!
PASSED!

!testRun: #LogTest #test01 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/4/2021 21:27:18'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 21:27:20'!
ERROR!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:20'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 21:27:29' prior: 50863445!
test01

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover subscribe: window.	
	
	rover process: 'f'.
	
	self assert: window position equals: 1@3.
	self assert: window heading equals: #North.
	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/4/2021 21:27:39' prior: 50863501!
test02

	| rover window |
	rover := MarsRover at: 1@2 heading: #North.	
	window := Window new.
	
	rover subscribe: window.	
	
	rover process: 'frf'.
	
	self assert: window position equals: 2@3.
	self assert: window heading equals: #East.
	! !

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/4/2021 21:27:43'!
PASSED!

----SNAPSHOT----(4 June 2021 21:42:56) CuisUniversity-4532.image priorSource: 17022817!

----SNAPSHOT----(4 June 2021 21:43:05) CuisUniversity-4532.image priorSource: 17075879!

----STARTUP---- (5 June 2021 13:49:09) as /home/pablo/UBA/comp2021/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/pablo/UBA/comp2021/isw1/linux64/Packages/TerseGuide.pck.st----!

----End fileIn of /home/pablo/UBA/comp2021/isw1/linux64/MarsRover-WithHeading-Jueves.st----!

!testRun: #LogTest #test01 stamp: 'plp 6/5/2021 13:58:49'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/5/2021 13:58:49'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/5/2021 13:58:49'!
PASSED!

!testRun: #LogTest #test04 stamp: 'plp 6/5/2021 13:58:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 13:58:52'!
PASSED!

!testRun: #WindowTest #test01 stamp: 'plp 6/5/2021 13:58:54'!
PASSED!

!testRun: #WindowTest #test02 stamp: 'plp 6/5/2021 13:58:54'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:00:54' prior: 50862294!
test03

	| rover log |
	rover := MarsRover at: 1@2 heading: #North.	
	log := Log new.
	
	rover addLogForHeading: log.	
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 1.
	self assert: log printLog equals: #('East') asOrderedCollection.
	! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:06:45'!
head: aHeading
	
	head := aHeading new.
		
	headingLog isNil ifFalse: [ headingLog log: head class cardinalPoint ].
	window isNil ifFalse: [ window updatePosition: position andHeading: head class cardinalPoint ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:01' prior: 50862542!
headEast
	
	self head: MarsRoverHeadingEast! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:05' prior: 50862546!
headNorth
	
	self head: MarsRoverHeadingNorth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:10' prior: 50862550!
headSouth
	
	self head: MarsRoverHeadingSouth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:16' prior: 50862554!
headWest
	
	self head: MarsRoverHeadingWest! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:21' prior: 50862558!
rotateLeft
	
	head rotateLeft: self.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 14:07:24' prior: 50862567!
rotateRight
	
	head rotateRight: self.! !

!testRun: #LogTest #test01 stamp: 'plp 6/5/2021 14:07:28'!
PASSED!

!testRun: #LogTest #test02 stamp: 'plp 6/5/2021 14:07:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/5/2021 14:07:28'!
FAILURE!

!testRun: #LogTest #test04 stamp: 'plp 6/5/2021 14:07:28'!
PASSED!

!testRun: #LogTest #test03 stamp: 'plp 6/5/2021 14:07:28'!
FAILURE!

!classRemoval: #Window stamp: 'plp 6/5/2021 14:08:58'!
Object subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'plp 6/5/2021 14:08:59'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'plp 6/5/2021 14:08:59'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'plp 6/5/2021 14:08:59'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'plp 6/5/2021 14:09:00'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'plp 6/5/2021 14:09:00'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'plp 6/5/2021 14:09:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #Log stamp: 'plp 6/5/2021 14:09:01'!
Object subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #WindowTest stamp: 'plp 6/5/2021 14:09:01'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'plp 6/5/2021 14:09:01'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LogTest stamp: 'plp 6/5/2021 14:09:01'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /home/pablo/UBA/comp2021/isw1/2021-1c/19-MarsRover-El regreso/MarsRover-WithHeading.st----!

TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 14:40:19'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'nil' stamp: 'plp 6/5/2021 14:41:27'!
test01LogForwardMovementFacingNorth

	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:41:56' prior: 50863698!
test01LogForwardMovementFacingNorth

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:42:04' prior: 50863703!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 14:42:21'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:42:18' prior: 50863709!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:43:08' prior: 50863723!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:44:13' prior: 50863731!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:44:14' prior: 50863740!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ).! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:44:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:44:22'!
addPositionLog: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 14:44:33'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:44:31' prior: 50863768!
addPositionLog: aLog 
	
	positionLog := aLog! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:44:36'!
ERROR!
!Log methodsFor: 'no messages' stamp: 'plp 6/5/2021 14:45:18' overrides: 16880927!
size

	^ 1! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:45:36'!
printLog

	^ #( '1@3' ) asOrderedCollection ! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:45:42' prior: 50863753!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:45:43'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:45:43'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:46:00'!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:46:04' prior: 50863816!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'b'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:46:26' prior: 50863829!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:46:33' prior: 50863842!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:46:37'!
FAILURE!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 14:47:00'!
Object subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:46:59' overrides: 16896425!
initialize

	log := OrderedCollection new.! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:47:28'!
FAILURE!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:47:28'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:48:53' prior: 50863369!
moveForward
	
	head moveForward: self.
	
	positionLog ifNotNil: [ positionLog logPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:48:57' prior: 50863890!
moveForward
	
	head moveForward: self.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:49:03'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:49:08'!
logNewPosition: aPoint 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:49:31' prior: 50863905!
logNewPosition: aPosition
	
	log add: aPosition asString! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:49:32' prior: 50863910!
logNewPosition: aPosition
	
	log add: aPosition asString.! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:49:34'!
FAILURE!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:49:38'!
FAILURE!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:49:41'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:49:49' prior: 50863789 overrides: 16880927!
size

	^ log size.! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:49:52'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:50:42' prior: 50863361!
moveBackward
	
	head moveBackward: self.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:50:45'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:50:45'!
FAILURE!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:50:45'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:51:04' prior: 50863792!
printLog

	^ log! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:51:06'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:51:06'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:51:33'!
test02LogForMovementAndDirection

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:51:46'!
test02LogForAllMovementsAndAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !

!methodRemoval: LogTest #test02LogForMovementAndDirection stamp: 'plp 6/5/2021 14:52:01'!
test02LogForMovementAndDirection

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:52:21'!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !

!methodRemoval: LogTest #test02LogForAllMovementsAndAllDirections stamp: 'plp 6/5/2021 14:52:21'!
test02LogForAllMovementsAndAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:52:48' prior: 50864002!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:53:41' prior: 50864029!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addPositionLog: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .! !

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 14:53:46'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:53:46'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:53:46'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 14:53:46'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:55:50'!
moveRoverTo: aPosition
	
	position := position + aPosition! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:55:56' prior: 50863896!
moveForward
	
	head moveForward: self.
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:55:59' prior: 50864069!
moveRoverTo: aPosition
	
	position := position + aPosition
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:56:01' prior: 50864078!
moveRoverTo: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:56:05' prior: 50863937!
moveBackward
	
	head moveBackward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:56:08' prior: 50864074!
moveForward
	
	head moveForward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:02'!
moveRoverby: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !

!methodRemoval: MarsRover #moveRoverTo: stamp: 'plp 6/5/2021 14:57:02'!
moveRoverTo: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:08'!
moveRoverBy: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]! !

!methodRemoval: MarsRover #moveRoverby: stamp: 'plp 6/5/2021 14:57:08'!
moveRoverby: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ]!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:19' prior: 50863365!
moveEast
	
	self moveRoverBy: (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:25' prior: 50863373!
moveNorth
	
	self moveRoverBy:  (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:28' prior: 50864130!
moveNorth
	
	self moveRoverBy: (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:31' prior: 50863377!
moveSouth
	
	self moveRoverBy: (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 14:57:36' prior: 50863381!
moveWest
	
	self moveRoverBy: (-1@0)! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 14:57:39'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 14:57:39'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 14:57:39'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:59:09'!
test04LogHeadingRotationRightFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'r'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'East' ) asOrderedCollection .! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 14:59:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:59:21'!
addHeadingLog: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 14:59:31'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 14:59:30' prior: 50864171!
addHeadingLog: aLog 
	
	headingLog := aLog! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 14:59:32'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:00:07' prior: 50863335!
rotateRight
	
	head rotateRight: self.
	
	headingLog ifNotNil: [ headingLog logNewHeading: head ]! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:00:16'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:00:21'!
logNewHeading: aMarsRoverHeadingEast 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:00:50' prior: 50864201!
logNewHeading: aNewHeading

	log add: aNewHeading class cardinalPoint 
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:00:51' prior: 50864206!
logNewHeading: aNewHeading

	log add: aNewHeading class cardinalPoint.
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:01:08' prior: 50864212!
logNewHeading: aNewHeading

	log add: 'East'
	
	! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:01:10'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:01:10'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:01:10'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:01:10'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:01:10'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:01:35'!
test05LogHeadingRotationLeftFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'l'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:01:37'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:01:50' prior: 50863331!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog ifNotNil: [ headingLog logNewHeading: head ]! !

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:01:54'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:02:15' prior: 50864218!
logNewHeading: aNewHeading

	log add: aNewHeading class cardinalPoint ! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:02:16' prior: 50864263!
logNewHeading: aNewHeading

	log add: aNewHeading class cardinalPoint.! !

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:02:20'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:02:20'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:02:20'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:02:20'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:02:20'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:02:20'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:02:43'!
test05LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'l'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:03:04' prior: 50864293!
test05LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:03:32' prior: 50864306!
test05LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test05LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test05LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:03:33'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:03:33'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:03:48'!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !

!methodRemoval: LogTest #test05LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:03:48'!
test05LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addHeadingLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:04:27'!
headRoverTo: aNewHeading

	head := aNewHeading new.
	! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:04:39' prior: 50864385!
headRoverTo: aNewHeading

	head := aNewHeading new.
	
	headingLog ifNotNil: [ headingLog logNewHeading: head ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:04:42' prior: 50864192!
rotateRight
	
	head rotateRight: self.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:04:45' prior: 50864254!
rotateLeft
	
	head rotateLeft: self.! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:05:01' prior: 50863315!
headEast
	
	self headRoverTo: MarsRoverHeadingEast! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:05:07' prior: 50863319!
headNorth
	
	self headRoverTo: MarsRoverHeadingNorth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:05:13' prior: 50863323!
headSouth
	
	self headRoverTo: MarsRoverHeadingSouth! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:05:16' prior: 50863327!
headWest
	
	self headRoverTo: MarsRoverHeadingWest! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:05:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:05:21'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:05:25'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:05:28'!
PASSED!

TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:05:49'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'nil' stamp: 'plp 6/5/2021 15:06:22'!
test01LogPositionForwardFacingNorth

	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:06:57' prior: 50864566!
test01LogPositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:08:14'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:08:11' prior: 50864571!
test01LogPositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.! !

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:08:17'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:08:26'!
roverPosition
	self shouldBeImplemented.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:08:39' prior: 50864585!
test01LogPositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.! !

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:08:40'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:08:48'!
addWindow: aWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:08:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:08:57' prior: 50864619!
addWindow: aWindow 
	
	window := aWindow! !

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:09:01'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:09:20' prior: 50864599!
roverPosition
	
	^ 1@3! !

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:09:23'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:09:27'!
roverHeading
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:09:34' prior: 50864648!
roverHeading
	
	^ #North! !

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:09:35'!
PASSED!

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:09:35'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:10:08'!
test02LogPositionBackwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'fb'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.! !

!testRun: #WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:10:10'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 15:11:54' prior: 50864113!
moveRoverBy: aPosition
	
	position := position + aPosition.
	
	positionLog ifNotNil: [ positionLog logNewPosition: position ].
	window ifNotNil: [ window updatePosition: position ]! !

!testRun: #WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:12:00'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:12:05'!
updatePosition: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:12:18'!
Object subclass: #Window
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:12:16' prior: 50864690!
updatePosition: aPosition
	
	position := aPosition! !

!testRun: #WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:12:19'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:12:29' prior: 50864641!
roverPosition
	
	^ position ! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:12:31' prior: 50864710!
roverPosition
	
	^ position! !

!testRun: #WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:12:36'!
PASSED!

!testRun: #WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:12:36'!
PASSED!

!testRun: #WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:12:36'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:12:59'!
test01UpdatePositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.! !

!methodRemoval: WindowTest #test01LogPositionForwardFacingNorth stamp: 'plp 6/5/2021 15:12:59'!
test01LogPositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:13:05'!
test02UpdatePositionBackwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'fb'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.! !

!methodRemoval: WindowTest #test02LogPositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:13:05'!
test02LogPositionBackwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'fb'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:13:40'!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'fb'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:13:53' prior: 50864774!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:13:53'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/5/2021 15:14:57' prior: 50863310!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:17:17' prior: 50864786!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window for: rover.
	
	rover addWindow: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@4.
	self assert: window roverHeading equals: #East.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:17:23' prior: 50864807!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window for: rover.
	
	rover addWindow: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:20:13' prior: 50864633!
addWindow: aWindow 
	
	window := aWindow.
	
	window updatePosition: position.
	window updateHeading: head.! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:20:22'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:20:29' prior: 50864819!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addWindow: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:20:30'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:20:35'!
updateHeading: aMarsRoverHeadingNorth 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:20:52'!
Object subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:20:51' prior: 50864855!
updateHeading: aHeading
	
	heading := aHeading .! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:20:53'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:21:25' prior: 50864390!
headRoverTo: aNewHeading

	head := aNewHeading new.
	
	headingLog ifNotNil: [ headingLog logNewHeading: head ].
	window ifNotNil: [ window updateHeading: head ]! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:21:28'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:21:28'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:21:28'!
FAILURE!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:21:28'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:21:49' prior: 50864653!
roverHeading
	
	^ heading ! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:21:57' prior: 50864868!
updateHeading: aHeading
	
	heading := aHeading class cardinalPoint .! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:22:00'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:22:00'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:22:00'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:26:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog headingLog window observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'plp 6/5/2021 15:26:31' prior: 50864801!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:26:50'!
addLog: aLog 
	
	observers add: aLog ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:26:51' prior: 50864932!
addLog: aLog 
	
	observers add: aLog! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:26:51' prior: 50864937!
addLog: aLog 
	
	observers add: aLog.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:27:30' prior: 50864831!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow updatePosition: position.
	aWindow updateHeading: head.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:27:56' prior: 50863797!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:28:00' prior: 50863855!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:28:05' prior: 50864043!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := Log new.
	
	rover addLog: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:28:09' prior: 50864155!
test04LogHeadingRotationRightFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'r'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'East' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:28:13' prior: 50864238!
test05LogHeadingRotationLeftFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'l'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:28:17' prior: 50864356!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:28:19'!
FAILURE!

!methodRemoval: MarsRover #addHeadingLog: stamp: 'plp 6/5/2021 15:28:28'!
addHeadingLog: aLog 
	
	headingLog := aLog!

!methodRemoval: MarsRover #addPositionLog: stamp: 'plp 6/5/2021 15:28:31'!
addPositionLog: aLog 
	
	positionLog := aLog!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:29:58'!
updateHeading: aNewHeading

	log add: aNewHeading class cardinalPoint.! !

!methodRemoval: Log #logNewHeading: stamp: 'plp 6/5/2021 15:29:58'!
logNewHeading: aNewHeading

	log add: aNewHeading class cardinalPoint.!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:30:08'!
updatePosition: aPosition
	
	log add: aPosition asString.! !

!methodRemoval: Log #logNewPosition: stamp: 'plp 6/5/2021 15:30:08'!
logNewPosition: aPosition
	
	log add: aPosition asString.!
!MarsRover methodsFor: 'moving' stamp: 'plp 6/5/2021 15:30:46' prior: 50864678!
moveRoverBy: aPosition
	
	position := position + aPosition.
	
	observers do: [ :observer | observer updatePosition: position ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:31:13' prior: 50864876!
headRoverTo: aNewHeading

	head := aNewHeading new.
	
	observers do: [ :observer | observer updateHeading: position ]! !
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:31:28' prior: 50865071!
headRoverTo: aNewHeading

	head := aNewHeading new.
	
	observers do: [ :observer | observer updateHeading: head ]! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:31:31'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:31:31'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:31:31'!
FAILURE!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:31:31'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:31:31'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:31:31'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:31:31'!
FAILURE!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:31:40'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:31:41'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:31:43'!
FAILURE!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:31:43'!
FAILURE!

Log subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:35:29'!
Log subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Log subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:35:33'!
Log subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #Observer
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Observer category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:36:26'!
Object subclass: #Observer
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Observer subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:36:54'!
Observer subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Observer subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:37:01'!
Observer subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Observer subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #Observer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Observer category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:37:18'!
Object subclass: #Observer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Observer subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:37:23'!
Observer subclass: #Log
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Observer subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:37:28'!
Observer subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Observer methodsFor: 'nil' stamp: 'plp 6/5/2021 15:39:06'!
updatePosition: aPosition
	
	self subclassResponsibility ! !

Log subclass: #Heading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Heading category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:39:13'!
Log subclass: #Heading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Log subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:39:18'!
Log subclass: #HeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #Heading stamp: 'plp 6/5/2021 15:39:24'!
Log subclass: #Heading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Log subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionLog category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:39:32'!
Log subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:39:46'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:39:46'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:39:46'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:39:49'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:39:49'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:39:49'!
FAILURE!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:39:49'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:39:49'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:39:49'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:39:49'!
FAILURE!
!HeadingLog methodsFor: 'nil' stamp: 'plp 6/5/2021 15:40:48' overrides: 50865055!
updatePosition: aNewHeading! !
!HeadingLog methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:40:57' prior: 50865293 overrides: 50865055!
updatePosition: aNewPosition! !
!PositionLog methodsFor: 'nil' stamp: 'plp 6/5/2021 15:41:00' overrides: 50865046!
updateHeading: aNewHeading

	log add: aNewHeading class cardinalPoint.! !
!PositionLog methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:02' prior: 50865302 overrides: 50865046!
updateHeading: aNewHeading! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:41:06'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:41:06'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:41:06'!
FAILURE!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:41:06'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:41:06'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:41:06'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:41:06'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:14' prior: 50864954!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addLog: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:41:15'!
FAILURE!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:41:15'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:41:15'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:25' prior: 50864967!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addLog: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:31' prior: 50864980!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addLog: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:37' prior: 50864995!
test04LogHeadingRotationRightFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addLog: headingLog.
	
	rover process: 'r'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'East' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:42' prior: 50865008!
test05LogHeadingRotationLeftFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addLog: headingLog.
	
	rover process: 'l'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:41:44' prior: 50865021!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:41:45'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:41:45'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:41:45'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:41:45'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:41:45'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:41:46'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:41:46'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:42:01'!
test07LogAllEvents

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:42:07' prior: 50865463!
test07LogAllEvents

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:42:15' prior: 50865477!
test07LogAllEvents

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:43:07' prior: 50865491!
test07LogAllEvents

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := Log new.
	
	rover addLog: headingLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: headingLog size equals: 11.
	self assert: headingLog printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:44:21' prior: 50865505!
test07LogAllEvents

	| rover log |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	
	rover addLog: log.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 11.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '0@2' '1@2' 'West' '1@1' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:44:31' prior: 50865520!
test07LogAllEvents

	| rover log |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	
	rover addLog: log.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 11.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '0@2' '1@2' 'West' '1@1' '1@2' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:44:32'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:44:36' prior: 50865534!
test07LogAllEvents

	| rover log |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	
	rover addLog: log.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '0@2' '1@2' 'West' '1@1' '1@2' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:44:37'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:45:17' prior: 50865046!
updateHeading: aNewHeading

	log add: aNewHeading class cardinalPoint asString .! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:45:21'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:45:21'!
FAILURE!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:45:21'!
FAILURE!
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:46:22' prior: 50865550!
test07LogAllEvents

	| rover log |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	
	rover addLog: log.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:23'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:28'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:46:31'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:46:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:46:45'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:46:45'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(observers _ [
	(OrderedCollection
		cover: (103 to: 119)
		declaredAt: (103 to: 119)) new ] valueCoveringAll:
		{121 to: 123})
		cover: (90 to: 98)
		declaredAt: (90 to: 98).! !
!Behavior method!
initialize
	(log _ [
	(OrderedCollection
		cover: (21 to: 37)
		declaredAt: (21 to: 37)) new ] valueCoveringAll:
		{39 to: 41})
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !
!Behavior method!
addLog: aLog
	[
	(observers
		cover: (18 to: 26)
		declaredAt: (18 to: 26)) add:
		(aLog
			cover: (33 to: 36)
			declaredAt: (9 to: 12)) ] valueCoveringAll:
		{28 to: 31}.! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) moveRoverBy:
		([
		(0 coverAll:
			{33 to: 33}) @
			(1 coverAll:
				{35 to: 35}) ] valueCoveringAll:
			{34 to: 34}) ] valueCoveringAll:
		{19 to: 30}.! !
!Behavior method!
moveRoverBy: aPosition
	(position _ [
	(position
		cover: (27 to: 34)
		declaredAt: (27 to: 34)) +
		(aPosition
			cover: (50 to: 58)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{48 to: 48})
		cover: (39 to: 46)
		declaredAt: (27 to: 34).
	[
	(observers
		cover: (64 to: 72)
		declaredAt: (64 to: 72)) do: [ :observer |
		[
		(observer
			cover: (92 to: 99)
			declaredAt: (81 to: 88)) updatePosition:
			(position
				cover: (117 to: 124)
				declaredAt: (27 to: 34)) ] valueCoveringAll:
			{101 to: 115} ]] valueCoveringAll:
		{74 to: 76}.! !
!Behavior method!
updatePosition: aPosition
	[
	(log
		cover: (30 to: 32)
		declaredAt: (30 to: 32)) add:
		([
		(aPosition
			cover: (39 to: 47)
			declaredAt: (17 to: 25)) asString ] valueCoveringAll:
			{49 to: 56}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
size
	^ [
	(log
		cover: (10 to: 12)
		declaredAt: (10 to: 12)) size ] valueCoveringAll:
		{14 to: 17}.! !
!Behavior method!
printLog
	^ log
		cover: (14 to: 16)
		declaredAt: (14 to: 16).! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) moveRoverBy:
		([
		(0 coverAll:
			{33 to: 33}) @
			(-1 coverAll:
				{35 to: 36}) ] valueCoveringAll:
			{34 to: 34}) ] valueCoveringAll:
		{19 to: 30}.! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	[
	(self coverAll:
		{13 to: 16}) headRoverTo:
		(MarsRoverHeadingEast
			cover: (31 to: 50)
			declaredAt: (31 to: 50)) ] valueCoveringAll:
		{18 to: 29}.! !
!Behavior method!
headRoverTo: aNewHeading
	(head _ [
	(aNewHeading
		cover: (36 to: 46)
		declaredAt: (14 to: 24)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[
	(observers
		cover: (56 to: 64)
		declaredAt: (56 to: 64)) do: [ :observer |
		[
		(observer
			cover: (84 to: 91)
			declaredAt: (73 to: 80)) updateHeading:
			(head
				cover: (108 to: 111)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{93 to: 106} ]] valueCoveringAll:
		{66 to: 68}.! !
!Behavior method!
updateHeading: aNewHeading
	^ self.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) moveRoverBy:
		([
		(1 coverAll:
			{32 to: 32}) @
			(0 coverAll:
				{34 to: 34}) ] valueCoveringAll:
			{33 to: 33}) ] valueCoveringAll:
		{18 to: 29}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) moveRoverBy:
		([
		(-1 coverAll:
			{32 to: 33}) @
			(0 coverAll:
				{35 to: 35}) ] valueCoveringAll:
			{34 to: 34}) ] valueCoveringAll:
		{18 to: 29}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{14 to: 17}) headRoverTo:
		(MarsRoverHeadingSouth
			cover: (32 to: 52)
			declaredAt: (32 to: 52)) ] valueCoveringAll:
		{19 to: 30}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) headRoverTo:
		(MarsRoverHeadingWest
			cover: (31 to: 50)
			declaredAt: (31 to: 50)) ] valueCoveringAll:
		{18 to: 29}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!Behavior method!
updateHeading: aNewHeading
	[
	(log
		cover: (30 to: 32)
		declaredAt: (30 to: 32)) add:
		([
		([
		([
		(aNewHeading
			cover: (39 to: 49)
			declaredAt: (16 to: 26)) class ] valueCoveringAll:
			{51 to: 55}) cardinalPoint ] valueCoveringAll:
			{57 to: 69}) asString ] valueCoveringAll:
			{71 to: 78}) ] valueCoveringAll:
		{34 to: 37}.! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headNorth
	[
	(self coverAll:
		{14 to: 17}) headRoverTo:
		(MarsRoverHeadingNorth
			cover: (32 to: 52)
			declaredAt: (32 to: 52)) ] valueCoveringAll:
		{19 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:46:53'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:46:53'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'plp 6/5/2021 15:49:58' prior: 50865078!
headRoverTo: aNewHeading

	head := aNewHeading new.
	
	observers do: [ :observer | observer updateHeading: head class cardinalPoint ]! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:50:07' prior: 50865566!
updateHeading: aNewHeading

	log add: aNewHeading asString .! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:50:18' prior: 50864901!
updateHeading: aHeading
	
	heading := aHeading .! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
FAILURE!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:50:22'!
FAILURE!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:50:22'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:50:31'!
FAILURE!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:50:31'!
FAILURE!
!MarsRover methodsFor: 'observing' stamp: 'plp 6/5/2021 15:50:50' prior: 50864947!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow updatePosition: position.
	aWindow updateHeading: head class cardinalPoint .! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:50:57'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:50:57'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:50:57'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:51:02'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:51:02'!
PASSED!
!MarsRover methodsFor: 'observing' stamp: 'plp 6/5/2021 15:51:55' prior: 50866287!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow updatePosition: position andHeading: head class cardinalPoint.
	aWindow updateHeading: head class cardinalPoint .! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/5/2021 15:51:57' prior: 50866372!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow updatePosition: position andHeading: head class cardinalPoint.! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:52:03'!
ERROR!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:52:03'!
ERROR!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:52:03'!
ERROR!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:52:04'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:52:08'!
updatePosition: aPoint andHeading: aSymbol 
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:52:38' prior: 50866400!
updatePosition: aPosition andHeading: aHeading 
	
	position := aPosition.
	heading := aHeading! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:52:40'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:52:43'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:52:43'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:52:43'!
PASSED!
!Window methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:53:02'!
initialPosition: aPosition andHeading: aHeading 
	
	position := aPosition.
	heading := aHeading! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:53:02' prior: 50866381!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow initialPosition: position andHeading: head class cardinalPoint.! !

!methodRemoval: Window #updatePosition:andHeading: stamp: 'plp 6/5/2021 15:53:02'!
updatePosition: aPosition andHeading: aHeading 
	
	position := aPosition.
	heading := aHeading!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:53:04'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:53:04'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:53:04'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:53:07'!
PASSED!

TestCase subclass: #ObserverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverTest category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:53:24'!
TestCase subclass: #ObserverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

ObserverTest subclass: #ObserverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

ObserverTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:53:37'!
ObserverTest subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

LogTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

ObserverTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'plp 6/5/2021 15:53:51'!
ObserverTest subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:53:55'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:53:56'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:53:56'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:53:56'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:53:58'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:54:00'!
PASSED!

----SNAPSHOT----(5 June 2021 15:54:27) CuisUniversity-4532.image priorSource: 16885703!
!ObserverTest methodsFor: 'nil' stamp: 'plp 6/5/2021 15:55:50'!
test01WindowAndLogSimultaneous! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:55:59' prior: 50866703!
test01WindowAndLogSimultaneous

	| rover window log |
	! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:56:59' prior: 50866708!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addLog: log.
	rover addLog: positionLog .
	rover addWindow: window.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:57:01' prior: 50866713!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addLog: log.
	rover addLog: positionLog .
	rover addWindow: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:57:03' prior: 50866731!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addLog: log .
	rover addLog: positionLog .
	rover addWindow: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !
!MarsRover methodsFor: 'observing' stamp: 'plp 6/5/2021 15:57:59'!
addObserver: anObserver 
	
	observers add: anObserver.
	
	anObserver initialPosition: position andHeading: head class cardinalPoint.! !
!Log methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:23'!
initialPosition: aPosition andHeading: aHeading! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:38' prior: 50865334!
test01LogForwardMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addObserver: positionLog.
	
	rover process: 'f'.
	
	self assert: positionLog size equals: 1.
	self assert: positionLog printLog equals: #( '1@3' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:42' prior: 50865372!
test02LogBackwardsMovementFacingNorth

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addObserver: positionLog.
	
	rover process: 'fb'.
	
	self assert: positionLog size equals: 2.
	self assert: positionLog printLog equals: #( '1@3' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:44' prior: 50865385!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addObserver: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:47' prior: 50865400!
test04LogHeadingRotationRightFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'r'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'East' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:49' prior: 50865413!
test05LogHeadingRotationLeftFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'l'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'West' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:53' prior: 50865426!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:58:56' prior: 50865596!
test07LogAllEvents

	| rover log |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	
	rover addObserver: log.
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 15:58:57'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 15:58:57'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:59:03' prior: 50864727!
test01UpdatePositionForwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:59:04'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:59:04'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:59:04'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:59:04'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:59:08' prior: 50864750!
test02UpdatePositionBackwardFacingNorth

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	rover process: 'fb'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:59:11' prior: 50864841!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 15:59:56'!
test04InitialPositionAfterAddWindow

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.! !

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 15:59:57'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 15:59:57'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 15:59:57'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 15:59:57'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 15:59:57'!
PASSED!

!methodRemoval: MarsRover #addLog: stamp: 'plp 6/5/2021 16:00:10'!
addLog: aLog 
	
	observers add: aLog.!

!methodRemoval: MarsRover #addWindow: stamp: 'plp 6/5/2021 16:00:20'!
addWindow: aWindow 
	
	observers add: aWindow.
	
	aWindow initialPosition: position andHeading: head class cardinalPoint.!
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:00:27' prior: 50866749!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection .! !

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:00:30'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:00:30'!
PASSED!
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:00:37' prior: 50866986!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:01:15' prior: 50867011!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: log size equals: 8.
	self assert: log printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:01:19' prior: 50867030!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:01:53' prior: 50867053!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	
	self assert: window position equals: '1@2'.
	self assert: window ! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:02:02' prior: 50867077!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	
	self assert: window position equals: '1@2'.
! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:02:28' prior: 50867103!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	
	self assert: window roverPosition equals: '1@2'.
	self assert: window roverHeading equals: #North
! !
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:02:30' prior: 50867128!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	
	self assert: window roverPosition equals: '1@2'.
	self assert: window roverHeading equals: #North.
! !

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:02:30'!
FAILURE!
!ObserverTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:02:37' prior: 50867155!
test01WindowAndLogSimultaneous

	| rover window log positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	log := Log new.
	positionLog := PositionLog new.
	window := Window new.
	
	rover addObserver: log .
	rover addObserver: positionLog .
	rover addObserver: window .
	
	rover process: 'fbrfbrfbrfbr'.
	
	self assert: log size equals: 12.
	self assert: log printLog equals: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' ) asOrderedCollection.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #North.
! !

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:02:38'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:02:38'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:02:41'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:02:41'!
PASSED!
!Observer methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:03:13'!
updateHeading: aPosition
	
	self subclassResponsibility ! !
!Observer methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:03:30'!
initialPosition: aPosition andHeading: aHeading 
	
	self subclassResponsibility ! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:04:31'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:07:14'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:07:14'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:13:00'!
testRoverLog: aLog afterProcessing: aStringToProcess andAssertLogSize: aSize andLogCollection: aLogCollection

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North.		
	rover addObserver: aLog.
	rover process: aStringToProcess.
	
	self assert: aLog size equals: aSize.
	self assert: aLog printLog equals: aLogCollection asOrderedCollection.! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:14:25' prior: 50866779!
test01LogForwardMovementFacingNorth

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'f' andAssertLogSize: 1 andLogCollection: #( '1@3' )! !

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:14:26'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:14:26'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:14:50' prior: 50866792!
test02LogBackwardsMovementFacingNorth

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'fb' andAssertLogSize: 2 andLogCollection: #( '1@3' '1@2' )! !

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:14:53'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:14:53'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:00' prior: 50866806!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addObserver: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:13' prior: 50867530!
test03LogAllMovementsForAllDirections

	| rover positionLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	positionLog := PositionLog new.
	
	rover addObserver: positionLog.
	
	rover process: 'fbrfbrfbrfb'.
	
	self assert: positionLog size equals: 8.
	self assert: positionLog printLog equals: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' ) asOrderedCollection .
	
	self testRoverLog: positionLog afterProcessing: 'fbrfbrfbrfb' andAssertLogSize: 2 andLogCollection: #( '1@3' '1@2' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:24' prior: 50867545!
test03LogAllMovementsForAllDirections

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'fbrfbrfbrfb' andAssertLogSize: 8 andLogCollection: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:27' prior: 50867563!
test03LogAllMovementsForAllDirections

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'fbrfbrfbrfb' andAssertLogSize: 8 andLogCollection: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' )! !

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:15:28'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:15:28'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:44' prior: 50866821!
test04LogHeadingRotationRightFacingNorth

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'r'.
	
	self assert: headingLog size equals: 1.
	self assert: headingLog printLog equals: #( 'East' ) asOrderedCollection .
	
	self testRoverLog: headingLog afterProcessing: 'r' andAssertLogSize: 1 andLogCollection: #( 'East' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:15:49' prior: 50867609!
test04LogHeadingRotationRightFacingNorth

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'r' andAssertLogSize: 1 andLogCollection: #( 'East' )! !

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:15:51'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:15:51'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:08' prior: 50866834!
test05LogHeadingRotationLeftFacingNorth

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'l' andAssertLogSize: 1 andLogCollection: #( 'West' )! !

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:16:10'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:16:10'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:24' prior: 50866847!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .
	
	self testRoverLog: headingLog afterProcessing: 'l' andAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:28' prior: 50867692!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	headingLog := HeadingLog new.
	
	rover addObserver: headingLog.
	
	rover process: 'rrrrllll'.
	
	self assert: headingLog size equals: 8.
	self assert: headingLog printLog equals: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' ) asOrderedCollection .
	
	self testRoverLog: headingLog afterProcessing: 'rrrrllll' andAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:32' prior: 50867712!
test06LogAllHeadingRotationsForAPosition

	| rover headingLog |
	
	rover := MarsRover at: 1@2 heading: #North.
	self testRoverLog: headingLog afterProcessing: 'rrrrllll' andAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:42' prior: 50867732!
test06LogAllHeadingRotationsForAPosition

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'rrrrllll' andAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:16:43' prior: 50867744!
test06LogAllHeadingRotationsForAPosition

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'rrrrllll' andAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:16:44'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:16:44'!
PASSED!
!LogTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:17:09' prior: 50866862!
test07LogAllEvents

	| log |
	
	log := Log new.
	self testRoverLog: log afterProcessing: 'fbrfbrfbrfbr' andAssertLogSize: 12 andLogCollection: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' )! !

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:17:14'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:17:14'!
PASSED!
!LogTest methodsFor: 'test - private' stamp: 'plp 6/5/2021 16:17:44'!
testRoverLog: aLog afterProcessing: aStringToProcess thenAssertLogSize: aSize andLogCollection: aLogCollection

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North.		
	rover addObserver: aLog.
	rover process: aStringToProcess.
	
	self assert: aLog size equals: aSize.
	self assert: aLog printLog equals: aLogCollection asOrderedCollection.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867659!
test05LogHeadingRotationLeftFacingNorth

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'l' thenAssertLogSize: 1 andLogCollection: #( 'West' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867755!
test06LogAllHeadingRotationsForAPosition

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'rrrrllll' thenAssertLogSize: 8 andLogCollection: #( 'East' 'South' 'West' 'North' 'West' 'South' 'East' 'North' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867496!
test02LogBackwardsMovementFacingNorth

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'fb' thenAssertLogSize: 2 andLogCollection: #( '1@3' '1@2' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867463!
test01LogForwardMovementFacingNorth

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'f' thenAssertLogSize: 1 andLogCollection: #( '1@3' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867574!
test03LogAllMovementsForAllDirections

	| positionLog |
	
	positionLog := PositionLog new.
	self testRoverLog: positionLog afterProcessing: 'fbrfbrfbrfb' thenAssertLogSize: 8 andLogCollection: #( '1@3' '1@2' '2@2' '1@2' '1@1' '1@2' '0@2' '1@2' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867790!
test07LogAllEvents

	| log |
	
	log := Log new.
	self testRoverLog: log afterProcessing: 'fbrfbrfbrfbr' thenAssertLogSize: 12 andLogCollection: #( '1@3' '1@2' 'East' '2@2' '1@2' 'South' '1@1' '1@2' 'West' '0@2' '1@2' 'North' )! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'plp 6/5/2021 16:17:44' prior: 50867625!
test04LogHeadingRotationRightFacingNorth

	| headingLog |
	
	headingLog := HeadingLog new.
	self testRoverLog: headingLog afterProcessing: 'r' thenAssertLogSize: 1 andLogCollection: #( 'East' )! !

!methodRemoval: LogTest #testRoverLog:afterProcessing:andAssertLogSize:andLogCollection: stamp: 'plp 6/5/2021 16:17:44'!
testRoverLog: aLog afterProcessing: aStringToProcess andAssertLogSize: aSize andLogCollection: aLogCollection

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North.		
	rover addObserver: aLog.
	rover process: aStringToProcess.
	
	self assert: aLog size equals: aSize.
	self assert: aLog printLog equals: aLogCollection asOrderedCollection.!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:17:47'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:18:01'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:18:01'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:18:01'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:18:01'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:18:01'!
PASSED!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:18:04' prior: 50866937!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	rover process: ''.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:18:05'!
FAILURE!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:18:10' prior: 50868012!
test03UpdateHeadingRotationRight

	| rover window |
	
	rover := MarsRover at: 1@2 heading: #North.
	window := Window new.
	
	rover addObserver: window.
	
	rover process: 'r'.
	
	self assert: window roverPosition equals: 1@2.
	self assert: window roverHeading equals: #East.! !
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:19:25'!
testRoverWindow: aWindow afterProcessing: aStringToProcess thenAssertPosition: aPosition andHeading: aHeading

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North.		
	rover addObserver: aWindow.
	rover process: aStringToProcess.
	
	self assert: aWindow  equals: aWindow.
	self assert: aWindow  equals: aWindow.! !
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:19:45' prior: 50868038!
testRoverWindow: aWindow afterProcessing: aStringToProcess thenAssertPosition: aPosition andHeading: aHeading

	| rover |
	
	rover := MarsRover at: 1@2 heading: #North.		
	rover addObserver: aWindow.
	rover process: aStringToProcess.
	
	self assert: aWindow roverPosition equals: aPosition.
	self assert: aWindow roverHeading equals: aHeading.! !
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:20:15' prior: 50866900!
test01UpdatePositionForwardFacingNorth

	| rover window |
	
	window := Window new.
	
	rover addObserver: window.
	
	rover process: 'f'.
	
	self assert: window roverPosition equals: 1@3.
	self assert: window roverHeading equals: #North.
	
	self testRoverWindow: window afterProcessing: 'f' thenAssertPosition: 1@3 andHeading: #North! !
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:20:22' prior: 50868065!
test01UpdatePositionForwardFacingNorth

	| window |
	
	window := Window new.	
	self testRoverWindow: window afterProcessing: 'f' thenAssertPosition: 1@3 andHeading: #North! !

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:20:24'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:20:24'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:20:24'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:20:24'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:20:24'!
PASSED!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:20:41' prior: 50866925!
test02UpdatePositionBackwardFacingNorth

	| window |
	
	window := Window new.
	self testRoverWindow: window afterProcessing: 'fb' thenAssertPosition: 1@2 andHeading: #North! !

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:20:43'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:20:43'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:20:43'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:20:43'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:20:43'!
PASSED!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:20:57' prior: 50868027!
test03UpdateHeadingRotationRight

	| window |
	
	window := Window new.
	self testRoverWindow: window afterProcessing: 'fb' thenAssertPosition: 1@2 andHeading: #East! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:20:58'!
FAILURE!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:21:03' prior: 50868127!
test03UpdateHeadingRotationRight

	| window |
	
	window := Window new.
	self testRoverWindow: window afterProcessing: 'r' thenAssertPosition: 1@2 andHeading: #East! !

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:21:03'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:21:03'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:21:03'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:21:03'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:21:03'!
PASSED!
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:21:05' prior: 50868138!
test03UpdateHeadingRotationRight

	| window |
	
	window := Window new.
	self testRoverWindow: window afterProcessing: 'r' thenAssertPosition: 1@2 andHeading: #East! !
!WindowTest methodsFor: 'testing' stamp: 'plp 6/5/2021 16:21:20' prior: 50866949!
test04InitialPositionAfterAddWindow

	| window |
	
	window := Window new.
	self testRoverWindow: window afterProcessing: '' thenAssertPosition: 1@2 andHeading: #North! !

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:21:22'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:21:22'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:21:22'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:21:22'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:21:22'!
PASSED!

!testRun: #LogTest #test01LogForwardMovementFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test02LogBackwardsMovementFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test03LogAllMovementsForAllDirections stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test04LogHeadingRotationRightFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test05LogHeadingRotationLeftFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test06LogAllHeadingRotationsForAPosition stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #LogTest #test07LogAllEvents stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #ObserverTest #test01WindowAndLogSimultaneous stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #WindowTest #test01UpdatePositionForwardFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #WindowTest #test02UpdatePositionBackwardFacingNorth stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #WindowTest #test03UpdateHeadingRotationRight stamp: 'plp 6/5/2021 16:21:54'!
PASSED!

!testRun: #WindowTest #test04InitialPositionAfterAddWindow stamp: 'plp 6/5/2021 16:21:54'!
PASSED!